
keypad_with_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08007fd0  08007fd0  00017fd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082d0  080082d0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080082d0  080082d0  000182d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082d8  080082d8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082d8  080082d8  000182d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082dc  080082dc  000182dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080082e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000080  08008360  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08008360  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc28  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e7c  00000000  00000000  0002ccd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  0002eb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  0002f7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018796  00000000  00000000  00030330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc8c  00000000  00000000  00048ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098de2  00000000  00000000  00056752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef534  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000440c  00000000  00000000  000ef584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007fb8 	.word	0x08007fb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08007fb8 	.word	0x08007fb8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2f>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf4:	bf24      	itt	cs
 8000bf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_d2f+0x30>
 8000c00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c14:	bf08      	it	eq
 8000c16:	f020 0001 	biceq.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c20:	d121      	bne.n	8000c66 <__aeabi_d2f+0x7a>
 8000c22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c26:	bfbc      	itt	lt
 8000c28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	4770      	bxlt	lr
 8000c2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c36:	f1c2 0218 	rsb	r2, r2, #24
 8000c3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c42:	fa20 f002 	lsr.w	r0, r0, r2
 8000c46:	bf18      	it	ne
 8000c48:	f040 0001 	orrne.w	r0, r0, #1
 8000c4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c58:	ea40 000c 	orr.w	r0, r0, ip
 8000c5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c64:	e7cc      	b.n	8000c00 <__aeabi_d2f+0x14>
 8000c66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6a:	d107      	bne.n	8000c7c <__aeabi_d2f+0x90>
 8000c6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c70:	bf1e      	ittt	ne
 8000c72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7a:	4770      	bxne	lr
 8000c7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca0:	f000 b974 	b.w	8000f8c <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f806 	bl	8000cbc <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__udivmoddi4>:
 8000cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc0:	9d08      	ldr	r5, [sp, #32]
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	468e      	mov	lr, r1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d14d      	bne.n	8000d66 <__udivmoddi4+0xaa>
 8000cca:	428a      	cmp	r2, r1
 8000ccc:	4694      	mov	ip, r2
 8000cce:	d969      	bls.n	8000da4 <__udivmoddi4+0xe8>
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	b152      	cbz	r2, 8000cec <__udivmoddi4+0x30>
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	f1c2 0120 	rsb	r1, r2, #32
 8000cde:	fa20 f101 	lsr.w	r1, r0, r1
 8000ce2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cea:	4094      	lsls	r4, r2
 8000cec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf0:	0c21      	lsrs	r1, r4, #16
 8000cf2:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf6:	fa1f f78c 	uxth.w	r7, ip
 8000cfa:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d02:	fb06 f107 	mul.w	r1, r6, r7
 8000d06:	4299      	cmp	r1, r3
 8000d08:	d90a      	bls.n	8000d20 <__udivmoddi4+0x64>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d12:	f080 811f 	bcs.w	8000f54 <__udivmoddi4+0x298>
 8000d16:	4299      	cmp	r1, r3
 8000d18:	f240 811c 	bls.w	8000f54 <__udivmoddi4+0x298>
 8000d1c:	3e02      	subs	r6, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a5b      	subs	r3, r3, r1
 8000d22:	b2a4      	uxth	r4, r4
 8000d24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d28:	fb08 3310 	mls	r3, r8, r0, r3
 8000d2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d30:	fb00 f707 	mul.w	r7, r0, r7
 8000d34:	42a7      	cmp	r7, r4
 8000d36:	d90a      	bls.n	8000d4e <__udivmoddi4+0x92>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d40:	f080 810a 	bcs.w	8000f58 <__udivmoddi4+0x29c>
 8000d44:	42a7      	cmp	r7, r4
 8000d46:	f240 8107 	bls.w	8000f58 <__udivmoddi4+0x29c>
 8000d4a:	4464      	add	r4, ip
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d52:	1be4      	subs	r4, r4, r7
 8000d54:	2600      	movs	r6, #0
 8000d56:	b11d      	cbz	r5, 8000d60 <__udivmoddi4+0xa4>
 8000d58:	40d4      	lsrs	r4, r2
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d909      	bls.n	8000d7e <__udivmoddi4+0xc2>
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	f000 80ef 	beq.w	8000f4e <__udivmoddi4+0x292>
 8000d70:	2600      	movs	r6, #0
 8000d72:	e9c5 0100 	strd	r0, r1, [r5]
 8000d76:	4630      	mov	r0, r6
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	fab3 f683 	clz	r6, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d14a      	bne.n	8000e1c <__udivmoddi4+0x160>
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d302      	bcc.n	8000d90 <__udivmoddi4+0xd4>
 8000d8a:	4282      	cmp	r2, r0
 8000d8c:	f200 80f9 	bhi.w	8000f82 <__udivmoddi4+0x2c6>
 8000d90:	1a84      	subs	r4, r0, r2
 8000d92:	eb61 0303 	sbc.w	r3, r1, r3
 8000d96:	2001      	movs	r0, #1
 8000d98:	469e      	mov	lr, r3
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	d0e0      	beq.n	8000d60 <__udivmoddi4+0xa4>
 8000d9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000da2:	e7dd      	b.n	8000d60 <__udivmoddi4+0xa4>
 8000da4:	b902      	cbnz	r2, 8000da8 <__udivmoddi4+0xec>
 8000da6:	deff      	udf	#255	; 0xff
 8000da8:	fab2 f282 	clz	r2, r2
 8000dac:	2a00      	cmp	r2, #0
 8000dae:	f040 8092 	bne.w	8000ed6 <__udivmoddi4+0x21a>
 8000db2:	eba1 010c 	sub.w	r1, r1, ip
 8000db6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dba:	fa1f fe8c 	uxth.w	lr, ip
 8000dbe:	2601      	movs	r6, #1
 8000dc0:	0c20      	lsrs	r0, r4, #16
 8000dc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000dca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dce:	fb0e f003 	mul.w	r0, lr, r3
 8000dd2:	4288      	cmp	r0, r1
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x12c>
 8000dd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dde:	d202      	bcs.n	8000de6 <__udivmoddi4+0x12a>
 8000de0:	4288      	cmp	r0, r1
 8000de2:	f200 80cb 	bhi.w	8000f7c <__udivmoddi4+0x2c0>
 8000de6:	4643      	mov	r3, r8
 8000de8:	1a09      	subs	r1, r1, r0
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df0:	fb07 1110 	mls	r1, r7, r0, r1
 8000df4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x156>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e08:	d202      	bcs.n	8000e10 <__udivmoddi4+0x154>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	f200 80bb 	bhi.w	8000f86 <__udivmoddi4+0x2ca>
 8000e10:	4608      	mov	r0, r1
 8000e12:	eba4 040e 	sub.w	r4, r4, lr
 8000e16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e1a:	e79c      	b.n	8000d56 <__udivmoddi4+0x9a>
 8000e1c:	f1c6 0720 	rsb	r7, r6, #32
 8000e20:	40b3      	lsls	r3, r6
 8000e22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e32:	431c      	orrs	r4, r3
 8000e34:	40f9      	lsrs	r1, r7
 8000e36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e42:	0c20      	lsrs	r0, r4, #16
 8000e44:	fa1f fe8c 	uxth.w	lr, ip
 8000e48:	fb09 1118 	mls	r1, r9, r8, r1
 8000e4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e50:	fb08 f00e 	mul.w	r0, r8, lr
 8000e54:	4288      	cmp	r0, r1
 8000e56:	fa02 f206 	lsl.w	r2, r2, r6
 8000e5a:	d90b      	bls.n	8000e74 <__udivmoddi4+0x1b8>
 8000e5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e64:	f080 8088 	bcs.w	8000f78 <__udivmoddi4+0x2bc>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f240 8085 	bls.w	8000f78 <__udivmoddi4+0x2bc>
 8000e6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e72:	4461      	add	r1, ip
 8000e74:	1a09      	subs	r1, r1, r0
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e88:	458e      	cmp	lr, r1
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x1e2>
 8000e8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e94:	d26c      	bcs.n	8000f70 <__udivmoddi4+0x2b4>
 8000e96:	458e      	cmp	lr, r1
 8000e98:	d96a      	bls.n	8000f70 <__udivmoddi4+0x2b4>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	4461      	add	r1, ip
 8000e9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ea2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea6:	eba1 010e 	sub.w	r1, r1, lr
 8000eaa:	42a1      	cmp	r1, r4
 8000eac:	46c8      	mov	r8, r9
 8000eae:	46a6      	mov	lr, r4
 8000eb0:	d356      	bcc.n	8000f60 <__udivmoddi4+0x2a4>
 8000eb2:	d053      	beq.n	8000f5c <__udivmoddi4+0x2a0>
 8000eb4:	b15d      	cbz	r5, 8000ece <__udivmoddi4+0x212>
 8000eb6:	ebb3 0208 	subs.w	r2, r3, r8
 8000eba:	eb61 010e 	sbc.w	r1, r1, lr
 8000ebe:	fa01 f707 	lsl.w	r7, r1, r7
 8000ec2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec6:	40f1      	lsrs	r1, r6
 8000ec8:	431f      	orrs	r7, r3
 8000eca:	e9c5 7100 	strd	r7, r1, [r5]
 8000ece:	2600      	movs	r6, #0
 8000ed0:	4631      	mov	r1, r6
 8000ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed6:	f1c2 0320 	rsb	r3, r2, #32
 8000eda:	40d8      	lsrs	r0, r3
 8000edc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee4:	4091      	lsls	r1, r2
 8000ee6:	4301      	orrs	r1, r0
 8000ee8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef8:	0c0b      	lsrs	r3, r1, #16
 8000efa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efe:	fb00 f60e 	mul.w	r6, r0, lr
 8000f02:	429e      	cmp	r6, r3
 8000f04:	fa04 f402 	lsl.w	r4, r4, r2
 8000f08:	d908      	bls.n	8000f1c <__udivmoddi4+0x260>
 8000f0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f12:	d22f      	bcs.n	8000f74 <__udivmoddi4+0x2b8>
 8000f14:	429e      	cmp	r6, r3
 8000f16:	d92d      	bls.n	8000f74 <__udivmoddi4+0x2b8>
 8000f18:	3802      	subs	r0, #2
 8000f1a:	4463      	add	r3, ip
 8000f1c:	1b9b      	subs	r3, r3, r6
 8000f1e:	b289      	uxth	r1, r1
 8000f20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f24:	fb07 3316 	mls	r3, r7, r6, r3
 8000f28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x28a>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f3c:	d216      	bcs.n	8000f6c <__udivmoddi4+0x2b0>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d914      	bls.n	8000f6c <__udivmoddi4+0x2b0>
 8000f42:	3e02      	subs	r6, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f4c:	e738      	b.n	8000dc0 <__udivmoddi4+0x104>
 8000f4e:	462e      	mov	r6, r5
 8000f50:	4628      	mov	r0, r5
 8000f52:	e705      	b.n	8000d60 <__udivmoddi4+0xa4>
 8000f54:	4606      	mov	r6, r0
 8000f56:	e6e3      	b.n	8000d20 <__udivmoddi4+0x64>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6f8      	b.n	8000d4e <__udivmoddi4+0x92>
 8000f5c:	454b      	cmp	r3, r9
 8000f5e:	d2a9      	bcs.n	8000eb4 <__udivmoddi4+0x1f8>
 8000f60:	ebb9 0802 	subs.w	r8, r9, r2
 8000f64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f68:	3801      	subs	r0, #1
 8000f6a:	e7a3      	b.n	8000eb4 <__udivmoddi4+0x1f8>
 8000f6c:	4646      	mov	r6, r8
 8000f6e:	e7ea      	b.n	8000f46 <__udivmoddi4+0x28a>
 8000f70:	4620      	mov	r0, r4
 8000f72:	e794      	b.n	8000e9e <__udivmoddi4+0x1e2>
 8000f74:	4640      	mov	r0, r8
 8000f76:	e7d1      	b.n	8000f1c <__udivmoddi4+0x260>
 8000f78:	46d0      	mov	r8, sl
 8000f7a:	e77b      	b.n	8000e74 <__udivmoddi4+0x1b8>
 8000f7c:	3b02      	subs	r3, #2
 8000f7e:	4461      	add	r1, ip
 8000f80:	e732      	b.n	8000de8 <__udivmoddi4+0x12c>
 8000f82:	4630      	mov	r0, r6
 8000f84:	e709      	b.n	8000d9a <__udivmoddi4+0xde>
 8000f86:	4464      	add	r4, ip
 8000f88:	3802      	subs	r0, #2
 8000f8a:	e742      	b.n	8000e12 <__udivmoddi4+0x156>

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000f90:	b5b0      	push	{r4, r5, r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000f9e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000fa2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000fa6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000faa:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fae:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000fb0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000fb2:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 f80e 	bl	8000fe6 <Lcd_init>

	return lcd;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	461d      	mov	r5, r3
 8000fce:	f107 0410 	add.w	r4, r7, #16
 8000fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fda:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	3728      	adds	r7, #40	; 0x28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bdb0      	pop	{r4, r5, r7, pc}

08000fe6 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	7d9b      	ldrb	r3, [r3, #22]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10c      	bne.n	8001010 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000ff6:	2133      	movs	r1, #51	; 0x33
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 f873 	bl	80010e4 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000ffe:	2132      	movs	r1, #50	; 0x32
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f86f 	bl	80010e4 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8001006:	2128      	movs	r1, #40	; 0x28
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 f86b 	bl	80010e4 <lcd_write_command>
 800100e:	e003      	b.n	8001018 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8001010:	2138      	movs	r1, #56	; 0x38
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 f866 	bl	80010e4 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8001018:	2101      	movs	r1, #1
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f862 	bl	80010e4 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8001020:	210c      	movs	r1, #12
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 f85e 	bl	80010e4 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001028:	2106      	movs	r1, #6
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f85a 	bl	80010e4 <lcd_write_command>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <Lcd_float>:
float value : It is the float or double value.
int ndigits : It is number of digits.
char * buf : It is character pointer, in this
variable string converted value will be copied.*/
void Lcd_float(Lcd_HandleTypeDef * lcd, float  value)
 {
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	ed87 0a00 	vstr	s0, [r7]
	char buf[11];
	gcvt(value, 10, buf); //Convert float value in string using gcvt()
 8001044:	6838      	ldr	r0, [r7, #0]
 8001046:	f7ff fa97 	bl	8000578 <__aeabi_f2d>
 800104a:	4604      	mov	r4, r0
 800104c:	460d      	mov	r5, r1
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	4619      	mov	r1, r3
 8001054:	200a      	movs	r0, #10
 8001056:	ec45 4b10 	vmov	d0, r4, r5
 800105a:	f004 fbdb 	bl	8005814 <gcvt>
     Lcd_string(lcd, buf);
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	4619      	mov	r1, r3
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 f804 	bl	8001072 <Lcd_string>
 }
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bdb0      	pop	{r4, r5, r7, pc}

08001072 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8001072:	b590      	push	{r4, r7, lr}
 8001074:	b085      	sub	sp, #20
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	e00a      	b.n	8001098 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	4413      	add	r3, r2
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	4619      	mov	r1, r3
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 f857 	bl	8001140 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	3301      	adds	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	7bfc      	ldrb	r4, [r7, #15]
 800109a:	6838      	ldr	r0, [r7, #0]
 800109c:	f7ff f8aa 	bl	80001f4 <strlen>
 80010a0:	4603      	mov	r3, r0
 80010a2:	429c      	cmp	r4, r3
 80010a4:	d3ed      	bcc.n	8001082 <Lcd_string+0x10>
	}
}
 80010a6:	bf00      	nop
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd90      	pop	{r4, r7, pc}

080010b0 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	70fb      	strb	r3, [r7, #3]
 80010bc:	4613      	mov	r3, r2
 80010be:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <Lcd_cursor+0x30>)
 80010c4:	5cd2      	ldrb	r2, [r2, r3]
 80010c6:	78bb      	ldrb	r3, [r7, #2]
 80010c8:	4413      	add	r3, r2
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	3b80      	subs	r3, #128	; 0x80
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	4619      	mov	r1, r3
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 f806 	bl	80010e4 <lcd_write_command>
	#endif
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	08007ffc 	.word	0x08007ffc

080010e4 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6898      	ldr	r0, [r3, #8]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	899b      	ldrh	r3, [r3, #12]
 80010f8:	2200      	movs	r2, #0
 80010fa:	4619      	mov	r1, r3
 80010fc:	f002 fb96 	bl	800382c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7d9b      	ldrb	r3, [r3, #22]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d111      	bne.n	800112c <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	091b      	lsrs	r3, r3, #4
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2204      	movs	r2, #4
 8001110:	4619      	mov	r1, r3
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 f842 	bl	800119c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2204      	movs	r2, #4
 8001122:	4619      	mov	r1, r3
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 f839 	bl	800119c <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800112a:	e005      	b.n	8001138 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 800112c:	78fb      	ldrb	r3, [r7, #3]
 800112e:	2208      	movs	r2, #8
 8001130:	4619      	mov	r1, r3
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 f832 	bl	800119c <lcd_write>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6898      	ldr	r0, [r3, #8]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	899b      	ldrh	r3, [r3, #12]
 8001154:	2201      	movs	r2, #1
 8001156:	4619      	mov	r1, r3
 8001158:	f002 fb68 	bl	800382c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7d9b      	ldrb	r3, [r3, #22]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d111      	bne.n	8001188 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	091b      	lsrs	r3, r3, #4
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2204      	movs	r2, #4
 800116c:	4619      	mov	r1, r3
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f814 	bl	800119c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001174:	78fb      	ldrb	r3, [r7, #3]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2204      	movs	r2, #4
 800117e:	4619      	mov	r1, r3
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f80b 	bl	800119c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8001186:	e005      	b.n	8001194 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	2208      	movs	r2, #8
 800118c:	4619      	mov	r1, r3
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 f804 	bl	800119c <lcd_write>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
 80011a8:	4613      	mov	r3, r2
 80011aa:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]
 80011b0:	e019      	b.n	80011e6 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	6818      	ldr	r0, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	8819      	ldrh	r1, [r3, #0]
 80011ca:	78fa      	ldrb	r2, [r7, #3]
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	fa42 f303 	asr.w	r3, r2, r3
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	461a      	mov	r2, r3
 80011dc:	f002 fb26 	bl	800382c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	3301      	adds	r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	78bb      	ldrb	r3, [r7, #2]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d3e1      	bcc.n	80011b2 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6918      	ldr	r0, [r3, #16]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	8a9b      	ldrh	r3, [r3, #20]
 80011f6:	2201      	movs	r2, #1
 80011f8:	4619      	mov	r1, r3
 80011fa:	f002 fb17 	bl	800382c <HAL_GPIO_WritePin>
	DELAY(1);
 80011fe:	2001      	movs	r0, #1
 8001200:	f001 fb28 	bl	8002854 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6918      	ldr	r0, [r3, #16]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	8a9b      	ldrh	r3, [r3, #20]
 800120c:	2200      	movs	r2, #0
 800120e:	4619      	mov	r1, r3
 8001210:	f002 fb0c 	bl	800382c <HAL_GPIO_WritePin>
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <ADC_Select_CH1>:
float ve;
int adc_val1;
int adc_val2;
float Vn;
int Temp;
void ADC_Select_CH1(void){
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8001222:	463b      	mov	r3, r7
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
sConfig.Channel = ADC_CHANNEL_1;
 800122e:	2301      	movs	r3, #1
 8001230:	603b      	str	r3, [r7, #0]
sConfig.Rank = 1;
 8001232:	2301      	movs	r3, #1
 8001234:	607b      	str	r3, [r7, #4]
sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001236:	2307      	movs	r3, #7
 8001238:	60bb      	str	r3, [r7, #8]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123a:	463b      	mov	r3, r7
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <ADC_Select_CH1+0x3c>)
 8001240:	f001 fe1e 	bl	8002e80 <HAL_ADC_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <ADC_Select_CH1+0x32>
{
  Error_Handler();
 800124a:	f000 ffe9 	bl	8002220 <Error_Handler>
}
}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	2000009c 	.word	0x2000009c

0800125c <ADC_Select_CH3>:
void ADC_Select_CH3(void){
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8001262:	463b      	mov	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
sConfig.Channel = ADC_CHANNEL_3;
 800126e:	2303      	movs	r3, #3
 8001270:	603b      	str	r3, [r7, #0]
sConfig.Rank = 1;
 8001272:	2301      	movs	r3, #1
 8001274:	607b      	str	r3, [r7, #4]
sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001276:	2307      	movs	r3, #7
 8001278:	60bb      	str	r3, [r7, #8]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <ADC_Select_CH3+0x3c>)
 8001280:	f001 fdfe 	bl	8002e80 <HAL_ADC_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <ADC_Select_CH3+0x32>
{
  Error_Handler();
 800128a:	f000 ffc9 	bl	8002220 <Error_Handler>
}
}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000009c 	.word	0x2000009c
 800129c:	00000000 	.word	0x00000000

080012a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b090      	sub	sp, #64	; 0x40
 80012a4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a6:	f001 fa63 	bl	8002770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012aa:	f000 f997 	bl	80015dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ae:	f000 fbfd 	bl	8001aac <MX_GPIO_Init>
  MX_TIM1_Init();
 80012b2:	f000 fa4f 	bl	8001754 <MX_TIM1_Init>
  MX_TIM5_Init();
 80012b6:	f000 fb89 	bl	80019cc <MX_TIM5_Init>
  MX_TIM2_Init();
 80012ba:	f000 faed 	bl	8001898 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012be:	f000 fb37 	bl	8001930 <MX_TIM3_Init>
  MX_ADC1_Init();
 80012c2:	f000 f9f5 	bl	80016b0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012cc:	48ae      	ldr	r0, [pc, #696]	; (8001588 <main+0x2e8>)
 80012ce:	f002 faad 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d8:	48ab      	ldr	r0, [pc, #684]	; (8001588 <main+0x2e8>)
 80012da:	f002 faa7 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e4:	48a8      	ldr	r0, [pc, #672]	; (8001588 <main+0x2e8>)
 80012e6:	f002 faa1 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012f0:	48a5      	ldr	r0, [pc, #660]	; (8001588 <main+0x2e8>)
 80012f2:	f002 fa9b 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2104      	movs	r1, #4
 80012fa:	48a4      	ldr	r0, [pc, #656]	; (800158c <main+0x2ec>)
 80012fc:	f002 fa96 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	2110      	movs	r1, #16
 8001304:	48a1      	ldr	r0, [pc, #644]	; (800158c <main+0x2ec>)
 8001306:	f002 fa91 	bl	800382c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800130a:	20c8      	movs	r0, #200	; 0xc8
 800130c:	f001 faa2 	bl	8002854 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8001310:	2201      	movs	r2, #1
 8001312:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001316:	489c      	ldr	r0, [pc, #624]	; (8001588 <main+0x2e8>)
 8001318:	f002 fa88 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 800131c:	2201      	movs	r2, #1
 800131e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001322:	4899      	ldr	r0, [pc, #612]	; (8001588 <main+0x2e8>)
 8001324:	f002 fa82 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8001328:	2201      	movs	r2, #1
 800132a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800132e:	4896      	ldr	r0, [pc, #600]	; (8001588 <main+0x2e8>)
 8001330:	f002 fa7c 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8001334:	2201      	movs	r2, #1
 8001336:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800133a:	4893      	ldr	r0, [pc, #588]	; (8001588 <main+0x2e8>)
 800133c:	f002 fa76 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	2104      	movs	r1, #4
 8001344:	4891      	ldr	r0, [pc, #580]	; (800158c <main+0x2ec>)
 8001346:	f002 fa71 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800134a:	2201      	movs	r2, #1
 800134c:	2110      	movs	r1, #16
 800134e:	488f      	ldr	r0, [pc, #572]	; (800158c <main+0x2ec>)
 8001350:	f002 fa6c 	bl	800382c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, C1_Pin, 1);
 8001354:	2201      	movs	r2, #1
 8001356:	2101      	movs	r1, #1
 8001358:	488b      	ldr	r0, [pc, #556]	; (8001588 <main+0x2e8>)
 800135a:	f002 fa67 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C2_Pin, 1);
 800135e:	2201      	movs	r2, #1
 8001360:	2102      	movs	r1, #2
 8001362:	4889      	ldr	r0, [pc, #548]	; (8001588 <main+0x2e8>)
 8001364:	f002 fa62 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C3_Pin, 1);
 8001368:	2201      	movs	r2, #1
 800136a:	2104      	movs	r1, #4
 800136c:	4886      	ldr	r0, [pc, #536]	; (8001588 <main+0x2e8>)
 800136e:	f002 fa5d 	bl	800382c <HAL_GPIO_WritePin>

	Lcd_PortType ports[] = {D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
 8001372:	4b87      	ldr	r3, [pc, #540]	; (8001590 <main+0x2f0>)
 8001374:	f107 0420 	add.w	r4, r7, #32
 8001378:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800137a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Lcd_PinType pins[]= {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 800137e:	4a85      	ldr	r2, [pc, #532]	; (8001594 <main+0x2f4>)
 8001380:	f107 0318 	add.w	r3, r7, #24
 8001384:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001388:	e883 0003 	stmia.w	r3, {r0, r1}

	lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, E_GPIO_Port, E_Pin, LCD_4_BIT_MODE);
 800138c:	4c82      	ldr	r4, [pc, #520]	; (8001598 <main+0x2f8>)
 800138e:	4638      	mov	r0, r7
 8001390:	f107 0218 	add.w	r2, r7, #24
 8001394:	f107 0120 	add.w	r1, r7, #32
 8001398:	2300      	movs	r3, #0
 800139a:	9303      	str	r3, [sp, #12]
 800139c:	2304      	movs	r3, #4
 800139e:	9302      	str	r3, [sp, #8]
 80013a0:	4b7e      	ldr	r3, [pc, #504]	; (800159c <main+0x2fc>)
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	2302      	movs	r3, #2
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	4b7c      	ldr	r3, [pc, #496]	; (800159c <main+0x2fc>)
 80013aa:	f7ff fdf1 	bl	8000f90 <Lcd_create>
 80013ae:	4625      	mov	r5, r4
 80013b0:	463c      	mov	r4, r7
 80013b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013ba:	e885 0003 	stmia.w	r5, {r0, r1}
	Lcd_cursor(&lcd, 0,2);
 80013be:	2202      	movs	r2, #2
 80013c0:	2100      	movs	r1, #0
 80013c2:	4875      	ldr	r0, [pc, #468]	; (8001598 <main+0x2f8>)
 80013c4:	f7ff fe74 	bl	80010b0 <Lcd_cursor>
	Lcd_string(&lcd, "Keypad test");
 80013c8:	4975      	ldr	r1, [pc, #468]	; (80015a0 <main+0x300>)
 80013ca:	4873      	ldr	r0, [pc, #460]	; (8001598 <main+0x2f8>)
 80013cc:	f7ff fe51 	bl	8001072 <Lcd_string>
	Lcd_cursor (&lcd, 1,0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2101      	movs	r1, #1
 80013d4:	4870      	ldr	r0, [pc, #448]	; (8001598 <main+0x2f8>)
 80013d6:	f7ff fe6b 	bl	80010b0 <Lcd_cursor>
	Lcd_string(&lcd, "key:");
 80013da:	4972      	ldr	r1, [pc, #456]	; (80015a4 <main+0x304>)
 80013dc:	486e      	ldr	r0, [pc, #440]	; (8001598 <main+0x2f8>)
 80013de:	f7ff fe48 	bl	8001072 <Lcd_string>

	HAL_TIM_Base_Start_IT(&htim1);
 80013e2:	4871      	ldr	r0, [pc, #452]	; (80015a8 <main+0x308>)
 80013e4:	f002 ff22 	bl	800422c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 80013e8:	4870      	ldr	r0, [pc, #448]	; (80015ac <main+0x30c>)
 80013ea:	f002 ff1f 	bl	800422c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80013ee:	4870      	ldr	r0, [pc, #448]	; (80015b0 <main+0x310>)
 80013f0:	f002 ff1c 	bl	800422c <HAL_TIM_Base_Start_IT>
	int cnt;

	HAL_TIM_Base_Start_IT(&htim5);
 80013f4:	486f      	ldr	r0, [pc, #444]	; (80015b4 <main+0x314>)
 80013f6:	f002 ff19 	bl	800422c <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 80013fa:	2100      	movs	r1, #0
 80013fc:	486d      	ldr	r0, [pc, #436]	; (80015b4 <main+0x314>)
 80013fe:	f003 f8db 	bl	80045b8 <HAL_TIM_IC_Start_IT>

	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001402:	2100      	movs	r1, #0
 8001404:	4868      	ldr	r0, [pc, #416]	; (80015a8 <main+0x308>)
 8001406:	f002 ffcd 	bl	80043a4 <HAL_TIM_PWM_Start>
	    	  Lcd_cursor (&lcd, 3,0);
	    	   Lcd_int(&lcd, cnt); */
		//Lcd_cursor (&lcd, 2,0);
		//Lcd_float(&lcd, Fr);
		// TIM1 -> CCR1 =1500;
		HAL_ADC_Start(&hadc1);
 800140a:	486b      	ldr	r0, [pc, #428]	; (80015b8 <main+0x318>)
 800140c:	f001 fa8a 	bl	8002924 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8001410:	2164      	movs	r1, #100	; 0x64
 8001412:	4869      	ldr	r0, [pc, #420]	; (80015b8 <main+0x318>)
 8001414:	f001 fb6d 	bl	8002af2 <HAL_ADC_PollForConversion>
		redval= HAL_ADC_GetValue(&hadc1);
 8001418:	4867      	ldr	r0, [pc, #412]	; (80015b8 <main+0x318>)
 800141a:	f001 fd05 	bl	8002e28 <HAL_ADC_GetValue>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	4b66      	ldr	r3, [pc, #408]	; (80015bc <main+0x31c>)
 8001424:	601a      	str	r2, [r3, #0]
		HAL_Delay(200);
 8001426:	20c8      	movs	r0, #200	; 0xc8
 8001428:	f001 fa14 	bl	8002854 <HAL_Delay>
		ve=redval*(3.6/4095);
 800142c:	4b63      	ldr	r3, [pc, #396]	; (80015bc <main+0x31c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff f88f 	bl	8000554 <__aeabi_i2d>
 8001436:	a350      	add	r3, pc, #320	; (adr r3, 8001578 <main+0x2d8>)
 8001438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143c:	f7ff f8f4 	bl	8000628 <__aeabi_dmul>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f7ff fbd0 	bl	8000bec <__aeabi_d2f>
 800144c:	4603      	mov	r3, r0
 800144e:	4a5c      	ldr	r2, [pc, #368]	; (80015c0 <main+0x320>)
 8001450:	6013      	str	r3, [r2, #0]
		Lcd_cursor (&lcd, 2,0);
 8001452:	2200      	movs	r2, #0
 8001454:	2102      	movs	r1, #2
 8001456:	4850      	ldr	r0, [pc, #320]	; (8001598 <main+0x2f8>)
 8001458:	f7ff fe2a 	bl	80010b0 <Lcd_cursor>
		Lcd_float(&lcd, ve);
 800145c:	4b58      	ldr	r3, [pc, #352]	; (80015c0 <main+0x320>)
 800145e:	edd3 7a00 	vldr	s15, [r3]
 8001462:	eeb0 0a67 	vmov.f32	s0, s15
 8001466:	484c      	ldr	r0, [pc, #304]	; (8001598 <main+0x2f8>)
 8001468:	f7ff fde6 	bl	8001038 <Lcd_float>
		TIM1 -> CCR1 =redval*0.4884;
 800146c:	4b53      	ldr	r3, [pc, #332]	; (80015bc <main+0x31c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f86f 	bl	8000554 <__aeabi_i2d>
 8001476:	a342      	add	r3, pc, #264	; (adr r3, 8001580 <main+0x2e0>)
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	f7ff f8d4 	bl	8000628 <__aeabi_dmul>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4c4f      	ldr	r4, [pc, #316]	; (80015c4 <main+0x324>)
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	f7ff fb8f 	bl	8000bac <__aeabi_d2uiz>
 800148e:	4603      	mov	r3, r0
 8001490:	6363      	str	r3, [r4, #52]	; 0x34

		ADC_Select_CH1();
 8001492:	f7ff fec3 	bl	800121c <ADC_Select_CH1>
        HAL_ADC_Start(&hadc1);
 8001496:	4848      	ldr	r0, [pc, #288]	; (80015b8 <main+0x318>)
 8001498:	f001 fa44 	bl	8002924 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 100);
 800149c:	2164      	movs	r1, #100	; 0x64
 800149e:	4846      	ldr	r0, [pc, #280]	; (80015b8 <main+0x318>)
 80014a0:	f001 fb27 	bl	8002af2 <HAL_ADC_PollForConversion>
        adc_val1= HAL_ADC_GetValue(&hadc1);
 80014a4:	4844      	ldr	r0, [pc, #272]	; (80015b8 <main+0x318>)
 80014a6:	f001 fcbf 	bl	8002e28 <HAL_ADC_GetValue>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b46      	ldr	r3, [pc, #280]	; (80015c8 <main+0x328>)
 80014b0:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 80014b2:	4841      	ldr	r0, [pc, #260]	; (80015b8 <main+0x318>)
 80014b4:	f001 faea 	bl	8002a8c <HAL_ADC_Stop>
		Vn=adc_val1*(3.6/4095);
 80014b8:	4b43      	ldr	r3, [pc, #268]	; (80015c8 <main+0x328>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff f849 	bl	8000554 <__aeabi_i2d>
 80014c2:	a32d      	add	r3, pc, #180	; (adr r3, 8001578 <main+0x2d8>)
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	f7ff f8ae 	bl	8000628 <__aeabi_dmul>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fb8a 	bl	8000bec <__aeabi_d2f>
 80014d8:	4603      	mov	r3, r0
 80014da:	4a3c      	ldr	r2, [pc, #240]	; (80015cc <main+0x32c>)
 80014dc:	6013      	str	r3, [r2, #0]
		Lcd_cursor (&lcd, 2,0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2102      	movs	r1, #2
 80014e2:	482d      	ldr	r0, [pc, #180]	; (8001598 <main+0x2f8>)
 80014e4:	f7ff fde4 	bl	80010b0 <Lcd_cursor>
		Lcd_float(&lcd, Vn);
 80014e8:	4b38      	ldr	r3, [pc, #224]	; (80015cc <main+0x32c>)
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	eeb0 0a67 	vmov.f32	s0, s15
 80014f2:	4829      	ldr	r0, [pc, #164]	; (8001598 <main+0x2f8>)
 80014f4:	f7ff fda0 	bl	8001038 <Lcd_float>



		ADC_Select_CH3();
 80014f8:	f7ff feb0 	bl	800125c <ADC_Select_CH3>
        HAL_ADC_Start(&hadc1);
 80014fc:	482e      	ldr	r0, [pc, #184]	; (80015b8 <main+0x318>)
 80014fe:	f001 fa11 	bl	8002924 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 100);
 8001502:	2164      	movs	r1, #100	; 0x64
 8001504:	482c      	ldr	r0, [pc, #176]	; (80015b8 <main+0x318>)
 8001506:	f001 faf4 	bl	8002af2 <HAL_ADC_PollForConversion>
        adc_val2= HAL_ADC_GetValue(&hadc1);
 800150a:	482b      	ldr	r0, [pc, #172]	; (80015b8 <main+0x318>)
 800150c:	f001 fc8c 	bl	8002e28 <HAL_ADC_GetValue>
 8001510:	4603      	mov	r3, r0
 8001512:	461a      	mov	r2, r3
 8001514:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <main+0x330>)
 8001516:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 8001518:	4827      	ldr	r0, [pc, #156]	; (80015b8 <main+0x318>)
 800151a:	f001 fab7 	bl	8002a8c <HAL_ADC_Stop>

		Temp= adc_val2*(3.6/4095)*100;
 800151e:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <main+0x330>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f816 	bl	8000554 <__aeabi_i2d>
 8001528:	a313      	add	r3, pc, #76	; (adr r3, 8001578 <main+0x2d8>)
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	f7ff f87b 	bl	8000628 <__aeabi_dmul>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <main+0x334>)
 8001540:	f7ff f872 	bl	8000628 <__aeabi_dmul>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f7ff fb06 	bl	8000b5c <__aeabi_d2iz>
 8001550:	4603      	mov	r3, r0
 8001552:	4a21      	ldr	r2, [pc, #132]	; (80015d8 <main+0x338>)
 8001554:	6013      	str	r3, [r2, #0]
		Lcd_cursor (&lcd, 3,0);
 8001556:	2200      	movs	r2, #0
 8001558:	2103      	movs	r1, #3
 800155a:	480f      	ldr	r0, [pc, #60]	; (8001598 <main+0x2f8>)
 800155c:	f7ff fda8 	bl	80010b0 <Lcd_cursor>
		Lcd_float(&lcd, Temp);
 8001560:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <main+0x338>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	ee07 3a90 	vmov	s15, r3
 8001568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800156c:	eeb0 0a67 	vmov.f32	s0, s15
 8001570:	4809      	ldr	r0, [pc, #36]	; (8001598 <main+0x2f8>)
 8001572:	f7ff fd61 	bl	8001038 <Lcd_float>
		HAL_ADC_Start(&hadc1);
 8001576:	e748      	b.n	800140a <main+0x16a>
 8001578:	b6683350 	.word	0xb6683350
 800157c:	3f4cce99 	.word	0x3f4cce99
 8001580:	12d77319 	.word	0x12d77319
 8001584:	3fdf41f2 	.word	0x3fdf41f2
 8001588:	40020400 	.word	0x40020400
 800158c:	40020000 	.word	0x40020000
 8001590:	08007fe4 	.word	0x08007fe4
 8001594:	08007ff4 	.word	0x08007ff4
 8001598:	20000250 	.word	0x20000250
 800159c:	40020800 	.word	0x40020800
 80015a0:	08007fd0 	.word	0x08007fd0
 80015a4:	08007fdc 	.word	0x08007fdc
 80015a8:	200000e4 	.word	0x200000e4
 80015ac:	2000012c 	.word	0x2000012c
 80015b0:	20000174 	.word	0x20000174
 80015b4:	200001bc 	.word	0x200001bc
 80015b8:	2000009c 	.word	0x2000009c
 80015bc:	20000268 	.word	0x20000268
 80015c0:	2000026c 	.word	0x2000026c
 80015c4:	40010000 	.word	0x40010000
 80015c8:	20000270 	.word	0x20000270
 80015cc:	20000278 	.word	0x20000278
 80015d0:	20000274 	.word	0x20000274
 80015d4:	40590000 	.word	0x40590000
 80015d8:	2000027c 	.word	0x2000027c

080015dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b094      	sub	sp, #80	; 0x50
 80015e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e2:	f107 0320 	add.w	r3, r7, #32
 80015e6:	2230      	movs	r2, #48	; 0x30
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f004 f960 	bl	80058b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <SystemClock_Config+0xcc>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	4a27      	ldr	r2, [pc, #156]	; (80016a8 <SystemClock_Config+0xcc>)
 800160a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160e:	6413      	str	r3, [r2, #64]	; 0x40
 8001610:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <SystemClock_Config+0xcc>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	4b22      	ldr	r3, [pc, #136]	; (80016ac <SystemClock_Config+0xd0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001628:	4a20      	ldr	r2, [pc, #128]	; (80016ac <SystemClock_Config+0xd0>)
 800162a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <SystemClock_Config+0xd0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800163c:	2302      	movs	r3, #2
 800163e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001640:	2301      	movs	r3, #1
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001644:	2310      	movs	r3, #16
 8001646:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001648:	2302      	movs	r3, #2
 800164a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800164c:	2300      	movs	r3, #0
 800164e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001650:	2308      	movs	r3, #8
 8001652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001654:	2350      	movs	r3, #80	; 0x50
 8001656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001658:	2302      	movs	r3, #2
 800165a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800165c:	2307      	movs	r3, #7
 800165e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001660:	f107 0320 	add.w	r3, r7, #32
 8001664:	4618      	mov	r0, r3
 8001666:	f002 f92d 	bl	80038c4 <HAL_RCC_OscConfig>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001670:	f000 fdd6 	bl	8002220 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001674:	230f      	movs	r3, #15
 8001676:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001678:	2302      	movs	r3, #2
 800167a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800167c:	2390      	movs	r3, #144	; 0x90
 800167e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f002 fb8f 	bl	8003db4 <HAL_RCC_ClockConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800169c:	f000 fdc0 	bl	8002220 <Error_Handler>
  }
}
 80016a0:	bf00      	nop
 80016a2:	3750      	adds	r7, #80	; 0x50
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40007000 	.word	0x40007000

080016b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016b6:	463b      	mov	r3, r7
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016c2:	4b21      	ldr	r3, [pc, #132]	; (8001748 <MX_ADC1_Init+0x98>)
 80016c4:	4a21      	ldr	r2, [pc, #132]	; (800174c <MX_ADC1_Init+0x9c>)
 80016c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016c8:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <MX_ADC1_Init+0x98>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016ce:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <MX_ADC1_Init+0x98>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016d4:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <MX_ADC1_Init+0x98>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016da:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <MX_ADC1_Init+0x98>)
 80016dc:	2200      	movs	r2, #0
 80016de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <MX_ADC1_Init+0x98>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <MX_ADC1_Init+0x98>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <MX_ADC1_Init+0x98>)
 80016f0:	4a17      	ldr	r2, [pc, #92]	; (8001750 <MX_ADC1_Init+0xa0>)
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_ADC1_Init+0x98>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <MX_ADC1_Init+0x98>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_ADC1_Init+0x98>)
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_ADC1_Init+0x98>)
 800170a:	2201      	movs	r2, #1
 800170c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800170e:	480e      	ldr	r0, [pc, #56]	; (8001748 <MX_ADC1_Init+0x98>)
 8001710:	f001 f8c4 	bl	800289c <HAL_ADC_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800171a:	f000 fd81 	bl	8002220 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800171e:	2301      	movs	r3, #1
 8001720:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001722:	2301      	movs	r3, #1
 8001724:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001726:	2307      	movs	r3, #7
 8001728:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800172a:	463b      	mov	r3, r7
 800172c:	4619      	mov	r1, r3
 800172e:	4806      	ldr	r0, [pc, #24]	; (8001748 <MX_ADC1_Init+0x98>)
 8001730:	f001 fba6 	bl	8002e80 <HAL_ADC_ConfigChannel>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800173a:	f000 fd71 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	2000009c 	.word	0x2000009c
 800174c:	40012000 	.word	0x40012000
 8001750:	0f000001 	.word	0x0f000001

08001754 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b096      	sub	sp, #88	; 0x58
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001768:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]
 8001782:	615a      	str	r2, [r3, #20]
 8001784:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	2220      	movs	r2, #32
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f004 f88f 	bl	80058b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001792:	4b3f      	ldr	r3, [pc, #252]	; (8001890 <MX_TIM1_Init+0x13c>)
 8001794:	4a3f      	ldr	r2, [pc, #252]	; (8001894 <MX_TIM1_Init+0x140>)
 8001796:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001798:	4b3d      	ldr	r3, [pc, #244]	; (8001890 <MX_TIM1_Init+0x13c>)
 800179a:	2200      	movs	r2, #0
 800179c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179e:	4b3c      	ldr	r3, [pc, #240]	; (8001890 <MX_TIM1_Init+0x13c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 80017a4:	4b3a      	ldr	r3, [pc, #232]	; (8001890 <MX_TIM1_Init+0x13c>)
 80017a6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80017aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ac:	4b38      	ldr	r3, [pc, #224]	; (8001890 <MX_TIM1_Init+0x13c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017b2:	4b37      	ldr	r3, [pc, #220]	; (8001890 <MX_TIM1_Init+0x13c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b8:	4b35      	ldr	r3, [pc, #212]	; (8001890 <MX_TIM1_Init+0x13c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017be:	4834      	ldr	r0, [pc, #208]	; (8001890 <MX_TIM1_Init+0x13c>)
 80017c0:	f002 fce4 	bl	800418c <HAL_TIM_Base_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80017ca:	f000 fd29 	bl	8002220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017d8:	4619      	mov	r1, r3
 80017da:	482d      	ldr	r0, [pc, #180]	; (8001890 <MX_TIM1_Init+0x13c>)
 80017dc:	f003 fa6c 	bl	8004cb8 <HAL_TIM_ConfigClockSource>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80017e6:	f000 fd1b 	bl	8002220 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017ea:	4829      	ldr	r0, [pc, #164]	; (8001890 <MX_TIM1_Init+0x13c>)
 80017ec:	f002 fd80 	bl	80042f0 <HAL_TIM_PWM_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80017f6:	f000 fd13 	bl	8002220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fa:	2300      	movs	r3, #0
 80017fc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001802:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001806:	4619      	mov	r1, r3
 8001808:	4821      	ldr	r0, [pc, #132]	; (8001890 <MX_TIM1_Init+0x13c>)
 800180a:	f003 ff2f 	bl	800566c <HAL_TIMEx_MasterConfigSynchronization>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001814:	f000 fd04 	bl	8002220 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001818:	2360      	movs	r3, #96	; 0x60
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 800181c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001826:	2300      	movs	r3, #0
 8001828:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183a:	2200      	movs	r2, #0
 800183c:	4619      	mov	r1, r3
 800183e:	4814      	ldr	r0, [pc, #80]	; (8001890 <MX_TIM1_Init+0x13c>)
 8001840:	f003 f978 	bl	8004b34 <HAL_TIM_PWM_ConfigChannel>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800184a:	f000 fce9 	bl	8002220 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001866:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	4619      	mov	r1, r3
 8001870:	4807      	ldr	r0, [pc, #28]	; (8001890 <MX_TIM1_Init+0x13c>)
 8001872:	f003 ff69 	bl	8005748 <HAL_TIMEx_ConfigBreakDeadTime>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800187c:	f000 fcd0 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001880:	4803      	ldr	r0, [pc, #12]	; (8001890 <MX_TIM1_Init+0x13c>)
 8001882:	f000 fddf 	bl	8002444 <HAL_TIM_MspPostInit>

}
 8001886:	bf00      	nop
 8001888:	3758      	adds	r7, #88	; 0x58
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200000e4 	.word	0x200000e4
 8001894:	40010000 	.word	0x40010000

08001898 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189e:	f107 0308 	add.w	r3, r7, #8
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ac:	463b      	mov	r3, r7
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018b4:	4b1d      	ldr	r3, [pc, #116]	; (800192c <MX_TIM2_Init+0x94>)
 80018b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <MX_TIM2_Init+0x94>)
 80018be:	2263      	movs	r2, #99	; 0x63
 80018c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <MX_TIM2_Init+0x94>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 25000;
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <MX_TIM2_Init+0x94>)
 80018ca:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80018ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d0:	4b16      	ldr	r3, [pc, #88]	; (800192c <MX_TIM2_Init+0x94>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <MX_TIM2_Init+0x94>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018dc:	4813      	ldr	r0, [pc, #76]	; (800192c <MX_TIM2_Init+0x94>)
 80018de:	f002 fc55 	bl	800418c <HAL_TIM_Base_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80018e8:	f000 fc9a 	bl	8002220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	4619      	mov	r1, r3
 80018f8:	480c      	ldr	r0, [pc, #48]	; (800192c <MX_TIM2_Init+0x94>)
 80018fa:	f003 f9dd 	bl	8004cb8 <HAL_TIM_ConfigClockSource>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001904:	f000 fc8c 	bl	8002220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001908:	2300      	movs	r3, #0
 800190a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001910:	463b      	mov	r3, r7
 8001912:	4619      	mov	r1, r3
 8001914:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_TIM2_Init+0x94>)
 8001916:	f003 fea9 	bl	800566c <HAL_TIMEx_MasterConfigSynchronization>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001920:	f000 fc7e 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001924:	bf00      	nop
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	2000012c 	.word	0x2000012c

08001930 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001944:	463b      	mov	r3, r7
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800194c:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <MX_TIM3_Init+0x94>)
 800194e:	4a1e      	ldr	r2, [pc, #120]	; (80019c8 <MX_TIM3_Init+0x98>)
 8001950:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8001952:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <MX_TIM3_Init+0x94>)
 8001954:	2263      	movs	r2, #99	; 0x63
 8001956:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001958:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <MX_TIM3_Init+0x94>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25000;
 800195e:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <MX_TIM3_Init+0x94>)
 8001960:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001964:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <MX_TIM3_Init+0x94>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <MX_TIM3_Init+0x94>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001972:	4814      	ldr	r0, [pc, #80]	; (80019c4 <MX_TIM3_Init+0x94>)
 8001974:	f002 fc0a 	bl	800418c <HAL_TIM_Base_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800197e:	f000 fc4f 	bl	8002220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001986:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001988:	f107 0308 	add.w	r3, r7, #8
 800198c:	4619      	mov	r1, r3
 800198e:	480d      	ldr	r0, [pc, #52]	; (80019c4 <MX_TIM3_Init+0x94>)
 8001990:	f003 f992 	bl	8004cb8 <HAL_TIM_ConfigClockSource>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800199a:	f000 fc41 	bl	8002220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019a6:	463b      	mov	r3, r7
 80019a8:	4619      	mov	r1, r3
 80019aa:	4806      	ldr	r0, [pc, #24]	; (80019c4 <MX_TIM3_Init+0x94>)
 80019ac:	f003 fe5e 	bl	800566c <HAL_TIMEx_MasterConfigSynchronization>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80019b6:	f000 fc33 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000174 	.word	0x20000174
 80019c8:	40000400 	.word	0x40000400

080019cc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d2:	f107 0318 	add.w	r3, r7, #24
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e0:	f107 0310 	add.w	r3, r7, #16
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019ea:	463b      	mov	r3, r7
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019f6:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <MX_TIM5_Init+0xd8>)
 80019f8:	4a2b      	ldr	r2, [pc, #172]	; (8001aa8 <MX_TIM5_Init+0xdc>)
 80019fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 80019fc:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <MX_TIM5_Init+0xd8>)
 80019fe:	2263      	movs	r2, #99	; 0x63
 8001a00:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a02:	4b28      	ldr	r3, [pc, #160]	; (8001aa4 <MX_TIM5_Init+0xd8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 25000;
 8001a08:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <MX_TIM5_Init+0xd8>)
 8001a0a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001a0e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a10:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <MX_TIM5_Init+0xd8>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a16:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <MX_TIM5_Init+0xd8>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a1c:	4821      	ldr	r0, [pc, #132]	; (8001aa4 <MX_TIM5_Init+0xd8>)
 8001a1e:	f002 fbb5 	bl	800418c <HAL_TIM_Base_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8001a28:	f000 fbfa 	bl	8002220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a30:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a32:	f107 0318 	add.w	r3, r7, #24
 8001a36:	4619      	mov	r1, r3
 8001a38:	481a      	ldr	r0, [pc, #104]	; (8001aa4 <MX_TIM5_Init+0xd8>)
 8001a3a:	f003 f93d 	bl	8004cb8 <HAL_TIM_ConfigClockSource>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001a44:	f000 fbec 	bl	8002220 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001a48:	4816      	ldr	r0, [pc, #88]	; (8001aa4 <MX_TIM5_Init+0xd8>)
 8001a4a:	f002 fd5b 	bl	8004504 <HAL_TIM_IC_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001a54:	f000 fbe4 	bl	8002220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	4619      	mov	r1, r3
 8001a66:	480f      	ldr	r0, [pc, #60]	; (8001aa4 <MX_TIM5_Init+0xd8>)
 8001a68:	f003 fe00 	bl	800566c <HAL_TIMEx_MasterConfigSynchronization>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8001a72:	f000 fbd5 	bl	8002220 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a76:	2300      	movs	r3, #0
 8001a78:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a86:	463b      	mov	r3, r7
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_TIM5_Init+0xd8>)
 8001a8e:	f002 ffb5 	bl	80049fc <HAL_TIM_IC_ConfigChannel>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8001a98:	f000 fbc2 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	3728      	adds	r7, #40	; 0x28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	200001bc 	.word	0x200001bc
 8001aa8:	40000c00 	.word	0x40000c00

08001aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	4b4c      	ldr	r3, [pc, #304]	; (8001bf8 <MX_GPIO_Init+0x14c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a4b      	ldr	r2, [pc, #300]	; (8001bf8 <MX_GPIO_Init+0x14c>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <MX_GPIO_Init+0x14c>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b45      	ldr	r3, [pc, #276]	; (8001bf8 <MX_GPIO_Init+0x14c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a44      	ldr	r2, [pc, #272]	; (8001bf8 <MX_GPIO_Init+0x14c>)
 8001ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b42      	ldr	r3, [pc, #264]	; (8001bf8 <MX_GPIO_Init+0x14c>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	4b3e      	ldr	r3, [pc, #248]	; (8001bf8 <MX_GPIO_Init+0x14c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a3d      	ldr	r2, [pc, #244]	; (8001bf8 <MX_GPIO_Init+0x14c>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <MX_GPIO_Init+0x14c>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <MX_GPIO_Init+0x14c>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <MX_GPIO_Init+0x14c>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <MX_GPIO_Init+0x14c>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RS_Pin|E_Pin|D4_Pin|D5_Pin
 8001b32:	2200      	movs	r2, #0
 8001b34:	21f6      	movs	r1, #246	; 0xf6
 8001b36:	4831      	ldr	r0, [pc, #196]	; (8001bfc <MX_GPIO_Init+0x150>)
 8001b38:	f001 fe78 	bl	800382c <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led5_Pin|Led6_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2134      	movs	r1, #52	; 0x34
 8001b40:	482f      	ldr	r0, [pc, #188]	; (8001c00 <MX_GPIO_Init+0x154>)
 8001b42:	f001 fe73 	bl	800382c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C1_Pin|C2_Pin|C3_Pin|Led1_Pin
 8001b46:	2200      	movs	r2, #0
 8001b48:	f24f 0107 	movw	r1, #61447	; 0xf007
 8001b4c:	482d      	ldr	r0, [pc, #180]	; (8001c04 <MX_GPIO_Init+0x158>)
 8001b4e:	f001 fe6d 	bl	800382c <HAL_GPIO_WritePin>
                          |Led2_Pin|Led3_Pin|Led4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b58:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	4824      	ldr	r0, [pc, #144]	; (8001bfc <MX_GPIO_Init+0x150>)
 8001b6a:	f001 fcc3 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin E_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = RS_Pin|E_Pin|D4_Pin|D5_Pin
 8001b6e:	23f6      	movs	r3, #246	; 0xf6
 8001b70:	617b      	str	r3, [r7, #20]
                          |D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b72:	2301      	movs	r3, #1
 8001b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	481d      	ldr	r0, [pc, #116]	; (8001bfc <MX_GPIO_Init+0x150>)
 8001b86:	f001 fcb5 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led5_Pin Led6_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Led5_Pin|Led6_Pin|LD2_Pin;
 8001b8a:	2334      	movs	r3, #52	; 0x34
 8001b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4817      	ldr	r0, [pc, #92]	; (8001c00 <MX_GPIO_Init+0x154>)
 8001ba2:	f001 fca7 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin C3_Pin Led1_Pin
                           Led2_Pin Led3_Pin Led4_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin|Led1_Pin
 8001ba6:	f24f 0307 	movw	r3, #61447	; 0xf007
 8001baa:	617b      	str	r3, [r7, #20]
                          |Led2_Pin|Led3_Pin|Led4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bac:	2301      	movs	r3, #1
 8001bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4811      	ldr	r0, [pc, #68]	; (8001c04 <MX_GPIO_Init+0x158>)
 8001bc0:	f001 fc98 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 8001bc4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480a      	ldr	r0, [pc, #40]	; (8001c04 <MX_GPIO_Init+0x158>)
 8001bdc:	f001 fc8a 	bl	80034f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2104      	movs	r1, #4
 8001be4:	2017      	movs	r0, #23
 8001be6:	f001 fc4e 	bl	8003486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001bea:	2017      	movs	r0, #23
 8001bec:	f001 fc67 	bl	80034be <HAL_NVIC_EnableIRQ>

}
 8001bf0:	bf00      	nop
 8001bf2:	3728      	adds	r7, #40	; 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	40020000 	.word	0x40020000
 8001c04:	40020400 	.word	0x40020400

08001c08 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{ currentMillis = HAL_GetTick();
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80fb      	strh	r3, [r7, #6]
 8001c12:	f000 fe13 	bl	800283c <HAL_GetTick>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4aac      	ldr	r2, [pc, #688]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x2c4>)
 8001c1a:	6013      	str	r3, [r2, #0]
if (currentMillis-previousMillis > 10)
 8001c1c:	4bab      	ldr	r3, [pc, #684]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x2c4>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4bab      	ldr	r3, [pc, #684]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b0a      	cmp	r3, #10
 8001c28:	f240 821b 	bls.w	8002062 <HAL_GPIO_EXTI_Callback+0x45a>
{ /*Configure GPIO pins: R1 R2 R3 R4 to GPIO_INPUT*/
	GPIO_InitStructPrivate. Pin = R1_Pin | R2_Pin|R3_Pin|R4_Pin;
 8001c2c:	4ba9      	ldr	r3, [pc, #676]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8001c2e:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8001c32:	601a      	str	r2, [r3, #0]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001c34:	4ba7      	ldr	r3, [pc, #668]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	605a      	str	r2, [r3, #4]
	GPIO_InitStructPrivate. Pull = GPIO_NOPULL;
 8001c3a:	4ba6      	ldr	r3, [pc, #664]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	4ba4      	ldr	r3, [pc, #656]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8001c46:	49a3      	ldr	r1, [pc, #652]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8001c48:	48a3      	ldr	r0, [pc, #652]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001c4a:	f001 fc53 	bl	80034f4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin (GPIOB, C1_Pin, 1);
 8001c4e:	2201      	movs	r2, #1
 8001c50:	2101      	movs	r1, #1
 8001c52:	48a1      	ldr	r0, [pc, #644]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001c54:	f001 fdea 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, C2_Pin, 0);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	489e      	ldr	r0, [pc, #632]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001c5e:	f001 fde5 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, C3_Pin, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2104      	movs	r1, #4
 8001c66:	489c      	ldr	r0, [pc, #624]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001c68:	f001 fde0 	bl	800382c <HAL_GPIO_WritePin>
	if((GPIO_Pin == R1_Pin) && (HAL_GPIO_ReadPin (GPIOB, R1_Pin)))
 8001c6c:	88fb      	ldrh	r3, [r7, #6]
 8001c6e:	2b40      	cmp	r3, #64	; 0x40
 8001c70:	d119      	bne.n	8001ca6 <HAL_GPIO_EXTI_Callback+0x9e>
 8001c72:	2140      	movs	r1, #64	; 0x40
 8001c74:	4898      	ldr	r0, [pc, #608]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001c76:	f001 fdc1 	bl	80037fc <HAL_GPIO_ReadPin>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d012      	beq.n	8001ca6 <HAL_GPIO_EXTI_Callback+0x9e>
	{HAL_GPIO_WritePin (Led1_GPIO_Port,Led1_Pin,0); //D1 on
 8001c80:	2200      	movs	r2, #0
 8001c82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c86:	4894      	ldr	r0, [pc, #592]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001c88:	f001 fdd0 	bl	800382c <HAL_GPIO_WritePin>

	strcpy(text,"1");
 8001c8c:	4b93      	ldr	r3, [pc, #588]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001c8e:	2231      	movs	r2, #49	; 0x31
 8001c90:	801a      	strh	r2, [r3, #0]
	code2[i]='1';
 8001c92:	4b93      	ldr	r3, [pc, #588]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a93      	ldr	r2, [pc, #588]	; (8001ee4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001c98:	2131      	movs	r1, #49	; 0x31
 8001c9a:	54d1      	strb	r1, [r2, r3]
	i++;
 8001c9c:	4b90      	ldr	r3, [pc, #576]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	4a8f      	ldr	r2, [pc, #572]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001ca4:	6013      	str	r3, [r2, #0]

	}

	if((GPIO_Pin == R2_Pin) && (HAL_GPIO_ReadPin (GPIOB, R2_Pin)))
 8001ca6:	88fb      	ldrh	r3, [r7, #6]
 8001ca8:	2b80      	cmp	r3, #128	; 0x80
 8001caa:	d119      	bne.n	8001ce0 <HAL_GPIO_EXTI_Callback+0xd8>
 8001cac:	2180      	movs	r1, #128	; 0x80
 8001cae:	488a      	ldr	r0, [pc, #552]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001cb0:	f001 fda4 	bl	80037fc <HAL_GPIO_ReadPin>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d012      	beq.n	8001ce0 <HAL_GPIO_EXTI_Callback+0xd8>
	{HAL_GPIO_WritePin (Led2_GPIO_Port,Led2_Pin,1); //D2 off
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cc0:	4885      	ldr	r0, [pc, #532]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001cc2:	f001 fdb3 	bl	800382c <HAL_GPIO_WritePin>

	strcpy(text,"4");
 8001cc6:	4b85      	ldr	r3, [pc, #532]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001cc8:	2234      	movs	r2, #52	; 0x34
 8001cca:	801a      	strh	r2, [r3, #0]
	code2[i]='4';
 8001ccc:	4b84      	ldr	r3, [pc, #528]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a84      	ldr	r2, [pc, #528]	; (8001ee4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001cd2:	2134      	movs	r1, #52	; 0x34
 8001cd4:	54d1      	strb	r1, [r2, r3]
	i++;
 8001cd6:	4b82      	ldr	r3, [pc, #520]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	4a80      	ldr	r2, [pc, #512]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001cde:	6013      	str	r3, [r2, #0]

	}

	if((GPIO_Pin == R3_Pin) && (HAL_GPIO_ReadPin (GPIOB, R3_Pin)))
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ce6:	d11a      	bne.n	8001d1e <HAL_GPIO_EXTI_Callback+0x116>
 8001ce8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cec:	487a      	ldr	r0, [pc, #488]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001cee:	f001 fd85 	bl	80037fc <HAL_GPIO_ReadPin>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d012      	beq.n	8001d1e <HAL_GPIO_EXTI_Callback+0x116>
	{HAL_GPIO_WritePin (Led4_GPIO_Port,Led4_Pin,0); //D4 on
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cfe:	4876      	ldr	r0, [pc, #472]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001d00:	f001 fd94 	bl	800382c <HAL_GPIO_WritePin>

	strcpy(text,"7");
 8001d04:	4b75      	ldr	r3, [pc, #468]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001d06:	2237      	movs	r2, #55	; 0x37
 8001d08:	801a      	strh	r2, [r3, #0]
	code2[i]='7';
 8001d0a:	4b75      	ldr	r3, [pc, #468]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a75      	ldr	r2, [pc, #468]	; (8001ee4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001d10:	2137      	movs	r1, #55	; 0x37
 8001d12:	54d1      	strb	r1, [r2, r3]
	i++;
 8001d14:	4b72      	ldr	r3, [pc, #456]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	4a71      	ldr	r2, [pc, #452]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001d1c:	6013      	str	r3, [r2, #0]

	}

	if((GPIO_Pin == R4_Pin) && (HAL_GPIO_ReadPin (GPIOB, R4_Pin)))
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d24:	d116      	bne.n	8001d54 <HAL_GPIO_EXTI_Callback+0x14c>
 8001d26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d2a:	486b      	ldr	r0, [pc, #428]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001d2c:	f001 fd66 	bl	80037fc <HAL_GPIO_ReadPin>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00e      	beq.n	8001d54 <HAL_GPIO_EXTI_Callback+0x14c>
	{HAL_GPIO_TogglePin(Led1_GPIO_Port, Led1_Pin); //D1 change
 8001d36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d3a:	4867      	ldr	r0, [pc, #412]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001d3c:	f001 fd8f 	bl	800385e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Led2_GPIO_Port, Led2_Pin);	//D2 change
 8001d40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d44:	4864      	ldr	r0, [pc, #400]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001d46:	f001 fd8a 	bl	800385e <HAL_GPIO_TogglePin>
	i++;
 8001d4a:	4b65      	ldr	r3, [pc, #404]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	4a63      	ldr	r2, [pc, #396]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001d52:	6013      	str	r3, [r2, #0]

	}
	HAL_GPIO_WritePin (GPIOB, C1_Pin, 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2101      	movs	r1, #1
 8001d58:	485f      	ldr	r0, [pc, #380]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001d5a:	f001 fd67 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, C2_Pin, 1);
 8001d5e:	2201      	movs	r2, #1
 8001d60:	2102      	movs	r1, #2
 8001d62:	485d      	ldr	r0, [pc, #372]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001d64:	f001 fd62 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, C3_Pin, 0);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2104      	movs	r1, #4
 8001d6c:	485a      	ldr	r0, [pc, #360]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001d6e:	f001 fd5d 	bl	800382c <HAL_GPIO_WritePin>
	if((GPIO_Pin == R1_Pin) && (HAL_GPIO_ReadPin(GPIOB, R1_Pin)))
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	2b40      	cmp	r3, #64	; 0x40
 8001d76:	d119      	bne.n	8001dac <HAL_GPIO_EXTI_Callback+0x1a4>
 8001d78:	2140      	movs	r1, #64	; 0x40
 8001d7a:	4857      	ldr	r0, [pc, #348]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001d7c:	f001 fd3e 	bl	80037fc <HAL_GPIO_ReadPin>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d012      	beq.n	8001dac <HAL_GPIO_EXTI_Callback+0x1a4>
	{HAL_GPIO_WritePin (Led1_GPIO_Port,Led1_Pin, 1); //D1 off
 8001d86:	2201      	movs	r2, #1
 8001d88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d8c:	4852      	ldr	r0, [pc, #328]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001d8e:	f001 fd4d 	bl	800382c <HAL_GPIO_WritePin>

	strcpy(text,"2");
 8001d92:	4b52      	ldr	r3, [pc, #328]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001d94:	2232      	movs	r2, #50	; 0x32
 8001d96:	801a      	strh	r2, [r3, #0]
	code2[i]='2';
 8001d98:	4b51      	ldr	r3, [pc, #324]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a51      	ldr	r2, [pc, #324]	; (8001ee4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001d9e:	2132      	movs	r1, #50	; 0x32
 8001da0:	54d1      	strb	r1, [r2, r3]
	i++;
 8001da2:	4b4f      	ldr	r3, [pc, #316]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	3301      	adds	r3, #1
 8001da8:	4a4d      	ldr	r2, [pc, #308]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001daa:	6013      	str	r3, [r2, #0]

	}
	if((GPIO_Pin == R2_Pin) && (HAL_GPIO_ReadPin (GPIOB, R2_Pin)))
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	2b80      	cmp	r3, #128	; 0x80
 8001db0:	d119      	bne.n	8001de6 <HAL_GPIO_EXTI_Callback+0x1de>
 8001db2:	2180      	movs	r1, #128	; 0x80
 8001db4:	4848      	ldr	r0, [pc, #288]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001db6:	f001 fd21 	bl	80037fc <HAL_GPIO_ReadPin>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d012      	beq.n	8001de6 <HAL_GPIO_EXTI_Callback+0x1de>
	{HAL_GPIO_WritePin (Led3_GPIO_Port,Led3_Pin,0); //D3 on
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dc6:	4844      	ldr	r0, [pc, #272]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001dc8:	f001 fd30 	bl	800382c <HAL_GPIO_WritePin>

	strcpy(text,"5");
 8001dcc:	4b43      	ldr	r3, [pc, #268]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001dce:	2235      	movs	r2, #53	; 0x35
 8001dd0:	801a      	strh	r2, [r3, #0]
	code2[i]='5';
 8001dd2:	4b43      	ldr	r3, [pc, #268]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a43      	ldr	r2, [pc, #268]	; (8001ee4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001dd8:	2135      	movs	r1, #53	; 0x35
 8001dda:	54d1      	strb	r1, [r2, r3]
	i++;
 8001ddc:	4b40      	ldr	r3, [pc, #256]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	3301      	adds	r3, #1
 8001de2:	4a3f      	ldr	r2, [pc, #252]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001de4:	6013      	str	r3, [r2, #0]

	}

	if((GPIO_Pin == R3_Pin) && (HAL_GPIO_ReadPin (GPIOB, R3_Pin)))
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dec:	d11a      	bne.n	8001e24 <HAL_GPIO_EXTI_Callback+0x21c>
 8001dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001df2:	4839      	ldr	r0, [pc, #228]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001df4:	f001 fd02 	bl	80037fc <HAL_GPIO_ReadPin>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d012      	beq.n	8001e24 <HAL_GPIO_EXTI_Callback+0x21c>
	{HAL_GPIO_WritePin (Led4_GPIO_Port,Led4_Pin,1); //D4 off
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e04:	4834      	ldr	r0, [pc, #208]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001e06:	f001 fd11 	bl	800382c <HAL_GPIO_WritePin>

	strcpy(text,"8");
 8001e0a:	4b34      	ldr	r3, [pc, #208]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001e0c:	2238      	movs	r2, #56	; 0x38
 8001e0e:	801a      	strh	r2, [r3, #0]
	code2[i]='8';
 8001e10:	4b33      	ldr	r3, [pc, #204]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a33      	ldr	r2, [pc, #204]	; (8001ee4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001e16:	2138      	movs	r1, #56	; 0x38
 8001e18:	54d1      	strb	r1, [r2, r3]
	i++;
 8001e1a:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	4a2f      	ldr	r2, [pc, #188]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001e22:	6013      	str	r3, [r2, #0]

	}

	if((GPIO_Pin == R4_Pin) && (HAL_GPIO_ReadPin (GPIOB, R4_Pin)))
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e2a:	d12c      	bne.n	8001e86 <HAL_GPIO_EXTI_Callback+0x27e>
 8001e2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e30:	4829      	ldr	r0, [pc, #164]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001e32:	f001 fce3 	bl	80037fc <HAL_GPIO_ReadPin>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d024      	beq.n	8001e86 <HAL_GPIO_EXTI_Callback+0x27e>
	{
		HAL_GPIO_WritePin (Led1_GPIO_Port,Led1_Pin,0); // D1 on
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e42:	4825      	ldr	r0, [pc, #148]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001e44:	f001 fcf2 	bl	800382c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (Led2_GPIO_Port,Led2_Pin,0); // D2 on
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e4e:	4822      	ldr	r0, [pc, #136]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001e50:	f001 fcec 	bl	800382c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (Led3_GPIO_Port,Led3_Pin,0); // D3 on
 8001e54:	2200      	movs	r2, #0
 8001e56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e5a:	481f      	ldr	r0, [pc, #124]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001e5c:	f001 fce6 	bl	800382c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (Led4_GPIO_Port,Led4_Pin,0); // D4 on
 8001e60:	2200      	movs	r2, #0
 8001e62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e66:	481c      	ldr	r0, [pc, #112]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001e68:	f001 fce0 	bl	800382c <HAL_GPIO_WritePin>

		strcpy(text,"0");
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001e6e:	2230      	movs	r2, #48	; 0x30
 8001e70:	801a      	strh	r2, [r3, #0]
		code2[i]='0';
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1b      	ldr	r2, [pc, #108]	; (8001ee4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001e78:	2130      	movs	r1, #48	; 0x30
 8001e7a:	54d1      	strb	r1, [r2, r3]
		i++;
 8001e7c:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	3301      	adds	r3, #1
 8001e82:	4a17      	ldr	r2, [pc, #92]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001e84:	6013      	str	r3, [r2, #0]

	}

	HAL_GPIO_WritePin (GPIOB, C1_Pin, 0);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2101      	movs	r1, #1
 8001e8a:	4813      	ldr	r0, [pc, #76]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001e8c:	f001 fcce 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, C2_Pin, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2102      	movs	r1, #2
 8001e94:	4810      	ldr	r0, [pc, #64]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001e96:	f001 fcc9 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, C3_Pin, 1);
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	2104      	movs	r1, #4
 8001e9e:	480e      	ldr	r0, [pc, #56]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001ea0:	f001 fcc4 	bl	800382c <HAL_GPIO_WritePin>
	if((GPIO_Pin == R1_Pin) && (HAL_GPIO_ReadPin(GPIOB, R1_Pin)))
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	2b40      	cmp	r3, #64	; 0x40
 8001ea8:	d128      	bne.n	8001efc <HAL_GPIO_EXTI_Callback+0x2f4>
 8001eaa:	2140      	movs	r1, #64	; 0x40
 8001eac:	480a      	ldr	r0, [pc, #40]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001eae:	f001 fca5 	bl	80037fc <HAL_GPIO_ReadPin>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d021      	beq.n	8001efc <HAL_GPIO_EXTI_Callback+0x2f4>
	{HAL_GPIO_WritePin (Led2_GPIO_Port,Led2_Pin, 0); //D2 on
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ebe:	4806      	ldr	r0, [pc, #24]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001ec0:	f001 fcb4 	bl	800382c <HAL_GPIO_WritePin>

	strcpy(text,"3");
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001ec6:	2233      	movs	r2, #51	; 0x33
 8001ec8:	801a      	strh	r2, [r3, #0]
 8001eca:	e00d      	b.n	8001ee8 <HAL_GPIO_EXTI_Callback+0x2e0>
 8001ecc:	2000021c 	.word	0x2000021c
 8001ed0:	20000218 	.word	0x20000218
 8001ed4:	20000204 	.word	0x20000204
 8001ed8:	40020400 	.word	0x40020400
 8001edc:	20000220 	.word	0x20000220
 8001ee0:	20000224 	.word	0x20000224
 8001ee4:	20000008 	.word	0x20000008
	code2[i]='3';
 8001ee8:	4b60      	ldr	r3, [pc, #384]	; (800206c <HAL_GPIO_EXTI_Callback+0x464>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a60      	ldr	r2, [pc, #384]	; (8002070 <HAL_GPIO_EXTI_Callback+0x468>)
 8001eee:	2133      	movs	r1, #51	; 0x33
 8001ef0:	54d1      	strb	r1, [r2, r3]
	i++;
 8001ef2:	4b5e      	ldr	r3, [pc, #376]	; (800206c <HAL_GPIO_EXTI_Callback+0x464>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	4a5c      	ldr	r2, [pc, #368]	; (800206c <HAL_GPIO_EXTI_Callback+0x464>)
 8001efa:	6013      	str	r3, [r2, #0]

	}
	if((GPIO_Pin == R2_Pin) && (HAL_GPIO_ReadPin (GPIOB, R2_Pin)))
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	2b80      	cmp	r3, #128	; 0x80
 8001f00:	d119      	bne.n	8001f36 <HAL_GPIO_EXTI_Callback+0x32e>
 8001f02:	2180      	movs	r1, #128	; 0x80
 8001f04:	485b      	ldr	r0, [pc, #364]	; (8002074 <HAL_GPIO_EXTI_Callback+0x46c>)
 8001f06:	f001 fc79 	bl	80037fc <HAL_GPIO_ReadPin>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d012      	beq.n	8001f36 <HAL_GPIO_EXTI_Callback+0x32e>
	{HAL_GPIO_WritePin (Led3_GPIO_Port,Led3_Pin,1); //D3 off
 8001f10:	2201      	movs	r2, #1
 8001f12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f16:	4857      	ldr	r0, [pc, #348]	; (8002074 <HAL_GPIO_EXTI_Callback+0x46c>)
 8001f18:	f001 fc88 	bl	800382c <HAL_GPIO_WritePin>
	strcpy(text,"6");
 8001f1c:	4b56      	ldr	r3, [pc, #344]	; (8002078 <HAL_GPIO_EXTI_Callback+0x470>)
 8001f1e:	2236      	movs	r2, #54	; 0x36
 8001f20:	801a      	strh	r2, [r3, #0]
	code2[i]='6';
 8001f22:	4b52      	ldr	r3, [pc, #328]	; (800206c <HAL_GPIO_EXTI_Callback+0x464>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a52      	ldr	r2, [pc, #328]	; (8002070 <HAL_GPIO_EXTI_Callback+0x468>)
 8001f28:	2136      	movs	r1, #54	; 0x36
 8001f2a:	54d1      	strb	r1, [r2, r3]
	i++;
 8001f2c:	4b4f      	ldr	r3, [pc, #316]	; (800206c <HAL_GPIO_EXTI_Callback+0x464>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	3301      	adds	r3, #1
 8001f32:	4a4e      	ldr	r2, [pc, #312]	; (800206c <HAL_GPIO_EXTI_Callback+0x464>)
 8001f34:	6013      	str	r3, [r2, #0]

	}

	if((GPIO_Pin == R3_Pin) && (HAL_GPIO_ReadPin (GPIOB, R3_Pin)))
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f3c:	d12c      	bne.n	8001f98 <HAL_GPIO_EXTI_Callback+0x390>
 8001f3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f42:	484c      	ldr	r0, [pc, #304]	; (8002074 <HAL_GPIO_EXTI_Callback+0x46c>)
 8001f44:	f001 fc5a 	bl	80037fc <HAL_GPIO_ReadPin>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d024      	beq.n	8001f98 <HAL_GPIO_EXTI_Callback+0x390>
	{
		HAL_GPIO_WritePin (Led1_GPIO_Port,Led1_Pin,1); // D1 off
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f54:	4847      	ldr	r0, [pc, #284]	; (8002074 <HAL_GPIO_EXTI_Callback+0x46c>)
 8001f56:	f001 fc69 	bl	800382c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (Led2_GPIO_Port,Led2_Pin,1); // D2 off
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f60:	4844      	ldr	r0, [pc, #272]	; (8002074 <HAL_GPIO_EXTI_Callback+0x46c>)
 8001f62:	f001 fc63 	bl	800382c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (Led3_GPIO_Port,Led3_Pin,1); // D3 off
 8001f66:	2201      	movs	r2, #1
 8001f68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f6c:	4841      	ldr	r0, [pc, #260]	; (8002074 <HAL_GPIO_EXTI_Callback+0x46c>)
 8001f6e:	f001 fc5d 	bl	800382c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (Led4_GPIO_Port,Led4_Pin,1); // D4 off
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f78:	483e      	ldr	r0, [pc, #248]	; (8002074 <HAL_GPIO_EXTI_Callback+0x46c>)
 8001f7a:	f001 fc57 	bl	800382c <HAL_GPIO_WritePin>

		strcpy(text,"9");
 8001f7e:	4b3e      	ldr	r3, [pc, #248]	; (8002078 <HAL_GPIO_EXTI_Callback+0x470>)
 8001f80:	2239      	movs	r2, #57	; 0x39
 8001f82:	801a      	strh	r2, [r3, #0]
		code2[i]='9';
 8001f84:	4b39      	ldr	r3, [pc, #228]	; (800206c <HAL_GPIO_EXTI_Callback+0x464>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a39      	ldr	r2, [pc, #228]	; (8002070 <HAL_GPIO_EXTI_Callback+0x468>)
 8001f8a:	2139      	movs	r1, #57	; 0x39
 8001f8c:	54d1      	strb	r1, [r2, r3]
		i++;
 8001f8e:	4b37      	ldr	r3, [pc, #220]	; (800206c <HAL_GPIO_EXTI_Callback+0x464>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	3301      	adds	r3, #1
 8001f94:	4a35      	ldr	r2, [pc, #212]	; (800206c <HAL_GPIO_EXTI_Callback+0x464>)
 8001f96:	6013      	str	r3, [r2, #0]

	}
	if((GPIO_Pin == R4_Pin) && (HAL_GPIO_ReadPin (GPIOB, R4_Pin)))
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f9e:	d12d      	bne.n	8001ffc <HAL_GPIO_EXTI_Callback+0x3f4>
 8001fa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fa4:	4833      	ldr	r0, [pc, #204]	; (8002074 <HAL_GPIO_EXTI_Callback+0x46c>)
 8001fa6:	f001 fc29 	bl	80037fc <HAL_GPIO_ReadPin>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d025      	beq.n	8001ffc <HAL_GPIO_EXTI_Callback+0x3f4>
	{HAL_GPIO_TogglePin(Led3_GPIO_Port, Led3_Pin); //D3 change
 8001fb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fb4:	482f      	ldr	r0, [pc, #188]	; (8002074 <HAL_GPIO_EXTI_Callback+0x46c>)
 8001fb6:	f001 fc52 	bl	800385e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Led4_GPIO_Port, Led4_Pin);	//D4 change
 8001fba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fbe:	482d      	ldr	r0, [pc, #180]	; (8002074 <HAL_GPIO_EXTI_Callback+0x46c>)
 8001fc0:	f001 fc4d 	bl	800385e <HAL_GPIO_TogglePin>
	if(strcmp(code1,code2)==0)
 8001fc4:	492a      	ldr	r1, [pc, #168]	; (8002070 <HAL_GPIO_EXTI_Callback+0x468>)
 8001fc6:	482d      	ldr	r0, [pc, #180]	; (800207c <HAL_GPIO_EXTI_Callback+0x474>)
 8001fc8:	f7fe f90a 	bl	80001e0 <strcmp>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d111      	bne.n	8001ff6 <HAL_GPIO_EXTI_Callback+0x3ee>
	{
		HAL_GPIO_WritePin(GPIOA,Led5_Pin,0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2104      	movs	r1, #4
 8001fd6:	482a      	ldr	r0, [pc, #168]	; (8002080 <HAL_GPIO_EXTI_Callback+0x478>)
 8001fd8:	f001 fc28 	bl	800382c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001fdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fe0:	f000 fc38 	bl	8002854 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA,Led5_Pin,1);
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	2104      	movs	r1, #4
 8001fe8:	4825      	ldr	r0, [pc, #148]	; (8002080 <HAL_GPIO_EXTI_Callback+0x478>)
 8001fea:	f001 fc1f 	bl	800382c <HAL_GPIO_WritePin>
		a1=1;
 8001fee:	4b25      	ldr	r3, [pc, #148]	; (8002084 <HAL_GPIO_EXTI_Callback+0x47c>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	e002      	b.n	8001ffc <HAL_GPIO_EXTI_Callback+0x3f4>
	}
	else{
		a2=1;
 8001ff6:	4b24      	ldr	r3, [pc, #144]	; (8002088 <HAL_GPIO_EXTI_Callback+0x480>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]
	}

	}

	HAL_GPIO_WritePin(GPIOB,C1_Pin, 1);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	2101      	movs	r1, #1
 8002000:	481c      	ldr	r0, [pc, #112]	; (8002074 <HAL_GPIO_EXTI_Callback+0x46c>)
 8002002:	f001 fc13 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C2_Pin, 1);
 8002006:	2201      	movs	r2, #1
 8002008:	2102      	movs	r1, #2
 800200a:	481a      	ldr	r0, [pc, #104]	; (8002074 <HAL_GPIO_EXTI_Callback+0x46c>)
 800200c:	f001 fc0e 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C3_Pin, 1);
 8002010:	2201      	movs	r2, #1
 8002012:	2104      	movs	r1, #4
 8002014:	4817      	ldr	r0, [pc, #92]	; (8002074 <HAL_GPIO_EXTI_Callback+0x46c>)
 8002016:	f001 fc09 	bl	800382c <HAL_GPIO_WritePin>

	Lcd_cursor (&lcd, 1,i+3);
 800201a:	4b14      	ldr	r3, [pc, #80]	; (800206c <HAL_GPIO_EXTI_Callback+0x464>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	3303      	adds	r3, #3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	2101      	movs	r1, #1
 8002028:	4818      	ldr	r0, [pc, #96]	; (800208c <HAL_GPIO_EXTI_Callback+0x484>)
 800202a:	f7ff f841 	bl	80010b0 <Lcd_cursor>
	Lcd_string(&lcd, text);
 800202e:	4912      	ldr	r1, [pc, #72]	; (8002078 <HAL_GPIO_EXTI_Callback+0x470>)
 8002030:	4816      	ldr	r0, [pc, #88]	; (800208c <HAL_GPIO_EXTI_Callback+0x484>)
 8002032:	f7ff f81e 	bl	8001072 <Lcd_string>

	if (i==4)
 8002036:	4b0d      	ldr	r3, [pc, #52]	; (800206c <HAL_GPIO_EXTI_Callback+0x464>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b04      	cmp	r3, #4
 800203c:	d102      	bne.n	8002044 <HAL_GPIO_EXTI_Callback+0x43c>
	{
		i=0;}
 800203e:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_GPIO_EXTI_Callback+0x464>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

	GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_GPIO_EXTI_Callback+0x488>)
 8002046:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 800204a:	605a      	str	r2, [r3, #4]
	GPIO_InitStructPrivate. Pull = GPIO_PULLDOWN;
 800204c:	4b10      	ldr	r3, [pc, #64]	; (8002090 <HAL_GPIO_EXTI_Callback+0x488>)
 800204e:	2202      	movs	r2, #2
 8002050:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8002052:	490f      	ldr	r1, [pc, #60]	; (8002090 <HAL_GPIO_EXTI_Callback+0x488>)
 8002054:	4807      	ldr	r0, [pc, #28]	; (8002074 <HAL_GPIO_EXTI_Callback+0x46c>)
 8002056:	f001 fa4d 	bl	80034f4 <HAL_GPIO_Init>
	previousMillis = currentMillis;
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <HAL_GPIO_EXTI_Callback+0x48c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a0e      	ldr	r2, [pc, #56]	; (8002098 <HAL_GPIO_EXTI_Callback+0x490>)
 8002060:	6013      	str	r3, [r2, #0]

}

}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000224 	.word	0x20000224
 8002070:	20000008 	.word	0x20000008
 8002074:	40020400 	.word	0x40020400
 8002078:	20000220 	.word	0x20000220
 800207c:	20000000 	.word	0x20000000
 8002080:	40020000 	.word	0x40020000
 8002084:	20000228 	.word	0x20000228
 8002088:	2000022c 	.word	0x2000022c
 800208c:	20000250 	.word	0x20000250
 8002090:	20000204 	.word	0x20000204
 8002094:	2000021c 	.word	0x2000021c
 8002098:	20000218 	.word	0x20000218
 800209c:	00000000 	.word	0x00000000

080020a0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == TIM1) {
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a4e      	ldr	r2, [pc, #312]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d131      	bne.n	8002116 <HAL_TIM_PeriodElapsedCallback+0x76>
		d3++;
 80020b2:	4b4e      	ldr	r3, [pc, #312]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	3301      	adds	r3, #1
 80020b8:	4a4c      	ldr	r2, [pc, #304]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80020ba:	6013      	str	r3, [r2, #0]
		d4++;
 80020bc:	4b4c      	ldr	r3, [pc, #304]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	4a4b      	ldr	r2, [pc, #300]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80020c4:	6013      	str	r3, [r2, #0]
		d5++;
 80020c6:	4b4b      	ldr	r3, [pc, #300]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	3301      	adds	r3, #1
 80020cc:	4a49      	ldr	r2, [pc, #292]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80020ce:	6013      	str	r3, [r2, #0]
		if (d3==2) {
 80020d0:	4b46      	ldr	r3, [pc, #280]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d107      	bne.n	80020e8 <HAL_TIM_PeriodElapsedCallback+0x48>
			HAL_GPIO_TogglePin(Led3_GPIO_Port, Led3_Pin);
 80020d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020dc:	4846      	ldr	r0, [pc, #280]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80020de:	f001 fbbe 	bl	800385e <HAL_GPIO_TogglePin>
			d3=0;
 80020e2:	4b42      	ldr	r3, [pc, #264]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
		}
		if (d4==5) {
 80020e8:	4b41      	ldr	r3, [pc, #260]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b05      	cmp	r3, #5
 80020ee:	d107      	bne.n	8002100 <HAL_TIM_PeriodElapsedCallback+0x60>
			HAL_GPIO_TogglePin(Led4_GPIO_Port, Led4_Pin);
 80020f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020f4:	4840      	ldr	r0, [pc, #256]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80020f6:	f001 fbb2 	bl	800385e <HAL_GPIO_TogglePin>
			d4=0;
 80020fa:	4b3d      	ldr	r3, [pc, #244]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
		}
		if (d5==10) {
 8002100:	4b3c      	ldr	r3, [pc, #240]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b0a      	cmp	r3, #10
 8002106:	d106      	bne.n	8002116 <HAL_TIM_PeriodElapsedCallback+0x76>
			HAL_GPIO_TogglePin(Led5_GPIO_Port, Led5_Pin);
 8002108:	2104      	movs	r1, #4
 800210a:	483c      	ldr	r0, [pc, #240]	; (80021fc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800210c:	f001 fba7 	bl	800385e <HAL_GPIO_TogglePin>
			d5=0;
 8002110:	4b38      	ldr	r3, [pc, #224]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
		}
	}
	if (htim -> Instance == TIM1) {
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a33      	ldr	r2, [pc, #204]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d104      	bne.n	800212a <HAL_TIM_PeriodElapsedCallback+0x8a>
		HAL_GPIO_TogglePin(Led3_GPIO_Port, Led3_Pin);
 8002120:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002124:	4834      	ldr	r0, [pc, #208]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002126:	f001 fb9a 	bl	800385e <HAL_GPIO_TogglePin>
	}
	if (htim -> Instance == TIM2) {
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002132:	d104      	bne.n	800213e <HAL_TIM_PeriodElapsedCallback+0x9e>
		HAL_GPIO_TogglePin(Led4_GPIO_Port, Led4_Pin);
 8002134:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002138:	482f      	ldr	r0, [pc, #188]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800213a:	f001 fb90 	bl	800385e <HAL_GPIO_TogglePin>
	}
	if (htim -> Instance == TIM3) {
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a2f      	ldr	r2, [pc, #188]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d103      	bne.n	8002150 <HAL_TIM_PeriodElapsedCallback+0xb0>
		HAL_GPIO_TogglePin(Led5_GPIO_Port, Led5_Pin);
 8002148:	2104      	movs	r1, #4
 800214a:	482c      	ldr	r0, [pc, #176]	; (80021fc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800214c:	f001 fb87 	bl	800385e <HAL_GPIO_TogglePin>
	}

	I++;
 8002150:	4b2c      	ldr	r3, [pc, #176]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	3301      	adds	r3, #1
 8002156:	4a2b      	ldr	r2, [pc, #172]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002158:	6013      	str	r3, [r2, #0]
	if (I==1) {
 800215a:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d103      	bne.n	800216a <HAL_TIM_PeriodElapsedCallback+0xca>
		C1= TIM5 -> CCR1;
 8002162:	4b29      	ldr	r3, [pc, #164]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002166:	4a29      	ldr	r2, [pc, #164]	; (800220c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002168:	6013      	str	r3, [r2, #0]
	}
	if (I==2) {
 800216a:	4b26      	ldr	r3, [pc, #152]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d12f      	bne.n	80021d2 <HAL_TIM_PeriodElapsedCallback+0x132>
		I=0;
 8002172:	4b24      	ldr	r3, [pc, #144]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
		C2= TIM5 -> CCR1;
 8002178:	4b23      	ldr	r3, [pc, #140]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800217a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217c:	4a24      	ldr	r2, [pc, #144]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800217e:	6013      	str	r3, [r2, #0]
		T=(C2 - C1)*0.4*(10^6);
 8002180:	4b23      	ldr	r3, [pc, #140]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b21      	ldr	r3, [pc, #132]	; (800220c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9d2 	bl	8000534 <__aeabi_ui2d>
 8002190:	a313      	add	r3, pc, #76	; (adr r3, 80021e0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002196:	f7fe fa47 	bl	8000628 <__aeabi_dmul>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80021a8:	f7fe fa3e 	bl	8000628 <__aeabi_dmul>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4610      	mov	r0, r2
 80021b2:	4619      	mov	r1, r3
 80021b4:	f7fe fd1a 	bl	8000bec <__aeabi_d2f>
 80021b8:	4603      	mov	r3, r0
 80021ba:	4a17      	ldr	r2, [pc, #92]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80021bc:	6013      	str	r3, [r2, #0]
		Fr=1/T;
 80021be:	4b16      	ldr	r3, [pc, #88]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80021c0:	ed93 7a00 	vldr	s14, [r3]
 80021c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021cc:	4b13      	ldr	r3, [pc, #76]	; (800221c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80021ce:	edc3 7a00 	vstr	s15, [r3]
	}



}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	f3af 8000 	nop.w
 80021e0:	9999999a 	.word	0x9999999a
 80021e4:	3fd99999 	.word	0x3fd99999
 80021e8:	40010000 	.word	0x40010000
 80021ec:	20000230 	.word	0x20000230
 80021f0:	20000234 	.word	0x20000234
 80021f4:	20000238 	.word	0x20000238
 80021f8:	40020400 	.word	0x40020400
 80021fc:	40020000 	.word	0x40020000
 8002200:	40000400 	.word	0x40000400
 8002204:	20000244 	.word	0x20000244
 8002208:	40000c00 	.word	0x40000c00
 800220c:	20000248 	.word	0x20000248
 8002210:	2000024c 	.word	0x2000024c
 8002214:	40280000 	.word	0x40280000
 8002218:	20000240 	.word	0x20000240
 800221c:	2000023c 	.word	0x2000023c

08002220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002224:	b672      	cpsid	i
}
 8002226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002228:	e7fe      	b.n	8002228 <Error_Handler+0x8>
	...

0800222c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <HAL_MspInit+0x4c>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	4a0f      	ldr	r2, [pc, #60]	; (8002278 <HAL_MspInit+0x4c>)
 800223c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002240:	6453      	str	r3, [r2, #68]	; 0x44
 8002242:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <HAL_MspInit+0x4c>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_MspInit+0x4c>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	4a08      	ldr	r2, [pc, #32]	; (8002278 <HAL_MspInit+0x4c>)
 8002258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225c:	6413      	str	r3, [r2, #64]	; 0x40
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_MspInit+0x4c>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800

0800227c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a1b      	ldr	r2, [pc, #108]	; (8002308 <HAL_ADC_MspInit+0x8c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d12f      	bne.n	80022fe <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	4b1a      	ldr	r3, [pc, #104]	; (800230c <HAL_ADC_MspInit+0x90>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	4a19      	ldr	r2, [pc, #100]	; (800230c <HAL_ADC_MspInit+0x90>)
 80022a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ac:	6453      	str	r3, [r2, #68]	; 0x44
 80022ae:	4b17      	ldr	r3, [pc, #92]	; (800230c <HAL_ADC_MspInit+0x90>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b13      	ldr	r3, [pc, #76]	; (800230c <HAL_ADC_MspInit+0x90>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a12      	ldr	r2, [pc, #72]	; (800230c <HAL_ADC_MspInit+0x90>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <HAL_ADC_MspInit+0x90>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80022d6:	230a      	movs	r3, #10
 80022d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022da:	2303      	movs	r3, #3
 80022dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	4619      	mov	r1, r3
 80022e8:	4809      	ldr	r0, [pc, #36]	; (8002310 <HAL_ADC_MspInit+0x94>)
 80022ea:	f001 f903 	bl	80034f4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2100      	movs	r1, #0
 80022f2:	2012      	movs	r0, #18
 80022f4:	f001 f8c7 	bl	8003486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80022f8:	2012      	movs	r0, #18
 80022fa:	f001 f8e0 	bl	80034be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022fe:	bf00      	nop
 8002300:	3728      	adds	r7, #40	; 0x28
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40012000 	.word	0x40012000
 800230c:	40023800 	.word	0x40023800
 8002310:	40020000 	.word	0x40020000

08002314 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08c      	sub	sp, #48	; 0x30
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a3f      	ldr	r2, [pc, #252]	; (8002430 <HAL_TIM_Base_MspInit+0x11c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d116      	bne.n	8002364 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	4b3e      	ldr	r3, [pc, #248]	; (8002434 <HAL_TIM_Base_MspInit+0x120>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233e:	4a3d      	ldr	r2, [pc, #244]	; (8002434 <HAL_TIM_Base_MspInit+0x120>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6453      	str	r3, [r2, #68]	; 0x44
 8002346:	4b3b      	ldr	r3, [pc, #236]	; (8002434 <HAL_TIM_Base_MspInit+0x120>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	61bb      	str	r3, [r7, #24]
 8002350:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	2019      	movs	r0, #25
 8002358:	f001 f895 	bl	8003486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800235c:	2019      	movs	r0, #25
 800235e:	f001 f8ae 	bl	80034be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002362:	e060      	b.n	8002426 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800236c:	d10e      	bne.n	800238c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	4b30      	ldr	r3, [pc, #192]	; (8002434 <HAL_TIM_Base_MspInit+0x120>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	4a2f      	ldr	r2, [pc, #188]	; (8002434 <HAL_TIM_Base_MspInit+0x120>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6413      	str	r3, [r2, #64]	; 0x40
 800237e:	4b2d      	ldr	r3, [pc, #180]	; (8002434 <HAL_TIM_Base_MspInit+0x120>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	697b      	ldr	r3, [r7, #20]
}
 800238a:	e04c      	b.n	8002426 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a29      	ldr	r2, [pc, #164]	; (8002438 <HAL_TIM_Base_MspInit+0x124>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d10e      	bne.n	80023b4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	4b26      	ldr	r3, [pc, #152]	; (8002434 <HAL_TIM_Base_MspInit+0x120>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	4a25      	ldr	r2, [pc, #148]	; (8002434 <HAL_TIM_Base_MspInit+0x120>)
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	6413      	str	r3, [r2, #64]	; 0x40
 80023a6:	4b23      	ldr	r3, [pc, #140]	; (8002434 <HAL_TIM_Base_MspInit+0x120>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]
}
 80023b2:	e038      	b.n	8002426 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM5)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a20      	ldr	r2, [pc, #128]	; (800243c <HAL_TIM_Base_MspInit+0x128>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d133      	bne.n	8002426 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	4b1c      	ldr	r3, [pc, #112]	; (8002434 <HAL_TIM_Base_MspInit+0x120>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	4a1b      	ldr	r2, [pc, #108]	; (8002434 <HAL_TIM_Base_MspInit+0x120>)
 80023c8:	f043 0308 	orr.w	r3, r3, #8
 80023cc:	6413      	str	r3, [r2, #64]	; 0x40
 80023ce:	4b19      	ldr	r3, [pc, #100]	; (8002434 <HAL_TIM_Base_MspInit+0x120>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	4b15      	ldr	r3, [pc, #84]	; (8002434 <HAL_TIM_Base_MspInit+0x120>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	4a14      	ldr	r2, [pc, #80]	; (8002434 <HAL_TIM_Base_MspInit+0x120>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ea:	4b12      	ldr	r3, [pc, #72]	; (8002434 <HAL_TIM_Base_MspInit+0x120>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023f6:	2301      	movs	r3, #1
 80023f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fa:	2302      	movs	r3, #2
 80023fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002402:	2300      	movs	r3, #0
 8002404:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002406:	2302      	movs	r3, #2
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240a:	f107 031c 	add.w	r3, r7, #28
 800240e:	4619      	mov	r1, r3
 8002410:	480b      	ldr	r0, [pc, #44]	; (8002440 <HAL_TIM_Base_MspInit+0x12c>)
 8002412:	f001 f86f 	bl	80034f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	2100      	movs	r1, #0
 800241a:	2032      	movs	r0, #50	; 0x32
 800241c:	f001 f833 	bl	8003486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002420:	2032      	movs	r0, #50	; 0x32
 8002422:	f001 f84c 	bl	80034be <HAL_NVIC_EnableIRQ>
}
 8002426:	bf00      	nop
 8002428:	3730      	adds	r7, #48	; 0x30
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40010000 	.word	0x40010000
 8002434:	40023800 	.word	0x40023800
 8002438:	40000400 	.word	0x40000400
 800243c:	40000c00 	.word	0x40000c00
 8002440:	40020000 	.word	0x40020000

08002444 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 030c 	add.w	r3, r7, #12
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a12      	ldr	r2, [pc, #72]	; (80024ac <HAL_TIM_MspPostInit+0x68>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d11e      	bne.n	80024a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_TIM_MspPostInit+0x6c>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a10      	ldr	r2, [pc, #64]	; (80024b0 <HAL_TIM_MspPostInit+0x6c>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_TIM_MspPostInit+0x6c>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002486:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	2302      	movs	r3, #2
 800248a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002494:	2301      	movs	r3, #1
 8002496:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002498:	f107 030c 	add.w	r3, r7, #12
 800249c:	4619      	mov	r1, r3
 800249e:	4805      	ldr	r0, [pc, #20]	; (80024b4 <HAL_TIM_MspPostInit+0x70>)
 80024a0:	f001 f828 	bl	80034f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80024a4:	bf00      	nop
 80024a6:	3720      	adds	r7, #32
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40010000 	.word	0x40010000
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40020000 	.word	0x40020000

080024b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024bc:	e7fe      	b.n	80024bc <NMI_Handler+0x4>

080024be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024c2:	e7fe      	b.n	80024c2 <HardFault_Handler+0x4>

080024c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <MemManage_Handler+0x4>

080024ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ce:	e7fe      	b.n	80024ce <BusFault_Handler+0x4>

080024d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d4:	e7fe      	b.n	80024d4 <UsageFault_Handler+0x4>

080024d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002504:	f000 f986 	bl	8002814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}

0800250c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002510:	4802      	ldr	r0, [pc, #8]	; (800251c <ADC_IRQHandler+0x10>)
 8002512:	f000 fb79 	bl	8002c08 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	2000009c 	.word	0x2000009c

08002520 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R1_Pin);
 8002524:	2040      	movs	r0, #64	; 0x40
 8002526:	f001 f9b5 	bl	8003894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R2_Pin);
 800252a:	2080      	movs	r0, #128	; 0x80
 800252c:	f001 f9b2 	bl	8003894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R3_Pin);
 8002530:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002534:	f001 f9ae 	bl	8003894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R4_Pin);
 8002538:	f44f 7000 	mov.w	r0, #512	; 0x200
 800253c:	f001 f9aa 	bl	8003894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}

08002544 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800254a:	f002 f94f 	bl	80047ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200000e4 	.word	0x200000e4

08002558 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800255c:	4802      	ldr	r0, [pc, #8]	; (8002568 <TIM5_IRQHandler+0x10>)
 800255e:	f002 f945 	bl	80047ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	200001bc 	.word	0x200001bc

0800256c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
	return 1;
 8002570:	2301      	movs	r3, #1
}
 8002572:	4618      	mov	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <_kill>:

int _kill(int pid, int sig)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002586:	f003 f969 	bl	800585c <__errno>
 800258a:	4603      	mov	r3, r0
 800258c:	2216      	movs	r2, #22
 800258e:	601a      	str	r2, [r3, #0]
	return -1;
 8002590:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <_exit>:

void _exit (int status)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025a4:	f04f 31ff 	mov.w	r1, #4294967295
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff ffe7 	bl	800257c <_kill>
	while (1) {}		/* Make sure we hang here */
 80025ae:	e7fe      	b.n	80025ae <_exit+0x12>

080025b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	e00a      	b.n	80025d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025c2:	f3af 8000 	nop.w
 80025c6:	4601      	mov	r1, r0
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	60ba      	str	r2, [r7, #8]
 80025ce:	b2ca      	uxtb	r2, r1
 80025d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	3301      	adds	r3, #1
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	429a      	cmp	r2, r3
 80025de:	dbf0      	blt.n	80025c2 <_read+0x12>
	}

return len;
 80025e0:	687b      	ldr	r3, [r7, #4]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b086      	sub	sp, #24
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	e009      	b.n	8002610 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	60ba      	str	r2, [r7, #8]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	3301      	adds	r3, #1
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	429a      	cmp	r2, r3
 8002616:	dbf1      	blt.n	80025fc <_write+0x12>
	}
	return len;
 8002618:	687b      	ldr	r3, [r7, #4]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <_close>:

int _close(int file)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
	return -1;
 800262a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800264a:	605a      	str	r2, [r3, #4]
	return 0;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <_isatty>:

int _isatty(int file)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
	return 1;
 8002662:	2301      	movs	r3, #1
}
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
	return 0;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002694:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <_sbrk+0x5c>)
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <_sbrk+0x60>)
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026a0:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <_sbrk+0x64>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d102      	bne.n	80026ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <_sbrk+0x64>)
 80026aa:	4a12      	ldr	r2, [pc, #72]	; (80026f4 <_sbrk+0x68>)
 80026ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <_sbrk+0x64>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d207      	bcs.n	80026cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026bc:	f003 f8ce 	bl	800585c <__errno>
 80026c0:	4603      	mov	r3, r0
 80026c2:	220c      	movs	r2, #12
 80026c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ca:	e009      	b.n	80026e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026cc:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <_sbrk+0x64>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026d2:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <_sbrk+0x64>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	4a05      	ldr	r2, [pc, #20]	; (80026f0 <_sbrk+0x64>)
 80026dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026de:	68fb      	ldr	r3, [r7, #12]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20018000 	.word	0x20018000
 80026ec:	00000400 	.word	0x00000400
 80026f0:	20000280 	.word	0x20000280
 80026f4:	20000298 	.word	0x20000298

080026f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <SystemInit+0x20>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002702:	4a05      	ldr	r2, [pc, #20]	; (8002718 <SystemInit+0x20>)
 8002704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800271c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002754 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002720:	480d      	ldr	r0, [pc, #52]	; (8002758 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002722:	490e      	ldr	r1, [pc, #56]	; (800275c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002724:	4a0e      	ldr	r2, [pc, #56]	; (8002760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002728:	e002      	b.n	8002730 <LoopCopyDataInit>

0800272a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800272c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800272e:	3304      	adds	r3, #4

08002730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002734:	d3f9      	bcc.n	800272a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002736:	4a0b      	ldr	r2, [pc, #44]	; (8002764 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002738:	4c0b      	ldr	r4, [pc, #44]	; (8002768 <LoopFillZerobss+0x26>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800273c:	e001      	b.n	8002742 <LoopFillZerobss>

0800273e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800273e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002740:	3204      	adds	r2, #4

08002742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002744:	d3fb      	bcc.n	800273e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002746:	f7ff ffd7 	bl	80026f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800274a:	f003 f88d 	bl	8005868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800274e:	f7fe fda7 	bl	80012a0 <main>
  bx  lr    
 8002752:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002754:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800275c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002760:	080082e0 	.word	0x080082e0
  ldr r2, =_sbss
 8002764:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002768:	20000298 	.word	0x20000298

0800276c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800276c:	e7fe      	b.n	800276c <DMA1_Stream0_IRQHandler>
	...

08002770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <HAL_Init+0x40>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0d      	ldr	r2, [pc, #52]	; (80027b0 <HAL_Init+0x40>)
 800277a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800277e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_Init+0x40>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <HAL_Init+0x40>)
 8002786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800278a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800278c:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <HAL_Init+0x40>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a07      	ldr	r2, [pc, #28]	; (80027b0 <HAL_Init+0x40>)
 8002792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002796:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002798:	2003      	movs	r0, #3
 800279a:	f000 fe69 	bl	8003470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800279e:	2002      	movs	r0, #2
 80027a0:	f000 f808 	bl	80027b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027a4:	f7ff fd42 	bl	800222c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023c00 	.word	0x40023c00

080027b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027bc:	4b12      	ldr	r3, [pc, #72]	; (8002808 <HAL_InitTick+0x54>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_InitTick+0x58>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	4619      	mov	r1, r3
 80027c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 fe81 	bl	80034da <HAL_SYSTICK_Config>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e00e      	b.n	8002800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b0f      	cmp	r3, #15
 80027e6:	d80a      	bhi.n	80027fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e8:	2200      	movs	r2, #0
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	f04f 30ff 	mov.w	r0, #4294967295
 80027f0:	f000 fe49 	bl	8003486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027f4:	4a06      	ldr	r2, [pc, #24]	; (8002810 <HAL_InitTick+0x5c>)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	e000      	b.n	8002800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
}
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20000010 	.word	0x20000010
 800280c:	20000018 	.word	0x20000018
 8002810:	20000014 	.word	0x20000014

08002814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <HAL_IncTick+0x20>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_IncTick+0x24>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4413      	add	r3, r2
 8002824:	4a04      	ldr	r2, [pc, #16]	; (8002838 <HAL_IncTick+0x24>)
 8002826:	6013      	str	r3, [r2, #0]
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000018 	.word	0x20000018
 8002838:	20000284 	.word	0x20000284

0800283c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return uwTick;
 8002840:	4b03      	ldr	r3, [pc, #12]	; (8002850 <HAL_GetTick+0x14>)
 8002842:	681b      	ldr	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000284 	.word	0x20000284

08002854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800285c:	f7ff ffee 	bl	800283c <HAL_GetTick>
 8002860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286c:	d005      	beq.n	800287a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800286e:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <HAL_Delay+0x44>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4413      	add	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800287a:	bf00      	nop
 800287c:	f7ff ffde 	bl	800283c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	429a      	cmp	r2, r3
 800288a:	d8f7      	bhi.n	800287c <HAL_Delay+0x28>
  {
  }
}
 800288c:	bf00      	nop
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000018 	.word	0x20000018

0800289c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e033      	b.n	800291a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d109      	bne.n	80028ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff fcde 	bl	800227c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d118      	bne.n	800290c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028e2:	f023 0302 	bic.w	r3, r3, #2
 80028e6:	f043 0202 	orr.w	r2, r3, #2
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 fbe8 	bl	80030c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f023 0303 	bic.w	r3, r3, #3
 8002902:	f043 0201 	orr.w	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	641a      	str	r2, [r3, #64]	; 0x40
 800290a:	e001      	b.n	8002910 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002918:	7bfb      	ldrb	r3, [r7, #15]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_ADC_Start+0x1a>
 800293a:	2302      	movs	r3, #2
 800293c:	e097      	b.n	8002a6e <HAL_ADC_Start+0x14a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b01      	cmp	r3, #1
 8002952:	d018      	beq.n	8002986 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002964:	4b45      	ldr	r3, [pc, #276]	; (8002a7c <HAL_ADC_Start+0x158>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a45      	ldr	r2, [pc, #276]	; (8002a80 <HAL_ADC_Start+0x15c>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	0c9a      	lsrs	r2, r3, #18
 8002970:	4613      	mov	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4413      	add	r3, r2
 8002976:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002978:	e002      	b.n	8002980 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	3b01      	subs	r3, #1
 800297e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f9      	bne.n	800297a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b01      	cmp	r3, #1
 8002992:	d15f      	bne.n	8002a54 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800299c:	f023 0301 	bic.w	r3, r3, #1
 80029a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d007      	beq.n	80029c6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d2:	d106      	bne.n	80029e2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	f023 0206 	bic.w	r2, r3, #6
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	645a      	str	r2, [r3, #68]	; 0x44
 80029e0:	e002      	b.n	80029e8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029f0:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <HAL_ADC_Start+0x160>)
 80029f2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80029fc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 031f 	and.w	r3, r3, #31
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10f      	bne.n	8002a2a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d129      	bne.n	8002a6c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	e020      	b.n	8002a6c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a16      	ldr	r2, [pc, #88]	; (8002a88 <HAL_ADC_Start+0x164>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d11b      	bne.n	8002a6c <HAL_ADC_Start+0x148>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d114      	bne.n	8002a6c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a50:	609a      	str	r2, [r3, #8]
 8002a52:	e00b      	b.n	8002a6c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	f043 0210 	orr.w	r2, r3, #16
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a64:	f043 0201 	orr.w	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	20000010 	.word	0x20000010
 8002a80:	431bde83 	.word	0x431bde83
 8002a84:	40012300 	.word	0x40012300
 8002a88:	40012000 	.word	0x40012000

08002a8c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_ADC_Stop+0x16>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e021      	b.n	8002ae6 <HAL_ADC_Stop+0x5a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0201 	bic.w	r2, r2, #1
 8002ab8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d109      	bne.n	8002adc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	f043 0201 	orr.w	r2, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b0e:	d113      	bne.n	8002b38 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b1e:	d10b      	bne.n	8002b38 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	f043 0220 	orr.w	r2, r3, #32
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e063      	b.n	8002c00 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002b38:	f7ff fe80 	bl	800283c <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b3e:	e021      	b.n	8002b84 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b46:	d01d      	beq.n	8002b84 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d007      	beq.n	8002b5e <HAL_ADC_PollForConversion+0x6c>
 8002b4e:	f7ff fe75 	bl	800283c <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d212      	bcs.n	8002b84 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d00b      	beq.n	8002b84 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	f043 0204 	orr.w	r2, r3, #4
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e03d      	b.n	8002c00 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d1d6      	bne.n	8002b40 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f06f 0212 	mvn.w	r2, #18
 8002b9a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d123      	bne.n	8002bfe <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d11f      	bne.n	8002bfe <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d006      	beq.n	8002bda <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d111      	bne.n	8002bfe <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d105      	bne.n	8002bfe <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f043 0201 	orr.w	r2, r3, #1
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	2300      	movs	r3, #0
 8002c16:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d049      	beq.n	8002cd2 <HAL_ADC_IRQHandler+0xca>
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d046      	beq.n	8002cd2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d105      	bne.n	8002c5c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d12b      	bne.n	8002cc2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d127      	bne.n	8002cc2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d006      	beq.n	8002c8e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d119      	bne.n	8002cc2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0220 	bic.w	r2, r2, #32
 8002c9c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d105      	bne.n	8002cc2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f043 0201 	orr.w	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f8bd 	bl	8002e42 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0212 	mvn.w	r2, #18
 8002cd0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d057      	beq.n	8002d98 <HAL_ADC_IRQHandler+0x190>
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d054      	beq.n	8002d98 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d105      	bne.n	8002d06 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d139      	bne.n	8002d88 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d006      	beq.n	8002d30 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d12b      	bne.n	8002d88 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d124      	bne.n	8002d88 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d11d      	bne.n	8002d88 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d119      	bne.n	8002d88 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d62:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d105      	bne.n	8002d88 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	f043 0201 	orr.w	r2, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fa97 	bl	80032bc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f06f 020c 	mvn.w	r2, #12
 8002d96:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d017      	beq.n	8002dde <HAL_ADC_IRQHandler+0x1d6>
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d014      	beq.n	8002dde <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d10d      	bne.n	8002dde <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f841 	bl	8002e56 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0201 	mvn.w	r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dec:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d015      	beq.n	8002e20 <HAL_ADC_IRQHandler+0x218>
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d012      	beq.n	8002e20 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	f043 0202 	orr.w	r2, r3, #2
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f06f 0220 	mvn.w	r2, #32
 8002e0e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f82a 	bl	8002e6a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f06f 0220 	mvn.w	r2, #32
 8002e1e:	601a      	str	r2, [r3, #0]
  }
}
 8002e20:	bf00      	nop
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
	...

08002e80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x1c>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e105      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x228>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b09      	cmp	r3, #9
 8002eaa:	d925      	bls.n	8002ef8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68d9      	ldr	r1, [r3, #12]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4613      	mov	r3, r2
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3b1e      	subs	r3, #30
 8002ec2:	2207      	movs	r2, #7
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43da      	mvns	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	400a      	ands	r2, r1
 8002ed0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68d9      	ldr	r1, [r3, #12]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4403      	add	r3, r0
 8002eea:	3b1e      	subs	r3, #30
 8002eec:	409a      	lsls	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	e022      	b.n	8002f3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6919      	ldr	r1, [r3, #16]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	461a      	mov	r2, r3
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	2207      	movs	r2, #7
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43da      	mvns	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	400a      	ands	r2, r1
 8002f1a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6919      	ldr	r1, [r3, #16]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	4603      	mov	r3, r0
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4403      	add	r3, r0
 8002f34:	409a      	lsls	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b06      	cmp	r3, #6
 8002f44:	d824      	bhi.n	8002f90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	3b05      	subs	r3, #5
 8002f58:	221f      	movs	r2, #31
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	400a      	ands	r2, r1
 8002f66:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	4618      	mov	r0, r3
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	3b05      	subs	r3, #5
 8002f82:	fa00 f203 	lsl.w	r2, r0, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f8e:	e04c      	b.n	800302a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b0c      	cmp	r3, #12
 8002f96:	d824      	bhi.n	8002fe2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3b23      	subs	r3, #35	; 0x23
 8002faa:	221f      	movs	r2, #31
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43da      	mvns	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	400a      	ands	r2, r1
 8002fb8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3b23      	subs	r3, #35	; 0x23
 8002fd4:	fa00 f203 	lsl.w	r2, r0, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
 8002fe0:	e023      	b.n	800302a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3b41      	subs	r3, #65	; 0x41
 8002ff4:	221f      	movs	r2, #31
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	400a      	ands	r2, r1
 8003002:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	4618      	mov	r0, r3
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	3b41      	subs	r3, #65	; 0x41
 800301e:	fa00 f203 	lsl.w	r2, r0, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800302a:	4b22      	ldr	r3, [pc, #136]	; (80030b4 <HAL_ADC_ConfigChannel+0x234>)
 800302c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a21      	ldr	r2, [pc, #132]	; (80030b8 <HAL_ADC_ConfigChannel+0x238>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d109      	bne.n	800304c <HAL_ADC_ConfigChannel+0x1cc>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b12      	cmp	r3, #18
 800303e:	d105      	bne.n	800304c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a19      	ldr	r2, [pc, #100]	; (80030b8 <HAL_ADC_ConfigChannel+0x238>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d123      	bne.n	800309e <HAL_ADC_ConfigChannel+0x21e>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b10      	cmp	r3, #16
 800305c:	d003      	beq.n	8003066 <HAL_ADC_ConfigChannel+0x1e6>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b11      	cmp	r3, #17
 8003064:	d11b      	bne.n	800309e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b10      	cmp	r3, #16
 8003078:	d111      	bne.n	800309e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <HAL_ADC_ConfigChannel+0x23c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a10      	ldr	r2, [pc, #64]	; (80030c0 <HAL_ADC_ConfigChannel+0x240>)
 8003080:	fba2 2303 	umull	r2, r3, r2, r3
 8003084:	0c9a      	lsrs	r2, r3, #18
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003090:	e002      	b.n	8003098 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	3b01      	subs	r3, #1
 8003096:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f9      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	40012300 	.word	0x40012300
 80030b8:	40012000 	.word	0x40012000
 80030bc:	20000010 	.word	0x20000010
 80030c0:	431bde83 	.word	0x431bde83

080030c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030cc:	4b79      	ldr	r3, [pc, #484]	; (80032b4 <ADC_Init+0x1f0>)
 80030ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	431a      	orrs	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	021a      	lsls	r2, r3, #8
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800311c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800313e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6899      	ldr	r1, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003156:	4a58      	ldr	r2, [pc, #352]	; (80032b8 <ADC_Init+0x1f4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d022      	beq.n	80031a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800316a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6899      	ldr	r1, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800318c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6899      	ldr	r1, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	609a      	str	r2, [r3, #8]
 80031a0:	e00f      	b.n	80031c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0202 	bic.w	r2, r2, #2
 80031d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6899      	ldr	r1, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	7e1b      	ldrb	r3, [r3, #24]
 80031dc:	005a      	lsls	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d01b      	beq.n	8003228 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800320e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6859      	ldr	r1, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	3b01      	subs	r3, #1
 800321c:	035a      	lsls	r2, r3, #13
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	e007      	b.n	8003238 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003236:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003246:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	3b01      	subs	r3, #1
 8003254:	051a      	lsls	r2, r3, #20
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800326c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6899      	ldr	r1, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800327a:	025a      	lsls	r2, r3, #9
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003292:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6899      	ldr	r1, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	029a      	lsls	r2, r3, #10
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	609a      	str	r2, [r3, #8]
}
 80032a8:	bf00      	nop
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	40012300 	.word	0x40012300
 80032b8:	0f000001 	.word	0x0f000001

080032bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032e0:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <__NVIC_SetPriorityGrouping+0x44>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032ec:	4013      	ands	r3, r2
 80032ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003302:	4a04      	ldr	r2, [pc, #16]	; (8003314 <__NVIC_SetPriorityGrouping+0x44>)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	60d3      	str	r3, [r2, #12]
}
 8003308:	bf00      	nop
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000ed00 	.word	0xe000ed00

08003318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800331c:	4b04      	ldr	r3, [pc, #16]	; (8003330 <__NVIC_GetPriorityGrouping+0x18>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	0a1b      	lsrs	r3, r3, #8
 8003322:	f003 0307 	and.w	r3, r3, #7
}
 8003326:	4618      	mov	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003342:	2b00      	cmp	r3, #0
 8003344:	db0b      	blt.n	800335e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	f003 021f 	and.w	r2, r3, #31
 800334c:	4907      	ldr	r1, [pc, #28]	; (800336c <__NVIC_EnableIRQ+0x38>)
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	2001      	movs	r0, #1
 8003356:	fa00 f202 	lsl.w	r2, r0, r2
 800335a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	e000e100 	.word	0xe000e100

08003370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	6039      	str	r1, [r7, #0]
 800337a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800337c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003380:	2b00      	cmp	r3, #0
 8003382:	db0a      	blt.n	800339a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	b2da      	uxtb	r2, r3
 8003388:	490c      	ldr	r1, [pc, #48]	; (80033bc <__NVIC_SetPriority+0x4c>)
 800338a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338e:	0112      	lsls	r2, r2, #4
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	440b      	add	r3, r1
 8003394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003398:	e00a      	b.n	80033b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	b2da      	uxtb	r2, r3
 800339e:	4908      	ldr	r1, [pc, #32]	; (80033c0 <__NVIC_SetPriority+0x50>)
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	3b04      	subs	r3, #4
 80033a8:	0112      	lsls	r2, r2, #4
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	440b      	add	r3, r1
 80033ae:	761a      	strb	r2, [r3, #24]
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	e000e100 	.word	0xe000e100
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b089      	sub	sp, #36	; 0x24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f1c3 0307 	rsb	r3, r3, #7
 80033de:	2b04      	cmp	r3, #4
 80033e0:	bf28      	it	cs
 80033e2:	2304      	movcs	r3, #4
 80033e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	3304      	adds	r3, #4
 80033ea:	2b06      	cmp	r3, #6
 80033ec:	d902      	bls.n	80033f4 <NVIC_EncodePriority+0x30>
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3b03      	subs	r3, #3
 80033f2:	e000      	b.n	80033f6 <NVIC_EncodePriority+0x32>
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f8:	f04f 32ff 	mov.w	r2, #4294967295
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43da      	mvns	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	401a      	ands	r2, r3
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800340c:	f04f 31ff 	mov.w	r1, #4294967295
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	fa01 f303 	lsl.w	r3, r1, r3
 8003416:	43d9      	mvns	r1, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800341c:	4313      	orrs	r3, r2
         );
}
 800341e:	4618      	mov	r0, r3
 8003420:	3724      	adds	r7, #36	; 0x24
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3b01      	subs	r3, #1
 8003438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800343c:	d301      	bcc.n	8003442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800343e:	2301      	movs	r3, #1
 8003440:	e00f      	b.n	8003462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003442:	4a0a      	ldr	r2, [pc, #40]	; (800346c <SysTick_Config+0x40>)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3b01      	subs	r3, #1
 8003448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800344a:	210f      	movs	r1, #15
 800344c:	f04f 30ff 	mov.w	r0, #4294967295
 8003450:	f7ff ff8e 	bl	8003370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <SysTick_Config+0x40>)
 8003456:	2200      	movs	r2, #0
 8003458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800345a:	4b04      	ldr	r3, [pc, #16]	; (800346c <SysTick_Config+0x40>)
 800345c:	2207      	movs	r2, #7
 800345e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	e000e010 	.word	0xe000e010

08003470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff ff29 	bl	80032d0 <__NVIC_SetPriorityGrouping>
}
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003486:	b580      	push	{r7, lr}
 8003488:	b086      	sub	sp, #24
 800348a:	af00      	add	r7, sp, #0
 800348c:	4603      	mov	r3, r0
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	607a      	str	r2, [r7, #4]
 8003492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003498:	f7ff ff3e 	bl	8003318 <__NVIC_GetPriorityGrouping>
 800349c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68b9      	ldr	r1, [r7, #8]
 80034a2:	6978      	ldr	r0, [r7, #20]
 80034a4:	f7ff ff8e 	bl	80033c4 <NVIC_EncodePriority>
 80034a8:	4602      	mov	r2, r0
 80034aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ae:	4611      	mov	r1, r2
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff ff5d 	bl	8003370 <__NVIC_SetPriority>
}
 80034b6:	bf00      	nop
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	4603      	mov	r3, r0
 80034c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff31 	bl	8003334 <__NVIC_EnableIRQ>
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff ffa2 	bl	800342c <SysTick_Config>
 80034e8:	4603      	mov	r3, r0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b089      	sub	sp, #36	; 0x24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003502:	2300      	movs	r3, #0
 8003504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003506:	2300      	movs	r3, #0
 8003508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	e159      	b.n	80037c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003510:	2201      	movs	r2, #1
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	4013      	ands	r3, r2
 8003522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	429a      	cmp	r2, r3
 800352a:	f040 8148 	bne.w	80037be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	2b01      	cmp	r3, #1
 8003538:	d005      	beq.n	8003546 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003542:	2b02      	cmp	r3, #2
 8003544:	d130      	bne.n	80035a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	2203      	movs	r2, #3
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4013      	ands	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4313      	orrs	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800357c:	2201      	movs	r2, #1
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	091b      	lsrs	r3, r3, #4
 8003592:	f003 0201 	and.w	r2, r3, #1
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d017      	beq.n	80035e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	2203      	movs	r2, #3
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 0303 	and.w	r3, r3, #3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d123      	bne.n	8003638 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	08da      	lsrs	r2, r3, #3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3208      	adds	r2, #8
 80035f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	220f      	movs	r2, #15
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	43db      	mvns	r3, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4013      	ands	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	08da      	lsrs	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3208      	adds	r2, #8
 8003632:	69b9      	ldr	r1, [r7, #24]
 8003634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	2203      	movs	r2, #3
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0203 	and.w	r2, r3, #3
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80a2 	beq.w	80037be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	4b57      	ldr	r3, [pc, #348]	; (80037dc <HAL_GPIO_Init+0x2e8>)
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	4a56      	ldr	r2, [pc, #344]	; (80037dc <HAL_GPIO_Init+0x2e8>)
 8003684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003688:	6453      	str	r3, [r2, #68]	; 0x44
 800368a:	4b54      	ldr	r3, [pc, #336]	; (80037dc <HAL_GPIO_Init+0x2e8>)
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003696:	4a52      	ldr	r2, [pc, #328]	; (80037e0 <HAL_GPIO_Init+0x2ec>)
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	089b      	lsrs	r3, r3, #2
 800369c:	3302      	adds	r3, #2
 800369e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	220f      	movs	r2, #15
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4013      	ands	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a49      	ldr	r2, [pc, #292]	; (80037e4 <HAL_GPIO_Init+0x2f0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d019      	beq.n	80036f6 <HAL_GPIO_Init+0x202>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a48      	ldr	r2, [pc, #288]	; (80037e8 <HAL_GPIO_Init+0x2f4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d013      	beq.n	80036f2 <HAL_GPIO_Init+0x1fe>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a47      	ldr	r2, [pc, #284]	; (80037ec <HAL_GPIO_Init+0x2f8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00d      	beq.n	80036ee <HAL_GPIO_Init+0x1fa>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a46      	ldr	r2, [pc, #280]	; (80037f0 <HAL_GPIO_Init+0x2fc>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d007      	beq.n	80036ea <HAL_GPIO_Init+0x1f6>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a45      	ldr	r2, [pc, #276]	; (80037f4 <HAL_GPIO_Init+0x300>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d101      	bne.n	80036e6 <HAL_GPIO_Init+0x1f2>
 80036e2:	2304      	movs	r3, #4
 80036e4:	e008      	b.n	80036f8 <HAL_GPIO_Init+0x204>
 80036e6:	2307      	movs	r3, #7
 80036e8:	e006      	b.n	80036f8 <HAL_GPIO_Init+0x204>
 80036ea:	2303      	movs	r3, #3
 80036ec:	e004      	b.n	80036f8 <HAL_GPIO_Init+0x204>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e002      	b.n	80036f8 <HAL_GPIO_Init+0x204>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <HAL_GPIO_Init+0x204>
 80036f6:	2300      	movs	r3, #0
 80036f8:	69fa      	ldr	r2, [r7, #28]
 80036fa:	f002 0203 	and.w	r2, r2, #3
 80036fe:	0092      	lsls	r2, r2, #2
 8003700:	4093      	lsls	r3, r2
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4313      	orrs	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003708:	4935      	ldr	r1, [pc, #212]	; (80037e0 <HAL_GPIO_Init+0x2ec>)
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	089b      	lsrs	r3, r3, #2
 800370e:	3302      	adds	r3, #2
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003716:	4b38      	ldr	r3, [pc, #224]	; (80037f8 <HAL_GPIO_Init+0x304>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	43db      	mvns	r3, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4013      	ands	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800373a:	4a2f      	ldr	r2, [pc, #188]	; (80037f8 <HAL_GPIO_Init+0x304>)
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003740:	4b2d      	ldr	r3, [pc, #180]	; (80037f8 <HAL_GPIO_Init+0x304>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	43db      	mvns	r3, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4013      	ands	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003764:	4a24      	ldr	r2, [pc, #144]	; (80037f8 <HAL_GPIO_Init+0x304>)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800376a:	4b23      	ldr	r3, [pc, #140]	; (80037f8 <HAL_GPIO_Init+0x304>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	43db      	mvns	r3, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4013      	ands	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800378e:	4a1a      	ldr	r2, [pc, #104]	; (80037f8 <HAL_GPIO_Init+0x304>)
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003794:	4b18      	ldr	r3, [pc, #96]	; (80037f8 <HAL_GPIO_Init+0x304>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037b8:	4a0f      	ldr	r2, [pc, #60]	; (80037f8 <HAL_GPIO_Init+0x304>)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	3301      	adds	r3, #1
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	2b0f      	cmp	r3, #15
 80037c8:	f67f aea2 	bls.w	8003510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037cc:	bf00      	nop
 80037ce:	bf00      	nop
 80037d0:	3724      	adds	r7, #36	; 0x24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40013800 	.word	0x40013800
 80037e4:	40020000 	.word	0x40020000
 80037e8:	40020400 	.word	0x40020400
 80037ec:	40020800 	.word	0x40020800
 80037f0:	40020c00 	.word	0x40020c00
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40013c00 	.word	0x40013c00

080037fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	887b      	ldrh	r3, [r7, #2]
 800380e:	4013      	ands	r3, r2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003814:	2301      	movs	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
 8003818:	e001      	b.n	800381e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800381a:	2300      	movs	r3, #0
 800381c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800381e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	807b      	strh	r3, [r7, #2]
 8003838:	4613      	mov	r3, r2
 800383a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800383c:	787b      	ldrb	r3, [r7, #1]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003842:	887a      	ldrh	r2, [r7, #2]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003848:	e003      	b.n	8003852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800384a:	887b      	ldrh	r3, [r7, #2]
 800384c:	041a      	lsls	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	619a      	str	r2, [r3, #24]
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800385e:	b480      	push	{r7}
 8003860:	b085      	sub	sp, #20
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003870:	887a      	ldrh	r2, [r7, #2]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4013      	ands	r3, r2
 8003876:	041a      	lsls	r2, r3, #16
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	43d9      	mvns	r1, r3
 800387c:	887b      	ldrh	r3, [r7, #2]
 800387e:	400b      	ands	r3, r1
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	619a      	str	r2, [r3, #24]
}
 8003886:	bf00      	nop
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
	...

08003894 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800389e:	4b08      	ldr	r3, [pc, #32]	; (80038c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d006      	beq.n	80038b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038aa:	4a05      	ldr	r2, [pc, #20]	; (80038c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038ac:	88fb      	ldrh	r3, [r7, #6]
 80038ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe f9a8 	bl	8001c08 <HAL_GPIO_EXTI_Callback>
  }
}
 80038b8:	bf00      	nop
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40013c00 	.word	0x40013c00

080038c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e267      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d075      	beq.n	80039ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038e2:	4b88      	ldr	r3, [pc, #544]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d00c      	beq.n	8003908 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ee:	4b85      	ldr	r3, [pc, #532]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d112      	bne.n	8003920 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038fa:	4b82      	ldr	r3, [pc, #520]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003906:	d10b      	bne.n	8003920 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003908:	4b7e      	ldr	r3, [pc, #504]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d05b      	beq.n	80039cc <HAL_RCC_OscConfig+0x108>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d157      	bne.n	80039cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e242      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003928:	d106      	bne.n	8003938 <HAL_RCC_OscConfig+0x74>
 800392a:	4b76      	ldr	r3, [pc, #472]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a75      	ldr	r2, [pc, #468]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	e01d      	b.n	8003974 <HAL_RCC_OscConfig+0xb0>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003940:	d10c      	bne.n	800395c <HAL_RCC_OscConfig+0x98>
 8003942:	4b70      	ldr	r3, [pc, #448]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a6f      	ldr	r2, [pc, #444]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	4b6d      	ldr	r3, [pc, #436]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a6c      	ldr	r2, [pc, #432]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	e00b      	b.n	8003974 <HAL_RCC_OscConfig+0xb0>
 800395c:	4b69      	ldr	r3, [pc, #420]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a68      	ldr	r2, [pc, #416]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	4b66      	ldr	r3, [pc, #408]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a65      	ldr	r2, [pc, #404]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 800396e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d013      	beq.n	80039a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7fe ff5e 	bl	800283c <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003984:	f7fe ff5a 	bl	800283c <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b64      	cmp	r3, #100	; 0x64
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e207      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003996:	4b5b      	ldr	r3, [pc, #364]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0xc0>
 80039a2:	e014      	b.n	80039ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7fe ff4a 	bl	800283c <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ac:	f7fe ff46 	bl	800283c <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	; 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e1f3      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039be:	4b51      	ldr	r3, [pc, #324]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f0      	bne.n	80039ac <HAL_RCC_OscConfig+0xe8>
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d063      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039da:	4b4a      	ldr	r3, [pc, #296]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 030c 	and.w	r3, r3, #12
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039e6:	4b47      	ldr	r3, [pc, #284]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d11c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039f2:	4b44      	ldr	r3, [pc, #272]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d116      	bne.n	8003a2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fe:	4b41      	ldr	r3, [pc, #260]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d005      	beq.n	8003a16 <HAL_RCC_OscConfig+0x152>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d001      	beq.n	8003a16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e1c7      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a16:	4b3b      	ldr	r3, [pc, #236]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4937      	ldr	r1, [pc, #220]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2a:	e03a      	b.n	8003aa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d020      	beq.n	8003a76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a34:	4b34      	ldr	r3, [pc, #208]	; (8003b08 <HAL_RCC_OscConfig+0x244>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3a:	f7fe feff 	bl	800283c <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a42:	f7fe fefb 	bl	800283c <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e1a8      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a54:	4b2b      	ldr	r3, [pc, #172]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a60:	4b28      	ldr	r3, [pc, #160]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4925      	ldr	r1, [pc, #148]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	600b      	str	r3, [r1, #0]
 8003a74:	e015      	b.n	8003aa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a76:	4b24      	ldr	r3, [pc, #144]	; (8003b08 <HAL_RCC_OscConfig+0x244>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7c:	f7fe fede 	bl	800283c <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a84:	f7fe feda 	bl	800283c <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e187      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a96:	4b1b      	ldr	r3, [pc, #108]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d036      	beq.n	8003b1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d016      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ab6:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <HAL_RCC_OscConfig+0x248>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abc:	f7fe febe 	bl	800283c <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac4:	f7fe feba 	bl	800283c <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e167      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad6:	4b0b      	ldr	r3, [pc, #44]	; (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x200>
 8003ae2:	e01b      	b.n	8003b1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae4:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <HAL_RCC_OscConfig+0x248>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aea:	f7fe fea7 	bl	800283c <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af0:	e00e      	b.n	8003b10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af2:	f7fe fea3 	bl	800283c <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d907      	bls.n	8003b10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e150      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
 8003b04:	40023800 	.word	0x40023800
 8003b08:	42470000 	.word	0x42470000
 8003b0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b10:	4b88      	ldr	r3, [pc, #544]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1ea      	bne.n	8003af2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8097 	beq.w	8003c58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b2e:	4b81      	ldr	r3, [pc, #516]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10f      	bne.n	8003b5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	4b7d      	ldr	r3, [pc, #500]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	4a7c      	ldr	r2, [pc, #496]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b48:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4a:	4b7a      	ldr	r3, [pc, #488]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b56:	2301      	movs	r3, #1
 8003b58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5a:	4b77      	ldr	r3, [pc, #476]	; (8003d38 <HAL_RCC_OscConfig+0x474>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d118      	bne.n	8003b98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b66:	4b74      	ldr	r3, [pc, #464]	; (8003d38 <HAL_RCC_OscConfig+0x474>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a73      	ldr	r2, [pc, #460]	; (8003d38 <HAL_RCC_OscConfig+0x474>)
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b72:	f7fe fe63 	bl	800283c <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7a:	f7fe fe5f 	bl	800283c <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e10c      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8c:	4b6a      	ldr	r3, [pc, #424]	; (8003d38 <HAL_RCC_OscConfig+0x474>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d106      	bne.n	8003bae <HAL_RCC_OscConfig+0x2ea>
 8003ba0:	4b64      	ldr	r3, [pc, #400]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba4:	4a63      	ldr	r2, [pc, #396]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003ba6:	f043 0301 	orr.w	r3, r3, #1
 8003baa:	6713      	str	r3, [r2, #112]	; 0x70
 8003bac:	e01c      	b.n	8003be8 <HAL_RCC_OscConfig+0x324>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b05      	cmp	r3, #5
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x30c>
 8003bb6:	4b5f      	ldr	r3, [pc, #380]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bba:	4a5e      	ldr	r2, [pc, #376]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	f043 0304 	orr.w	r3, r3, #4
 8003bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc2:	4b5c      	ldr	r3, [pc, #368]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc6:	4a5b      	ldr	r2, [pc, #364]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bce:	e00b      	b.n	8003be8 <HAL_RCC_OscConfig+0x324>
 8003bd0:	4b58      	ldr	r3, [pc, #352]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd4:	4a57      	ldr	r2, [pc, #348]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bd6:	f023 0301 	bic.w	r3, r3, #1
 8003bda:	6713      	str	r3, [r2, #112]	; 0x70
 8003bdc:	4b55      	ldr	r3, [pc, #340]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be0:	4a54      	ldr	r2, [pc, #336]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003be2:	f023 0304 	bic.w	r3, r3, #4
 8003be6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d015      	beq.n	8003c1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf0:	f7fe fe24 	bl	800283c <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf8:	f7fe fe20 	bl	800283c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e0cb      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0e:	4b49      	ldr	r3, [pc, #292]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0ee      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x334>
 8003c1a:	e014      	b.n	8003c46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1c:	f7fe fe0e 	bl	800283c <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c22:	e00a      	b.n	8003c3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c24:	f7fe fe0a 	bl	800283c <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e0b5      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c3a:	4b3e      	ldr	r3, [pc, #248]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1ee      	bne.n	8003c24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d105      	bne.n	8003c58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c4c:	4b39      	ldr	r3, [pc, #228]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	4a38      	ldr	r2, [pc, #224]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80a1 	beq.w	8003da4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c62:	4b34      	ldr	r3, [pc, #208]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d05c      	beq.n	8003d28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d141      	bne.n	8003cfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c76:	4b31      	ldr	r3, [pc, #196]	; (8003d3c <HAL_RCC_OscConfig+0x478>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7c:	f7fe fdde 	bl	800283c <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c84:	f7fe fdda 	bl	800283c <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e087      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c96:	4b27      	ldr	r3, [pc, #156]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69da      	ldr	r2, [r3, #28]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	019b      	lsls	r3, r3, #6
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb8:	085b      	lsrs	r3, r3, #1
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	041b      	lsls	r3, r3, #16
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	061b      	lsls	r3, r3, #24
 8003cc6:	491b      	ldr	r1, [pc, #108]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ccc:	4b1b      	ldr	r3, [pc, #108]	; (8003d3c <HAL_RCC_OscConfig+0x478>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd2:	f7fe fdb3 	bl	800283c <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cda:	f7fe fdaf 	bl	800283c <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e05c      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cec:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0f0      	beq.n	8003cda <HAL_RCC_OscConfig+0x416>
 8003cf8:	e054      	b.n	8003da4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfa:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <HAL_RCC_OscConfig+0x478>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d00:	f7fe fd9c 	bl	800283c <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d08:	f7fe fd98 	bl	800283c <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e045      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1a:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f0      	bne.n	8003d08 <HAL_RCC_OscConfig+0x444>
 8003d26:	e03d      	b.n	8003da4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d107      	bne.n	8003d40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e038      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
 8003d34:	40023800 	.word	0x40023800
 8003d38:	40007000 	.word	0x40007000
 8003d3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d40:	4b1b      	ldr	r3, [pc, #108]	; (8003db0 <HAL_RCC_OscConfig+0x4ec>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d028      	beq.n	8003da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d121      	bne.n	8003da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d11a      	bne.n	8003da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d70:	4013      	ands	r3, r2
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d111      	bne.n	8003da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d86:	085b      	lsrs	r3, r3, #1
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d107      	bne.n	8003da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800

08003db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0cc      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc8:	4b68      	ldr	r3, [pc, #416]	; (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d90c      	bls.n	8003df0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd6:	4b65      	ldr	r3, [pc, #404]	; (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dde:	4b63      	ldr	r3, [pc, #396]	; (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0b8      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d020      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e08:	4b59      	ldr	r3, [pc, #356]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	4a58      	ldr	r2, [pc, #352]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e20:	4b53      	ldr	r3, [pc, #332]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	4a52      	ldr	r2, [pc, #328]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e2c:	4b50      	ldr	r3, [pc, #320]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	494d      	ldr	r1, [pc, #308]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d044      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d107      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e52:	4b47      	ldr	r3, [pc, #284]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d119      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e07f      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d003      	beq.n	8003e72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d107      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e72:	4b3f      	ldr	r3, [pc, #252]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d109      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e06f      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e82:	4b3b      	ldr	r3, [pc, #236]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e067      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e92:	4b37      	ldr	r3, [pc, #220]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f023 0203 	bic.w	r2, r3, #3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4934      	ldr	r1, [pc, #208]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea4:	f7fe fcca 	bl	800283c <HAL_GetTick>
 8003ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eaa:	e00a      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eac:	f7fe fcc6 	bl	800283c <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e04f      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec2:	4b2b      	ldr	r3, [pc, #172]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 020c 	and.w	r2, r3, #12
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d1eb      	bne.n	8003eac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed4:	4b25      	ldr	r3, [pc, #148]	; (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d20c      	bcs.n	8003efc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee2:	4b22      	ldr	r3, [pc, #136]	; (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eea:	4b20      	ldr	r3, [pc, #128]	; (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e032      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4916      	ldr	r1, [pc, #88]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f26:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	490e      	ldr	r1, [pc, #56]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f3a:	f000 f821 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	490a      	ldr	r1, [pc, #40]	; (8003f74 <HAL_RCC_ClockConfig+0x1c0>)
 8003f4c:	5ccb      	ldrb	r3, [r1, r3]
 8003f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f52:	4a09      	ldr	r2, [pc, #36]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f56:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fe fc2a 	bl	80027b4 <HAL_InitTick>

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40023c00 	.word	0x40023c00
 8003f70:	40023800 	.word	0x40023800
 8003f74:	08008000 	.word	0x08008000
 8003f78:	20000010 	.word	0x20000010
 8003f7c:	20000014 	.word	0x20000014

08003f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f84:	b094      	sub	sp, #80	; 0x50
 8003f86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f90:	2300      	movs	r3, #0
 8003f92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f98:	4b79      	ldr	r3, [pc, #484]	; (8004180 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 030c 	and.w	r3, r3, #12
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d00d      	beq.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x40>
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	f200 80e1 	bhi.w	800416c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d003      	beq.n	8003fba <HAL_RCC_GetSysClockFreq+0x3a>
 8003fb2:	e0db      	b.n	800416c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fb4:	4b73      	ldr	r3, [pc, #460]	; (8004184 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fb6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003fb8:	e0db      	b.n	8004172 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fba:	4b73      	ldr	r3, [pc, #460]	; (8004188 <HAL_RCC_GetSysClockFreq+0x208>)
 8003fbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fbe:	e0d8      	b.n	8004172 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fc0:	4b6f      	ldr	r3, [pc, #444]	; (8004180 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fc8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fca:	4b6d      	ldr	r3, [pc, #436]	; (8004180 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d063      	beq.n	800409e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd6:	4b6a      	ldr	r3, [pc, #424]	; (8004180 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	099b      	lsrs	r3, r3, #6
 8003fdc:	2200      	movs	r2, #0
 8003fde:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fe0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fe8:	633b      	str	r3, [r7, #48]	; 0x30
 8003fea:	2300      	movs	r3, #0
 8003fec:	637b      	str	r3, [r7, #52]	; 0x34
 8003fee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ff2:	4622      	mov	r2, r4
 8003ff4:	462b      	mov	r3, r5
 8003ff6:	f04f 0000 	mov.w	r0, #0
 8003ffa:	f04f 0100 	mov.w	r1, #0
 8003ffe:	0159      	lsls	r1, r3, #5
 8004000:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004004:	0150      	lsls	r0, r2, #5
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4621      	mov	r1, r4
 800400c:	1a51      	subs	r1, r2, r1
 800400e:	6139      	str	r1, [r7, #16]
 8004010:	4629      	mov	r1, r5
 8004012:	eb63 0301 	sbc.w	r3, r3, r1
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004024:	4659      	mov	r1, fp
 8004026:	018b      	lsls	r3, r1, #6
 8004028:	4651      	mov	r1, sl
 800402a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800402e:	4651      	mov	r1, sl
 8004030:	018a      	lsls	r2, r1, #6
 8004032:	4651      	mov	r1, sl
 8004034:	ebb2 0801 	subs.w	r8, r2, r1
 8004038:	4659      	mov	r1, fp
 800403a:	eb63 0901 	sbc.w	r9, r3, r1
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	f04f 0300 	mov.w	r3, #0
 8004046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800404a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800404e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004052:	4690      	mov	r8, r2
 8004054:	4699      	mov	r9, r3
 8004056:	4623      	mov	r3, r4
 8004058:	eb18 0303 	adds.w	r3, r8, r3
 800405c:	60bb      	str	r3, [r7, #8]
 800405e:	462b      	mov	r3, r5
 8004060:	eb49 0303 	adc.w	r3, r9, r3
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	f04f 0300 	mov.w	r3, #0
 800406e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004072:	4629      	mov	r1, r5
 8004074:	024b      	lsls	r3, r1, #9
 8004076:	4621      	mov	r1, r4
 8004078:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800407c:	4621      	mov	r1, r4
 800407e:	024a      	lsls	r2, r1, #9
 8004080:	4610      	mov	r0, r2
 8004082:	4619      	mov	r1, r3
 8004084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004086:	2200      	movs	r2, #0
 8004088:	62bb      	str	r3, [r7, #40]	; 0x28
 800408a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800408c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004090:	f7fc fdfc 	bl	8000c8c <__aeabi_uldivmod>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4613      	mov	r3, r2
 800409a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800409c:	e058      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800409e:	4b38      	ldr	r3, [pc, #224]	; (8004180 <HAL_RCC_GetSysClockFreq+0x200>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	099b      	lsrs	r3, r3, #6
 80040a4:	2200      	movs	r2, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	4611      	mov	r1, r2
 80040aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040ae:	623b      	str	r3, [r7, #32]
 80040b0:	2300      	movs	r3, #0
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
 80040b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040b8:	4642      	mov	r2, r8
 80040ba:	464b      	mov	r3, r9
 80040bc:	f04f 0000 	mov.w	r0, #0
 80040c0:	f04f 0100 	mov.w	r1, #0
 80040c4:	0159      	lsls	r1, r3, #5
 80040c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ca:	0150      	lsls	r0, r2, #5
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4641      	mov	r1, r8
 80040d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80040d6:	4649      	mov	r1, r9
 80040d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040f0:	ebb2 040a 	subs.w	r4, r2, sl
 80040f4:	eb63 050b 	sbc.w	r5, r3, fp
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	00eb      	lsls	r3, r5, #3
 8004102:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004106:	00e2      	lsls	r2, r4, #3
 8004108:	4614      	mov	r4, r2
 800410a:	461d      	mov	r5, r3
 800410c:	4643      	mov	r3, r8
 800410e:	18e3      	adds	r3, r4, r3
 8004110:	603b      	str	r3, [r7, #0]
 8004112:	464b      	mov	r3, r9
 8004114:	eb45 0303 	adc.w	r3, r5, r3
 8004118:	607b      	str	r3, [r7, #4]
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004126:	4629      	mov	r1, r5
 8004128:	028b      	lsls	r3, r1, #10
 800412a:	4621      	mov	r1, r4
 800412c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004130:	4621      	mov	r1, r4
 8004132:	028a      	lsls	r2, r1, #10
 8004134:	4610      	mov	r0, r2
 8004136:	4619      	mov	r1, r3
 8004138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800413a:	2200      	movs	r2, #0
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	61fa      	str	r2, [r7, #28]
 8004140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004144:	f7fc fda2 	bl	8000c8c <__aeabi_uldivmod>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	4613      	mov	r3, r2
 800414e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004150:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <HAL_RCC_GetSysClockFreq+0x200>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	0c1b      	lsrs	r3, r3, #16
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	3301      	adds	r3, #1
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004160:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004164:	fbb2 f3f3 	udiv	r3, r2, r3
 8004168:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800416a:	e002      	b.n	8004172 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <HAL_RCC_GetSysClockFreq+0x204>)
 800416e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004170:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004174:	4618      	mov	r0, r3
 8004176:	3750      	adds	r7, #80	; 0x50
 8004178:	46bd      	mov	sp, r7
 800417a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800
 8004184:	00f42400 	.word	0x00f42400
 8004188:	007a1200 	.word	0x007a1200

0800418c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e041      	b.n	8004222 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fe f8ae 	bl	8002314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3304      	adds	r3, #4
 80041c8:	4619      	mov	r1, r3
 80041ca:	4610      	mov	r0, r2
 80041cc:	f000 fe64 	bl	8004e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
	...

0800422c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b01      	cmp	r3, #1
 800423e:	d001      	beq.n	8004244 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e044      	b.n	80042ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1e      	ldr	r2, [pc, #120]	; (80042dc <HAL_TIM_Base_Start_IT+0xb0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d018      	beq.n	8004298 <HAL_TIM_Base_Start_IT+0x6c>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426e:	d013      	beq.n	8004298 <HAL_TIM_Base_Start_IT+0x6c>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a1a      	ldr	r2, [pc, #104]	; (80042e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00e      	beq.n	8004298 <HAL_TIM_Base_Start_IT+0x6c>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a19      	ldr	r2, [pc, #100]	; (80042e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d009      	beq.n	8004298 <HAL_TIM_Base_Start_IT+0x6c>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a17      	ldr	r2, [pc, #92]	; (80042e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d004      	beq.n	8004298 <HAL_TIM_Base_Start_IT+0x6c>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a16      	ldr	r2, [pc, #88]	; (80042ec <HAL_TIM_Base_Start_IT+0xc0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d111      	bne.n	80042bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b06      	cmp	r3, #6
 80042a8:	d010      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0201 	orr.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ba:	e007      	b.n	80042cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0201 	orr.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40010000 	.word	0x40010000
 80042e0:	40000400 	.word	0x40000400
 80042e4:	40000800 	.word	0x40000800
 80042e8:	40000c00 	.word	0x40000c00
 80042ec:	40014000 	.word	0x40014000

080042f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e041      	b.n	8004386 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f839 	bl	800438e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3304      	adds	r3, #4
 800432c:	4619      	mov	r1, r3
 800432e:	4610      	mov	r0, r2
 8004330:	f000 fdb2 	bl	8004e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800438e:	b480      	push	{r7}
 8004390:	b083      	sub	sp, #12
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
	...

080043a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d109      	bne.n	80043c8 <HAL_TIM_PWM_Start+0x24>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	bf14      	ite	ne
 80043c0:	2301      	movne	r3, #1
 80043c2:	2300      	moveq	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	e022      	b.n	800440e <HAL_TIM_PWM_Start+0x6a>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d109      	bne.n	80043e2 <HAL_TIM_PWM_Start+0x3e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	bf14      	ite	ne
 80043da:	2301      	movne	r3, #1
 80043dc:	2300      	moveq	r3, #0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	e015      	b.n	800440e <HAL_TIM_PWM_Start+0x6a>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d109      	bne.n	80043fc <HAL_TIM_PWM_Start+0x58>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	bf14      	ite	ne
 80043f4:	2301      	movne	r3, #1
 80043f6:	2300      	moveq	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	e008      	b.n	800440e <HAL_TIM_PWM_Start+0x6a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b01      	cmp	r3, #1
 8004406:	bf14      	ite	ne
 8004408:	2301      	movne	r3, #1
 800440a:	2300      	moveq	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e068      	b.n	80044e8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d104      	bne.n	8004426 <HAL_TIM_PWM_Start+0x82>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004424:	e013      	b.n	800444e <HAL_TIM_PWM_Start+0xaa>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b04      	cmp	r3, #4
 800442a:	d104      	bne.n	8004436 <HAL_TIM_PWM_Start+0x92>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004434:	e00b      	b.n	800444e <HAL_TIM_PWM_Start+0xaa>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d104      	bne.n	8004446 <HAL_TIM_PWM_Start+0xa2>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004444:	e003      	b.n	800444e <HAL_TIM_PWM_Start+0xaa>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2202      	movs	r2, #2
 800444a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2201      	movs	r2, #1
 8004454:	6839      	ldr	r1, [r7, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f001 f8e2 	bl	8005620 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a23      	ldr	r2, [pc, #140]	; (80044f0 <HAL_TIM_PWM_Start+0x14c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d107      	bne.n	8004476 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004474:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1d      	ldr	r2, [pc, #116]	; (80044f0 <HAL_TIM_PWM_Start+0x14c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d018      	beq.n	80044b2 <HAL_TIM_PWM_Start+0x10e>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004488:	d013      	beq.n	80044b2 <HAL_TIM_PWM_Start+0x10e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a19      	ldr	r2, [pc, #100]	; (80044f4 <HAL_TIM_PWM_Start+0x150>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00e      	beq.n	80044b2 <HAL_TIM_PWM_Start+0x10e>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a17      	ldr	r2, [pc, #92]	; (80044f8 <HAL_TIM_PWM_Start+0x154>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d009      	beq.n	80044b2 <HAL_TIM_PWM_Start+0x10e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a16      	ldr	r2, [pc, #88]	; (80044fc <HAL_TIM_PWM_Start+0x158>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d004      	beq.n	80044b2 <HAL_TIM_PWM_Start+0x10e>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a14      	ldr	r2, [pc, #80]	; (8004500 <HAL_TIM_PWM_Start+0x15c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d111      	bne.n	80044d6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b06      	cmp	r3, #6
 80044c2:	d010      	beq.n	80044e6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d4:	e007      	b.n	80044e6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0201 	orr.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40010000 	.word	0x40010000
 80044f4:	40000400 	.word	0x40000400
 80044f8:	40000800 	.word	0x40000800
 80044fc:	40000c00 	.word	0x40000c00
 8004500:	40014000 	.word	0x40014000

08004504 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e041      	b.n	800459a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f839 	bl	80045a2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3304      	adds	r3, #4
 8004540:	4619      	mov	r1, r3
 8004542:	4610      	mov	r0, r2
 8004544:	f000 fca8 	bl	8004e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
	...

080045b8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d104      	bne.n	80045d6 <HAL_TIM_IC_Start_IT+0x1e>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	e013      	b.n	80045fe <HAL_TIM_IC_Start_IT+0x46>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d104      	bne.n	80045e6 <HAL_TIM_IC_Start_IT+0x2e>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	e00b      	b.n	80045fe <HAL_TIM_IC_Start_IT+0x46>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d104      	bne.n	80045f6 <HAL_TIM_IC_Start_IT+0x3e>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	e003      	b.n	80045fe <HAL_TIM_IC_Start_IT+0x46>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d104      	bne.n	8004610 <HAL_TIM_IC_Start_IT+0x58>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800460c:	b2db      	uxtb	r3, r3
 800460e:	e013      	b.n	8004638 <HAL_TIM_IC_Start_IT+0x80>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b04      	cmp	r3, #4
 8004614:	d104      	bne.n	8004620 <HAL_TIM_IC_Start_IT+0x68>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800461c:	b2db      	uxtb	r3, r3
 800461e:	e00b      	b.n	8004638 <HAL_TIM_IC_Start_IT+0x80>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	2b08      	cmp	r3, #8
 8004624:	d104      	bne.n	8004630 <HAL_TIM_IC_Start_IT+0x78>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800462c:	b2db      	uxtb	r3, r3
 800462e:	e003      	b.n	8004638 <HAL_TIM_IC_Start_IT+0x80>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004636:	b2db      	uxtb	r3, r3
 8004638:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800463a:	7bbb      	ldrb	r3, [r7, #14]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d102      	bne.n	8004646 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004640:	7b7b      	ldrb	r3, [r7, #13]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d001      	beq.n	800464a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e0c2      	b.n	80047d0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d104      	bne.n	800465a <HAL_TIM_IC_Start_IT+0xa2>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004658:	e013      	b.n	8004682 <HAL_TIM_IC_Start_IT+0xca>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b04      	cmp	r3, #4
 800465e:	d104      	bne.n	800466a <HAL_TIM_IC_Start_IT+0xb2>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004668:	e00b      	b.n	8004682 <HAL_TIM_IC_Start_IT+0xca>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b08      	cmp	r3, #8
 800466e:	d104      	bne.n	800467a <HAL_TIM_IC_Start_IT+0xc2>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004678:	e003      	b.n	8004682 <HAL_TIM_IC_Start_IT+0xca>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2202      	movs	r2, #2
 800467e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d104      	bne.n	8004692 <HAL_TIM_IC_Start_IT+0xda>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004690:	e013      	b.n	80046ba <HAL_TIM_IC_Start_IT+0x102>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b04      	cmp	r3, #4
 8004696:	d104      	bne.n	80046a2 <HAL_TIM_IC_Start_IT+0xea>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046a0:	e00b      	b.n	80046ba <HAL_TIM_IC_Start_IT+0x102>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d104      	bne.n	80046b2 <HAL_TIM_IC_Start_IT+0xfa>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b0:	e003      	b.n	80046ba <HAL_TIM_IC_Start_IT+0x102>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b0c      	cmp	r3, #12
 80046be:	d841      	bhi.n	8004744 <HAL_TIM_IC_Start_IT+0x18c>
 80046c0:	a201      	add	r2, pc, #4	; (adr r2, 80046c8 <HAL_TIM_IC_Start_IT+0x110>)
 80046c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c6:	bf00      	nop
 80046c8:	080046fd 	.word	0x080046fd
 80046cc:	08004745 	.word	0x08004745
 80046d0:	08004745 	.word	0x08004745
 80046d4:	08004745 	.word	0x08004745
 80046d8:	0800470f 	.word	0x0800470f
 80046dc:	08004745 	.word	0x08004745
 80046e0:	08004745 	.word	0x08004745
 80046e4:	08004745 	.word	0x08004745
 80046e8:	08004721 	.word	0x08004721
 80046ec:	08004745 	.word	0x08004745
 80046f0:	08004745 	.word	0x08004745
 80046f4:	08004745 	.word	0x08004745
 80046f8:	08004733 	.word	0x08004733
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0202 	orr.w	r2, r2, #2
 800470a:	60da      	str	r2, [r3, #12]
      break;
 800470c:	e01d      	b.n	800474a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0204 	orr.w	r2, r2, #4
 800471c:	60da      	str	r2, [r3, #12]
      break;
 800471e:	e014      	b.n	800474a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0208 	orr.w	r2, r2, #8
 800472e:	60da      	str	r2, [r3, #12]
      break;
 8004730:	e00b      	b.n	800474a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0210 	orr.w	r2, r2, #16
 8004740:	60da      	str	r2, [r3, #12]
      break;
 8004742:	e002      	b.n	800474a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
      break;
 8004748:	bf00      	nop
  }

  if (status == HAL_OK)
 800474a:	7bfb      	ldrb	r3, [r7, #15]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d13e      	bne.n	80047ce <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2201      	movs	r2, #1
 8004756:	6839      	ldr	r1, [r7, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f000 ff61 	bl	8005620 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1d      	ldr	r2, [pc, #116]	; (80047d8 <HAL_TIM_IC_Start_IT+0x220>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d018      	beq.n	800479a <HAL_TIM_IC_Start_IT+0x1e2>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004770:	d013      	beq.n	800479a <HAL_TIM_IC_Start_IT+0x1e2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a19      	ldr	r2, [pc, #100]	; (80047dc <HAL_TIM_IC_Start_IT+0x224>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00e      	beq.n	800479a <HAL_TIM_IC_Start_IT+0x1e2>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a17      	ldr	r2, [pc, #92]	; (80047e0 <HAL_TIM_IC_Start_IT+0x228>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d009      	beq.n	800479a <HAL_TIM_IC_Start_IT+0x1e2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a16      	ldr	r2, [pc, #88]	; (80047e4 <HAL_TIM_IC_Start_IT+0x22c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d004      	beq.n	800479a <HAL_TIM_IC_Start_IT+0x1e2>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a14      	ldr	r2, [pc, #80]	; (80047e8 <HAL_TIM_IC_Start_IT+0x230>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d111      	bne.n	80047be <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b06      	cmp	r3, #6
 80047aa:	d010      	beq.n	80047ce <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047bc:	e007      	b.n	80047ce <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f042 0201 	orr.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40010000 	.word	0x40010000
 80047dc:	40000400 	.word	0x40000400
 80047e0:	40000800 	.word	0x40000800
 80047e4:	40000c00 	.word	0x40000c00
 80047e8:	40014000 	.word	0x40014000

080047ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d122      	bne.n	8004848 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b02      	cmp	r3, #2
 800480e:	d11b      	bne.n	8004848 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0202 	mvn.w	r2, #2
 8004818:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 fb13 	bl	8004e5a <HAL_TIM_IC_CaptureCallback>
 8004834:	e005      	b.n	8004842 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fb05 	bl	8004e46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fb16 	bl	8004e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b04      	cmp	r3, #4
 8004854:	d122      	bne.n	800489c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b04      	cmp	r3, #4
 8004862:	d11b      	bne.n	800489c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0204 	mvn.w	r2, #4
 800486c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2202      	movs	r2, #2
 8004872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fae9 	bl	8004e5a <HAL_TIM_IC_CaptureCallback>
 8004888:	e005      	b.n	8004896 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fadb 	bl	8004e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 faec 	bl	8004e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d122      	bne.n	80048f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d11b      	bne.n	80048f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0208 	mvn.w	r2, #8
 80048c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2204      	movs	r2, #4
 80048c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fabf 	bl	8004e5a <HAL_TIM_IC_CaptureCallback>
 80048dc:	e005      	b.n	80048ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fab1 	bl	8004e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fac2 	bl	8004e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f003 0310 	and.w	r3, r3, #16
 80048fa:	2b10      	cmp	r3, #16
 80048fc:	d122      	bne.n	8004944 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	2b10      	cmp	r3, #16
 800490a:	d11b      	bne.n	8004944 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0210 	mvn.w	r2, #16
 8004914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2208      	movs	r2, #8
 800491a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fa95 	bl	8004e5a <HAL_TIM_IC_CaptureCallback>
 8004930:	e005      	b.n	800493e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fa87 	bl	8004e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fa98 	bl	8004e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b01      	cmp	r3, #1
 8004950:	d10e      	bne.n	8004970 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b01      	cmp	r3, #1
 800495e:	d107      	bne.n	8004970 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0201 	mvn.w	r2, #1
 8004968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fd fb98 	bl	80020a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497a:	2b80      	cmp	r3, #128	; 0x80
 800497c:	d10e      	bne.n	800499c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004988:	2b80      	cmp	r3, #128	; 0x80
 800498a:	d107      	bne.n	800499c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 ff32 	bl	8005800 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d10e      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b4:	2b40      	cmp	r3, #64	; 0x40
 80049b6:	d107      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fa5d 	bl	8004e82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b20      	cmp	r3, #32
 80049d4:	d10e      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0320 	and.w	r3, r3, #32
 80049e0:	2b20      	cmp	r3, #32
 80049e2:	d107      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0220 	mvn.w	r2, #32
 80049ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fefc 	bl	80057ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049f4:	bf00      	nop
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e088      	b.n	8004b2c <HAL_TIM_IC_ConfigChannel+0x130>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d11b      	bne.n	8004a60 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6818      	ldr	r0, [r3, #0]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	6819      	ldr	r1, [r3, #0]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f000 fc3a 	bl	80052b0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 020c 	bic.w	r2, r2, #12
 8004a4a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6999      	ldr	r1, [r3, #24]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	619a      	str	r2, [r3, #24]
 8004a5e:	e060      	b.n	8004b22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d11c      	bne.n	8004aa0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	6819      	ldr	r1, [r3, #0]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f000 fcb2 	bl	80053de <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699a      	ldr	r2, [r3, #24]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a88:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6999      	ldr	r1, [r3, #24]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	021a      	lsls	r2, r3, #8
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	619a      	str	r2, [r3, #24]
 8004a9e:	e040      	b.n	8004b22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d11b      	bne.n	8004ade <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6818      	ldr	r0, [r3, #0]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	6819      	ldr	r1, [r3, #0]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f000 fcff 	bl	80054b8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69da      	ldr	r2, [r3, #28]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 020c 	bic.w	r2, r2, #12
 8004ac8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	69d9      	ldr	r1, [r3, #28]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	61da      	str	r2, [r3, #28]
 8004adc:	e021      	b.n	8004b22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b0c      	cmp	r3, #12
 8004ae2:	d11c      	bne.n	8004b1e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6818      	ldr	r0, [r3, #0]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	6819      	ldr	r1, [r3, #0]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f000 fd1c 	bl	8005530 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	69da      	ldr	r2, [r3, #28]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b06:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69d9      	ldr	r1, [r3, #28]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	021a      	lsls	r2, r3, #8
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	61da      	str	r2, [r3, #28]
 8004b1c:	e001      	b.n	8004b22 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3718      	adds	r7, #24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e0ae      	b.n	8004cb0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b0c      	cmp	r3, #12
 8004b5e:	f200 809f 	bhi.w	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b62:	a201      	add	r2, pc, #4	; (adr r2, 8004b68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b68:	08004b9d 	.word	0x08004b9d
 8004b6c:	08004ca1 	.word	0x08004ca1
 8004b70:	08004ca1 	.word	0x08004ca1
 8004b74:	08004ca1 	.word	0x08004ca1
 8004b78:	08004bdd 	.word	0x08004bdd
 8004b7c:	08004ca1 	.word	0x08004ca1
 8004b80:	08004ca1 	.word	0x08004ca1
 8004b84:	08004ca1 	.word	0x08004ca1
 8004b88:	08004c1f 	.word	0x08004c1f
 8004b8c:	08004ca1 	.word	0x08004ca1
 8004b90:	08004ca1 	.word	0x08004ca1
 8004b94:	08004ca1 	.word	0x08004ca1
 8004b98:	08004c5f 	.word	0x08004c5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68b9      	ldr	r1, [r7, #8]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 f9f8 	bl	8004f98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699a      	ldr	r2, [r3, #24]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0208 	orr.w	r2, r2, #8
 8004bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699a      	ldr	r2, [r3, #24]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0204 	bic.w	r2, r2, #4
 8004bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6999      	ldr	r1, [r3, #24]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	691a      	ldr	r2, [r3, #16]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	619a      	str	r2, [r3, #24]
      break;
 8004bda:	e064      	b.n	8004ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68b9      	ldr	r1, [r7, #8]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fa3e 	bl	8005064 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699a      	ldr	r2, [r3, #24]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699a      	ldr	r2, [r3, #24]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6999      	ldr	r1, [r3, #24]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	021a      	lsls	r2, r3, #8
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	619a      	str	r2, [r3, #24]
      break;
 8004c1c:	e043      	b.n	8004ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 fa89 	bl	800513c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69da      	ldr	r2, [r3, #28]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f042 0208 	orr.w	r2, r2, #8
 8004c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69da      	ldr	r2, [r3, #28]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0204 	bic.w	r2, r2, #4
 8004c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69d9      	ldr	r1, [r3, #28]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	691a      	ldr	r2, [r3, #16]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	61da      	str	r2, [r3, #28]
      break;
 8004c5c:	e023      	b.n	8004ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68b9      	ldr	r1, [r7, #8]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 fad3 	bl	8005210 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69da      	ldr	r2, [r3, #28]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69d9      	ldr	r1, [r3, #28]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	021a      	lsls	r2, r3, #8
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	61da      	str	r2, [r3, #28]
      break;
 8004c9e:	e002      	b.n	8004ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <HAL_TIM_ConfigClockSource+0x1c>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e0b4      	b.n	8004e3e <HAL_TIM_ConfigClockSource+0x186>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d0c:	d03e      	beq.n	8004d8c <HAL_TIM_ConfigClockSource+0xd4>
 8004d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d12:	f200 8087 	bhi.w	8004e24 <HAL_TIM_ConfigClockSource+0x16c>
 8004d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1a:	f000 8086 	beq.w	8004e2a <HAL_TIM_ConfigClockSource+0x172>
 8004d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d22:	d87f      	bhi.n	8004e24 <HAL_TIM_ConfigClockSource+0x16c>
 8004d24:	2b70      	cmp	r3, #112	; 0x70
 8004d26:	d01a      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0xa6>
 8004d28:	2b70      	cmp	r3, #112	; 0x70
 8004d2a:	d87b      	bhi.n	8004e24 <HAL_TIM_ConfigClockSource+0x16c>
 8004d2c:	2b60      	cmp	r3, #96	; 0x60
 8004d2e:	d050      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0x11a>
 8004d30:	2b60      	cmp	r3, #96	; 0x60
 8004d32:	d877      	bhi.n	8004e24 <HAL_TIM_ConfigClockSource+0x16c>
 8004d34:	2b50      	cmp	r3, #80	; 0x50
 8004d36:	d03c      	beq.n	8004db2 <HAL_TIM_ConfigClockSource+0xfa>
 8004d38:	2b50      	cmp	r3, #80	; 0x50
 8004d3a:	d873      	bhi.n	8004e24 <HAL_TIM_ConfigClockSource+0x16c>
 8004d3c:	2b40      	cmp	r3, #64	; 0x40
 8004d3e:	d058      	beq.n	8004df2 <HAL_TIM_ConfigClockSource+0x13a>
 8004d40:	2b40      	cmp	r3, #64	; 0x40
 8004d42:	d86f      	bhi.n	8004e24 <HAL_TIM_ConfigClockSource+0x16c>
 8004d44:	2b30      	cmp	r3, #48	; 0x30
 8004d46:	d064      	beq.n	8004e12 <HAL_TIM_ConfigClockSource+0x15a>
 8004d48:	2b30      	cmp	r3, #48	; 0x30
 8004d4a:	d86b      	bhi.n	8004e24 <HAL_TIM_ConfigClockSource+0x16c>
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d060      	beq.n	8004e12 <HAL_TIM_ConfigClockSource+0x15a>
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d867      	bhi.n	8004e24 <HAL_TIM_ConfigClockSource+0x16c>
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d05c      	beq.n	8004e12 <HAL_TIM_ConfigClockSource+0x15a>
 8004d58:	2b10      	cmp	r3, #16
 8004d5a:	d05a      	beq.n	8004e12 <HAL_TIM_ConfigClockSource+0x15a>
 8004d5c:	e062      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	6899      	ldr	r1, [r3, #8]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f000 fc37 	bl	80055e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	609a      	str	r2, [r3, #8]
      break;
 8004d8a:	e04f      	b.n	8004e2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6818      	ldr	r0, [r3, #0]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	6899      	ldr	r1, [r3, #8]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f000 fc20 	bl	80055e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dae:	609a      	str	r2, [r3, #8]
      break;
 8004db0:	e03c      	b.n	8004e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6818      	ldr	r0, [r3, #0]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	6859      	ldr	r1, [r3, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f000 fade 	bl	8005380 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2150      	movs	r1, #80	; 0x50
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 fbed 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8004dd0:	e02c      	b.n	8004e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6818      	ldr	r0, [r3, #0]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	6859      	ldr	r1, [r3, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	461a      	mov	r2, r3
 8004de0:	f000 fb3a 	bl	8005458 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2160      	movs	r1, #96	; 0x60
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fbdd 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8004df0:	e01c      	b.n	8004e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6818      	ldr	r0, [r3, #0]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	6859      	ldr	r1, [r3, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f000 fabe 	bl	8005380 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2140      	movs	r1, #64	; 0x40
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 fbcd 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8004e10:	e00c      	b.n	8004e2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	f000 fbc4 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8004e22:	e003      	b.n	8004e2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	73fb      	strb	r3, [r7, #15]
      break;
 8004e28:	e000      	b.n	8004e2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
	...

08004e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a34      	ldr	r2, [pc, #208]	; (8004f7c <TIM_Base_SetConfig+0xe4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00f      	beq.n	8004ed0 <TIM_Base_SetConfig+0x38>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb6:	d00b      	beq.n	8004ed0 <TIM_Base_SetConfig+0x38>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a31      	ldr	r2, [pc, #196]	; (8004f80 <TIM_Base_SetConfig+0xe8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d007      	beq.n	8004ed0 <TIM_Base_SetConfig+0x38>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a30      	ldr	r2, [pc, #192]	; (8004f84 <TIM_Base_SetConfig+0xec>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d003      	beq.n	8004ed0 <TIM_Base_SetConfig+0x38>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a2f      	ldr	r2, [pc, #188]	; (8004f88 <TIM_Base_SetConfig+0xf0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d108      	bne.n	8004ee2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a25      	ldr	r2, [pc, #148]	; (8004f7c <TIM_Base_SetConfig+0xe4>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d01b      	beq.n	8004f22 <TIM_Base_SetConfig+0x8a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef0:	d017      	beq.n	8004f22 <TIM_Base_SetConfig+0x8a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a22      	ldr	r2, [pc, #136]	; (8004f80 <TIM_Base_SetConfig+0xe8>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d013      	beq.n	8004f22 <TIM_Base_SetConfig+0x8a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a21      	ldr	r2, [pc, #132]	; (8004f84 <TIM_Base_SetConfig+0xec>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00f      	beq.n	8004f22 <TIM_Base_SetConfig+0x8a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a20      	ldr	r2, [pc, #128]	; (8004f88 <TIM_Base_SetConfig+0xf0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d00b      	beq.n	8004f22 <TIM_Base_SetConfig+0x8a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a1f      	ldr	r2, [pc, #124]	; (8004f8c <TIM_Base_SetConfig+0xf4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d007      	beq.n	8004f22 <TIM_Base_SetConfig+0x8a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a1e      	ldr	r2, [pc, #120]	; (8004f90 <TIM_Base_SetConfig+0xf8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d003      	beq.n	8004f22 <TIM_Base_SetConfig+0x8a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a1d      	ldr	r2, [pc, #116]	; (8004f94 <TIM_Base_SetConfig+0xfc>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d108      	bne.n	8004f34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a08      	ldr	r2, [pc, #32]	; (8004f7c <TIM_Base_SetConfig+0xe4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d103      	bne.n	8004f68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	691a      	ldr	r2, [r3, #16]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	615a      	str	r2, [r3, #20]
}
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40010000 	.word	0x40010000
 8004f80:	40000400 	.word	0x40000400
 8004f84:	40000800 	.word	0x40000800
 8004f88:	40000c00 	.word	0x40000c00
 8004f8c:	40014000 	.word	0x40014000
 8004f90:	40014400 	.word	0x40014400
 8004f94:	40014800 	.word	0x40014800

08004f98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	f023 0201 	bic.w	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0303 	bic.w	r3, r3, #3
 8004fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f023 0302 	bic.w	r3, r3, #2
 8004fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a1c      	ldr	r2, [pc, #112]	; (8005060 <TIM_OC1_SetConfig+0xc8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d10c      	bne.n	800500e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0308 	bic.w	r3, r3, #8
 8004ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f023 0304 	bic.w	r3, r3, #4
 800500c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a13      	ldr	r2, [pc, #76]	; (8005060 <TIM_OC1_SetConfig+0xc8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d111      	bne.n	800503a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800501c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	621a      	str	r2, [r3, #32]
}
 8005054:	bf00      	nop
 8005056:	371c      	adds	r7, #28
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	40010000 	.word	0x40010000

08005064 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	f023 0210 	bic.w	r2, r3, #16
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800509a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	021b      	lsls	r3, r3, #8
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f023 0320 	bic.w	r3, r3, #32
 80050ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a1e      	ldr	r2, [pc, #120]	; (8005138 <TIM_OC2_SetConfig+0xd4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d10d      	bne.n	80050e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a15      	ldr	r2, [pc, #84]	; (8005138 <TIM_OC2_SetConfig+0xd4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d113      	bne.n	8005110 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40010000 	.word	0x40010000

0800513c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 0303 	bic.w	r3, r3, #3
 8005172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	021b      	lsls	r3, r3, #8
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a1d      	ldr	r2, [pc, #116]	; (800520c <TIM_OC3_SetConfig+0xd0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d10d      	bne.n	80051b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	021b      	lsls	r3, r3, #8
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a14      	ldr	r2, [pc, #80]	; (800520c <TIM_OC3_SetConfig+0xd0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d113      	bne.n	80051e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	621a      	str	r2, [r3, #32]
}
 8005200:	bf00      	nop
 8005202:	371c      	adds	r7, #28
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	40010000 	.word	0x40010000

08005210 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800523e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	021b      	lsls	r3, r3, #8
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4313      	orrs	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800525a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	031b      	lsls	r3, r3, #12
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a10      	ldr	r2, [pc, #64]	; (80052ac <TIM_OC4_SetConfig+0x9c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d109      	bne.n	8005284 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005276:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	019b      	lsls	r3, r3, #6
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	4313      	orrs	r3, r2
 8005282:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40010000 	.word	0x40010000

080052b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	f023 0201 	bic.w	r2, r3, #1
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4a24      	ldr	r2, [pc, #144]	; (800536c <TIM_TI1_SetConfig+0xbc>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d013      	beq.n	8005306 <TIM_TI1_SetConfig+0x56>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e4:	d00f      	beq.n	8005306 <TIM_TI1_SetConfig+0x56>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4a21      	ldr	r2, [pc, #132]	; (8005370 <TIM_TI1_SetConfig+0xc0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d00b      	beq.n	8005306 <TIM_TI1_SetConfig+0x56>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4a20      	ldr	r2, [pc, #128]	; (8005374 <TIM_TI1_SetConfig+0xc4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d007      	beq.n	8005306 <TIM_TI1_SetConfig+0x56>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4a1f      	ldr	r2, [pc, #124]	; (8005378 <TIM_TI1_SetConfig+0xc8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d003      	beq.n	8005306 <TIM_TI1_SetConfig+0x56>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4a1e      	ldr	r2, [pc, #120]	; (800537c <TIM_TI1_SetConfig+0xcc>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d101      	bne.n	800530a <TIM_TI1_SetConfig+0x5a>
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <TIM_TI1_SetConfig+0x5c>
 800530a:	2300      	movs	r3, #0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d008      	beq.n	8005322 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f023 0303 	bic.w	r3, r3, #3
 8005316:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4313      	orrs	r3, r2
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	e003      	b.n	800532a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f043 0301 	orr.w	r3, r3, #1
 8005328:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005330:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	b2db      	uxtb	r3, r3
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	4313      	orrs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f023 030a 	bic.w	r3, r3, #10
 8005344:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f003 030a 	and.w	r3, r3, #10
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	4313      	orrs	r3, r2
 8005350:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	40010000 	.word	0x40010000
 8005370:	40000400 	.word	0x40000400
 8005374:	40000800 	.word	0x40000800
 8005378:	40000c00 	.word	0x40000c00
 800537c:	40014000 	.word	0x40014000

08005380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f023 0201 	bic.w	r2, r3, #1
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f023 030a 	bic.w	r3, r3, #10
 80053bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	621a      	str	r2, [r3, #32]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053de:	b480      	push	{r7}
 80053e0:	b087      	sub	sp, #28
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	607a      	str	r2, [r7, #4]
 80053ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	f023 0210 	bic.w	r2, r3, #16
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800540a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	021b      	lsls	r3, r3, #8
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800541c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	031b      	lsls	r3, r3, #12
 8005422:	b29b      	uxth	r3, r3
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005430:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	621a      	str	r2, [r3, #32]
}
 800544c:	bf00      	nop
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f023 0210 	bic.w	r2, r3, #16
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005482:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	031b      	lsls	r3, r3, #12
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005494:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	621a      	str	r2, [r3, #32]
}
 80054ac:	bf00      	nop
 80054ae:	371c      	adds	r7, #28
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f023 0303 	bic.w	r3, r3, #3
 80054e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005508:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	021b      	lsls	r3, r3, #8
 800550e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	621a      	str	r2, [r3, #32]
}
 8005524:	bf00      	nop
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800555c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	021b      	lsls	r3, r3, #8
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800556e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	031b      	lsls	r3, r3, #12
 8005574:	b29b      	uxth	r3, r3
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005582:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	031b      	lsls	r3, r3, #12
 8005588:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b085      	sub	sp, #20
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f043 0307 	orr.w	r3, r3, #7
 80055cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	609a      	str	r2, [r3, #8]
}
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	021a      	lsls	r2, r3, #8
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	431a      	orrs	r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4313      	orrs	r3, r2
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	609a      	str	r2, [r3, #8]
}
 8005614:	bf00      	nop
 8005616:	371c      	adds	r7, #28
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f003 031f 	and.w	r3, r3, #31
 8005632:	2201      	movs	r2, #1
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a1a      	ldr	r2, [r3, #32]
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	43db      	mvns	r3, r3
 8005642:	401a      	ands	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a1a      	ldr	r2, [r3, #32]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f003 031f 	and.w	r3, r3, #31
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	fa01 f303 	lsl.w	r3, r1, r3
 8005658:	431a      	orrs	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	621a      	str	r2, [r3, #32]
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
	...

0800566c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800567c:	2b01      	cmp	r3, #1
 800567e:	d101      	bne.n	8005684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005680:	2302      	movs	r3, #2
 8005682:	e050      	b.n	8005726 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a1c      	ldr	r2, [pc, #112]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d018      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d0:	d013      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a18      	ldr	r2, [pc, #96]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d00e      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a16      	ldr	r2, [pc, #88]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d009      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a15      	ldr	r2, [pc, #84]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d004      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a13      	ldr	r2, [pc, #76]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d10c      	bne.n	8005714 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005700:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	4313      	orrs	r3, r2
 800570a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	40010000 	.word	0x40010000
 8005738:	40000400 	.word	0x40000400
 800573c:	40000800 	.word	0x40000800
 8005740:	40000c00 	.word	0x40000c00
 8005744:	40014000 	.word	0x40014000

08005748 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800575c:	2b01      	cmp	r3, #1
 800575e:	d101      	bne.n	8005764 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005760:	2302      	movs	r3, #2
 8005762:	e03d      	b.n	80057e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <gcvt>:
 8005814:	b530      	push	{r4, r5, lr}
 8005816:	2200      	movs	r2, #0
 8005818:	b085      	sub	sp, #20
 800581a:	460c      	mov	r4, r1
 800581c:	4605      	mov	r5, r0
 800581e:	2300      	movs	r3, #0
 8005820:	ec51 0b10 	vmov	r0, r1, d0
 8005824:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005828:	f7fb f970 	bl	8000b0c <__aeabi_dcmplt>
 800582c:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005830:	4622      	mov	r2, r4
 8005832:	b118      	cbz	r0, 800583c <gcvt+0x28>
 8005834:	232d      	movs	r3, #45	; 0x2d
 8005836:	f802 3b01 	strb.w	r3, [r2], #1
 800583a:	3d01      	subs	r5, #1
 800583c:	2300      	movs	r3, #0
 800583e:	4806      	ldr	r0, [pc, #24]	; (8005858 <gcvt+0x44>)
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	4629      	mov	r1, r5
 8005844:	2367      	movs	r3, #103	; 0x67
 8005846:	6800      	ldr	r0, [r0, #0]
 8005848:	f000 f8b2 	bl	80059b0 <_gcvt>
 800584c:	2800      	cmp	r0, #0
 800584e:	bf14      	ite	ne
 8005850:	4620      	movne	r0, r4
 8005852:	2000      	moveq	r0, #0
 8005854:	b005      	add	sp, #20
 8005856:	bd30      	pop	{r4, r5, pc}
 8005858:	2000001c 	.word	0x2000001c

0800585c <__errno>:
 800585c:	4b01      	ldr	r3, [pc, #4]	; (8005864 <__errno+0x8>)
 800585e:	6818      	ldr	r0, [r3, #0]
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	2000001c 	.word	0x2000001c

08005868 <__libc_init_array>:
 8005868:	b570      	push	{r4, r5, r6, lr}
 800586a:	4d0d      	ldr	r5, [pc, #52]	; (80058a0 <__libc_init_array+0x38>)
 800586c:	4c0d      	ldr	r4, [pc, #52]	; (80058a4 <__libc_init_array+0x3c>)
 800586e:	1b64      	subs	r4, r4, r5
 8005870:	10a4      	asrs	r4, r4, #2
 8005872:	2600      	movs	r6, #0
 8005874:	42a6      	cmp	r6, r4
 8005876:	d109      	bne.n	800588c <__libc_init_array+0x24>
 8005878:	4d0b      	ldr	r5, [pc, #44]	; (80058a8 <__libc_init_array+0x40>)
 800587a:	4c0c      	ldr	r4, [pc, #48]	; (80058ac <__libc_init_array+0x44>)
 800587c:	f002 fb9c 	bl	8007fb8 <_init>
 8005880:	1b64      	subs	r4, r4, r5
 8005882:	10a4      	asrs	r4, r4, #2
 8005884:	2600      	movs	r6, #0
 8005886:	42a6      	cmp	r6, r4
 8005888:	d105      	bne.n	8005896 <__libc_init_array+0x2e>
 800588a:	bd70      	pop	{r4, r5, r6, pc}
 800588c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005890:	4798      	blx	r3
 8005892:	3601      	adds	r6, #1
 8005894:	e7ee      	b.n	8005874 <__libc_init_array+0xc>
 8005896:	f855 3b04 	ldr.w	r3, [r5], #4
 800589a:	4798      	blx	r3
 800589c:	3601      	adds	r6, #1
 800589e:	e7f2      	b.n	8005886 <__libc_init_array+0x1e>
 80058a0:	080082d8 	.word	0x080082d8
 80058a4:	080082d8 	.word	0x080082d8
 80058a8:	080082d8 	.word	0x080082d8
 80058ac:	080082dc 	.word	0x080082dc

080058b0 <memset>:
 80058b0:	4402      	add	r2, r0
 80058b2:	4603      	mov	r3, r0
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d100      	bne.n	80058ba <memset+0xa>
 80058b8:	4770      	bx	lr
 80058ba:	f803 1b01 	strb.w	r1, [r3], #1
 80058be:	e7f9      	b.n	80058b4 <memset+0x4>

080058c0 <print_e>:
 80058c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058c2:	b087      	sub	sp, #28
 80058c4:	ec43 2b10 	vmov	d0, r2, r3
 80058c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80058ca:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80058ce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80058d0:	ab04      	add	r3, sp, #16
 80058d2:	9301      	str	r3, [sp, #4]
 80058d4:	ab03      	add	r3, sp, #12
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	1c62      	adds	r2, r4, #1
 80058da:	ab05      	add	r3, sp, #20
 80058dc:	460f      	mov	r7, r1
 80058de:	2102      	movs	r1, #2
 80058e0:	f000 ffca 	bl	8006878 <_dtoa_r>
 80058e4:	9a05      	ldr	r2, [sp, #20]
 80058e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d105      	bne.n	80058fa <print_e+0x3a>
 80058ee:	4601      	mov	r1, r0
 80058f0:	4638      	mov	r0, r7
 80058f2:	f000 ff0d 	bl	8006710 <strcpy>
 80058f6:	b007      	add	sp, #28
 80058f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058fa:	463b      	mov	r3, r7
 80058fc:	7801      	ldrb	r1, [r0, #0]
 80058fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005902:	2c00      	cmp	r4, #0
 8005904:	bfc8      	it	gt
 8005906:	2501      	movgt	r5, #1
 8005908:	212e      	movs	r1, #46	; 0x2e
 800590a:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800590e:	b10f      	cbz	r7, 8005914 <print_e+0x54>
 8005910:	2c00      	cmp	r4, #0
 8005912:	dc37      	bgt.n	8005984 <print_e+0xc4>
 8005914:	2e67      	cmp	r6, #103	; 0x67
 8005916:	d046      	beq.n	80059a6 <print_e+0xe6>
 8005918:	2e47      	cmp	r6, #71	; 0x47
 800591a:	d046      	beq.n	80059aa <print_e+0xea>
 800591c:	212e      	movs	r1, #46	; 0x2e
 800591e:	2030      	movs	r0, #48	; 0x30
 8005920:	2c00      	cmp	r4, #0
 8005922:	dc38      	bgt.n	8005996 <print_e+0xd6>
 8005924:	1e51      	subs	r1, r2, #1
 8005926:	2900      	cmp	r1, #0
 8005928:	bfb8      	it	lt
 800592a:	f1c2 0201 	rsblt	r2, r2, #1
 800592e:	4618      	mov	r0, r3
 8005930:	9105      	str	r1, [sp, #20]
 8005932:	bfac      	ite	ge
 8005934:	222b      	movge	r2, #43	; 0x2b
 8005936:	9205      	strlt	r2, [sp, #20]
 8005938:	f800 6b02 	strb.w	r6, [r0], #2
 800593c:	bfa8      	it	ge
 800593e:	705a      	strbge	r2, [r3, #1]
 8005940:	9a05      	ldr	r2, [sp, #20]
 8005942:	bfbc      	itt	lt
 8005944:	212d      	movlt	r1, #45	; 0x2d
 8005946:	7059      	strblt	r1, [r3, #1]
 8005948:	2a63      	cmp	r2, #99	; 0x63
 800594a:	dd0b      	ble.n	8005964 <print_e+0xa4>
 800594c:	2164      	movs	r1, #100	; 0x64
 800594e:	fb92 f1f1 	sdiv	r1, r2, r1
 8005952:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8005956:	1cd8      	adds	r0, r3, #3
 8005958:	709c      	strb	r4, [r3, #2]
 800595a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800595e:	fb03 2201 	mla	r2, r3, r1, r2
 8005962:	9205      	str	r2, [sp, #20]
 8005964:	9b05      	ldr	r3, [sp, #20]
 8005966:	220a      	movs	r2, #10
 8005968:	fb93 f2f2 	sdiv	r2, r3, r2
 800596c:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8005970:	7001      	strb	r1, [r0, #0]
 8005972:	f06f 0109 	mvn.w	r1, #9
 8005976:	fb01 3302 	mla	r3, r1, r2, r3
 800597a:	3330      	adds	r3, #48	; 0x30
 800597c:	7043      	strb	r3, [r0, #1]
 800597e:	2300      	movs	r3, #0
 8005980:	7083      	strb	r3, [r0, #2]
 8005982:	e7b8      	b.n	80058f6 <print_e+0x36>
 8005984:	b10d      	cbz	r5, 800598a <print_e+0xca>
 8005986:	f803 1b01 	strb.w	r1, [r3], #1
 800598a:	7805      	ldrb	r5, [r0, #0]
 800598c:	f803 5b01 	strb.w	r5, [r3], #1
 8005990:	3c01      	subs	r4, #1
 8005992:	2500      	movs	r5, #0
 8005994:	e7b9      	b.n	800590a <print_e+0x4a>
 8005996:	b10d      	cbz	r5, 800599c <print_e+0xdc>
 8005998:	f803 1b01 	strb.w	r1, [r3], #1
 800599c:	f803 0b01 	strb.w	r0, [r3], #1
 80059a0:	3c01      	subs	r4, #1
 80059a2:	2500      	movs	r5, #0
 80059a4:	e7bc      	b.n	8005920 <print_e+0x60>
 80059a6:	2665      	movs	r6, #101	; 0x65
 80059a8:	e7bc      	b.n	8005924 <print_e+0x64>
 80059aa:	2645      	movs	r6, #69	; 0x45
 80059ac:	e7ba      	b.n	8005924 <print_e+0x64>
	...

080059b0 <_gcvt>:
 80059b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059b4:	ec55 4b10 	vmov	r4, r5, d0
 80059b8:	b088      	sub	sp, #32
 80059ba:	4681      	mov	r9, r0
 80059bc:	4688      	mov	r8, r1
 80059be:	4616      	mov	r6, r2
 80059c0:	469a      	mov	sl, r3
 80059c2:	ee10 0a10 	vmov	r0, s0
 80059c6:	2200      	movs	r2, #0
 80059c8:	2300      	movs	r3, #0
 80059ca:	4629      	mov	r1, r5
 80059cc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80059ce:	f7fb f89d 	bl	8000b0c <__aeabi_dcmplt>
 80059d2:	b110      	cbz	r0, 80059da <_gcvt+0x2a>
 80059d4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80059d8:	461d      	mov	r5, r3
 80059da:	2200      	movs	r2, #0
 80059dc:	2300      	movs	r3, #0
 80059de:	4620      	mov	r0, r4
 80059e0:	4629      	mov	r1, r5
 80059e2:	f7fb f889 	bl	8000af8 <__aeabi_dcmpeq>
 80059e6:	b138      	cbz	r0, 80059f8 <_gcvt+0x48>
 80059e8:	2330      	movs	r3, #48	; 0x30
 80059ea:	7033      	strb	r3, [r6, #0]
 80059ec:	2300      	movs	r3, #0
 80059ee:	7073      	strb	r3, [r6, #1]
 80059f0:	4630      	mov	r0, r6
 80059f2:	b008      	add	sp, #32
 80059f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f8:	a34b      	add	r3, pc, #300	; (adr r3, 8005b28 <_gcvt+0x178>)
 80059fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fe:	4620      	mov	r0, r4
 8005a00:	4629      	mov	r1, r5
 8005a02:	f7fb f88d 	bl	8000b20 <__aeabi_dcmple>
 8005a06:	b158      	cbz	r0, 8005a20 <_gcvt+0x70>
 8005a08:	f108 31ff 	add.w	r1, r8, #4294967295
 8005a0c:	9100      	str	r1, [sp, #0]
 8005a0e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8005a12:	4622      	mov	r2, r4
 8005a14:	462b      	mov	r3, r5
 8005a16:	4631      	mov	r1, r6
 8005a18:	4648      	mov	r0, r9
 8005a1a:	f7ff ff51 	bl	80058c0 <print_e>
 8005a1e:	e7e7      	b.n	80059f0 <_gcvt+0x40>
 8005a20:	4640      	mov	r0, r8
 8005a22:	f000 fc09 	bl	8006238 <_mprec_log10>
 8005a26:	4622      	mov	r2, r4
 8005a28:	ec51 0b10 	vmov	r0, r1, d0
 8005a2c:	462b      	mov	r3, r5
 8005a2e:	f7fb f877 	bl	8000b20 <__aeabi_dcmple>
 8005a32:	2800      	cmp	r0, #0
 8005a34:	d1e8      	bne.n	8005a08 <_gcvt+0x58>
 8005a36:	ab07      	add	r3, sp, #28
 8005a38:	9301      	str	r3, [sp, #4]
 8005a3a:	ab06      	add	r3, sp, #24
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	4642      	mov	r2, r8
 8005a40:	ab05      	add	r3, sp, #20
 8005a42:	ec45 4b10 	vmov	d0, r4, r5
 8005a46:	2102      	movs	r1, #2
 8005a48:	4648      	mov	r0, r9
 8005a4a:	f000 ff15 	bl	8006878 <_dtoa_r>
 8005a4e:	9a05      	ldr	r2, [sp, #20]
 8005a50:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d00e      	beq.n	8005a76 <_gcvt+0xc6>
 8005a58:	4633      	mov	r3, r6
 8005a5a:	44b0      	add	r8, r6
 8005a5c:	4605      	mov	r5, r0
 8005a5e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005a62:	9c05      	ldr	r4, [sp, #20]
 8005a64:	eba8 0203 	sub.w	r2, r8, r3
 8005a68:	b109      	cbz	r1, 8005a6e <_gcvt+0xbe>
 8005a6a:	2c00      	cmp	r4, #0
 8005a6c:	dc08      	bgt.n	8005a80 <_gcvt+0xd0>
 8005a6e:	2100      	movs	r1, #0
 8005a70:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8005a74:	e00d      	b.n	8005a92 <_gcvt+0xe2>
 8005a76:	4601      	mov	r1, r0
 8005a78:	4630      	mov	r0, r6
 8005a7a:	f000 fe49 	bl	8006710 <strcpy>
 8005a7e:	e7b7      	b.n	80059f0 <_gcvt+0x40>
 8005a80:	3c01      	subs	r4, #1
 8005a82:	f803 1b01 	strb.w	r1, [r3], #1
 8005a86:	9405      	str	r4, [sp, #20]
 8005a88:	e7e8      	b.n	8005a5c <_gcvt+0xac>
 8005a8a:	f803 cb01 	strb.w	ip, [r3], #1
 8005a8e:	3a01      	subs	r2, #1
 8005a90:	2101      	movs	r1, #1
 8005a92:	2c00      	cmp	r4, #0
 8005a94:	4620      	mov	r0, r4
 8005a96:	dc2a      	bgt.n	8005aee <_gcvt+0x13e>
 8005a98:	b101      	cbz	r1, 8005a9c <_gcvt+0xec>
 8005a9a:	9405      	str	r4, [sp, #20]
 8005a9c:	b90f      	cbnz	r7, 8005aa2 <_gcvt+0xf2>
 8005a9e:	7829      	ldrb	r1, [r5, #0]
 8005aa0:	b311      	cbz	r1, 8005ae8 <_gcvt+0x138>
 8005aa2:	42b3      	cmp	r3, r6
 8005aa4:	bf04      	itt	eq
 8005aa6:	2130      	moveq	r1, #48	; 0x30
 8005aa8:	f803 1b01 	strbeq.w	r1, [r3], #1
 8005aac:	212e      	movs	r1, #46	; 0x2e
 8005aae:	7019      	strb	r1, [r3, #0]
 8005ab0:	9905      	ldr	r1, [sp, #20]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	2400      	movs	r4, #0
 8005ab6:	eba1 0c03 	sub.w	ip, r1, r3
 8005aba:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8005abe:	eb1c 0f00 	cmn.w	ip, r0
 8005ac2:	d41c      	bmi.n	8005afe <_gcvt+0x14e>
 8005ac4:	2900      	cmp	r1, #0
 8005ac6:	f1c1 0000 	rsb	r0, r1, #0
 8005aca:	bfc8      	it	gt
 8005acc:	2000      	movgt	r0, #0
 8005ace:	f100 0c01 	add.w	ip, r0, #1
 8005ad2:	4463      	add	r3, ip
 8005ad4:	4401      	add	r1, r0
 8005ad6:	b104      	cbz	r4, 8005ada <_gcvt+0x12a>
 8005ad8:	9105      	str	r1, [sp, #20]
 8005ada:	1e69      	subs	r1, r5, #1
 8005adc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005ae0:	b108      	cbz	r0, 8005ae6 <_gcvt+0x136>
 8005ae2:	2a00      	cmp	r2, #0
 8005ae4:	dc0f      	bgt.n	8005b06 <_gcvt+0x156>
 8005ae6:	b9df      	cbnz	r7, 8005b20 <_gcvt+0x170>
 8005ae8:	2200      	movs	r2, #0
 8005aea:	701a      	strb	r2, [r3, #0]
 8005aec:	e780      	b.n	80059f0 <_gcvt+0x40>
 8005aee:	2a00      	cmp	r2, #0
 8005af0:	f104 34ff 	add.w	r4, r4, #4294967295
 8005af4:	dcc9      	bgt.n	8005a8a <_gcvt+0xda>
 8005af6:	2900      	cmp	r1, #0
 8005af8:	d0d0      	beq.n	8005a9c <_gcvt+0xec>
 8005afa:	9005      	str	r0, [sp, #20]
 8005afc:	e7ce      	b.n	8005a9c <_gcvt+0xec>
 8005afe:	f800 ef01 	strb.w	lr, [r0, #1]!
 8005b02:	2401      	movs	r4, #1
 8005b04:	e7db      	b.n	8005abe <_gcvt+0x10e>
 8005b06:	f803 0b01 	strb.w	r0, [r3], #1
 8005b0a:	3a01      	subs	r2, #1
 8005b0c:	e7e6      	b.n	8005adc <_gcvt+0x12c>
 8005b0e:	f801 5b01 	strb.w	r5, [r1], #1
 8005b12:	1a60      	subs	r0, r4, r1
 8005b14:	2800      	cmp	r0, #0
 8005b16:	dcfa      	bgt.n	8005b0e <_gcvt+0x15e>
 8005b18:	2a00      	cmp	r2, #0
 8005b1a:	bfa8      	it	ge
 8005b1c:	189b      	addge	r3, r3, r2
 8005b1e:	e7e3      	b.n	8005ae8 <_gcvt+0x138>
 8005b20:	4619      	mov	r1, r3
 8005b22:	189c      	adds	r4, r3, r2
 8005b24:	2530      	movs	r5, #48	; 0x30
 8005b26:	e7f4      	b.n	8005b12 <_gcvt+0x162>
 8005b28:	eb1c432d 	.word	0xeb1c432d
 8005b2c:	3f1a36e2 	.word	0x3f1a36e2

08005b30 <_Balloc>:
 8005b30:	b570      	push	{r4, r5, r6, lr}
 8005b32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b34:	4604      	mov	r4, r0
 8005b36:	460d      	mov	r5, r1
 8005b38:	b976      	cbnz	r6, 8005b58 <_Balloc+0x28>
 8005b3a:	2010      	movs	r0, #16
 8005b3c:	f001 fc9c 	bl	8007478 <malloc>
 8005b40:	4602      	mov	r2, r0
 8005b42:	6260      	str	r0, [r4, #36]	; 0x24
 8005b44:	b920      	cbnz	r0, 8005b50 <_Balloc+0x20>
 8005b46:	4b18      	ldr	r3, [pc, #96]	; (8005ba8 <_Balloc+0x78>)
 8005b48:	4818      	ldr	r0, [pc, #96]	; (8005bac <_Balloc+0x7c>)
 8005b4a:	2166      	movs	r1, #102	; 0x66
 8005b4c:	f000 fde8 	bl	8006720 <__assert_func>
 8005b50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b54:	6006      	str	r6, [r0, #0]
 8005b56:	60c6      	str	r6, [r0, #12]
 8005b58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005b5a:	68f3      	ldr	r3, [r6, #12]
 8005b5c:	b183      	cbz	r3, 8005b80 <_Balloc+0x50>
 8005b5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b66:	b9b8      	cbnz	r0, 8005b98 <_Balloc+0x68>
 8005b68:	2101      	movs	r1, #1
 8005b6a:	fa01 f605 	lsl.w	r6, r1, r5
 8005b6e:	1d72      	adds	r2, r6, #5
 8005b70:	0092      	lsls	r2, r2, #2
 8005b72:	4620      	mov	r0, r4
 8005b74:	f000 fb7e 	bl	8006274 <_calloc_r>
 8005b78:	b160      	cbz	r0, 8005b94 <_Balloc+0x64>
 8005b7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005b7e:	e00e      	b.n	8005b9e <_Balloc+0x6e>
 8005b80:	2221      	movs	r2, #33	; 0x21
 8005b82:	2104      	movs	r1, #4
 8005b84:	4620      	mov	r0, r4
 8005b86:	f000 fb75 	bl	8006274 <_calloc_r>
 8005b8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b8c:	60f0      	str	r0, [r6, #12]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1e4      	bne.n	8005b5e <_Balloc+0x2e>
 8005b94:	2000      	movs	r0, #0
 8005b96:	bd70      	pop	{r4, r5, r6, pc}
 8005b98:	6802      	ldr	r2, [r0, #0]
 8005b9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ba4:	e7f7      	b.n	8005b96 <_Balloc+0x66>
 8005ba6:	bf00      	nop
 8005ba8:	08008014 	.word	0x08008014
 8005bac:	0800802b 	.word	0x0800802b

08005bb0 <_Bfree>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	b976      	cbnz	r6, 8005bd8 <_Bfree+0x28>
 8005bba:	2010      	movs	r0, #16
 8005bbc:	f001 fc5c 	bl	8007478 <malloc>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	6268      	str	r0, [r5, #36]	; 0x24
 8005bc4:	b920      	cbnz	r0, 8005bd0 <_Bfree+0x20>
 8005bc6:	4b09      	ldr	r3, [pc, #36]	; (8005bec <_Bfree+0x3c>)
 8005bc8:	4809      	ldr	r0, [pc, #36]	; (8005bf0 <_Bfree+0x40>)
 8005bca:	218a      	movs	r1, #138	; 0x8a
 8005bcc:	f000 fda8 	bl	8006720 <__assert_func>
 8005bd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005bd4:	6006      	str	r6, [r0, #0]
 8005bd6:	60c6      	str	r6, [r0, #12]
 8005bd8:	b13c      	cbz	r4, 8005bea <_Bfree+0x3a>
 8005bda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005bdc:	6862      	ldr	r2, [r4, #4]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005be4:	6021      	str	r1, [r4, #0]
 8005be6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
 8005bec:	08008014 	.word	0x08008014
 8005bf0:	0800802b 	.word	0x0800802b

08005bf4 <__multadd>:
 8005bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf8:	690d      	ldr	r5, [r1, #16]
 8005bfa:	4607      	mov	r7, r0
 8005bfc:	460c      	mov	r4, r1
 8005bfe:	461e      	mov	r6, r3
 8005c00:	f101 0c14 	add.w	ip, r1, #20
 8005c04:	2000      	movs	r0, #0
 8005c06:	f8dc 3000 	ldr.w	r3, [ip]
 8005c0a:	b299      	uxth	r1, r3
 8005c0c:	fb02 6101 	mla	r1, r2, r1, r6
 8005c10:	0c1e      	lsrs	r6, r3, #16
 8005c12:	0c0b      	lsrs	r3, r1, #16
 8005c14:	fb02 3306 	mla	r3, r2, r6, r3
 8005c18:	b289      	uxth	r1, r1
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005c20:	4285      	cmp	r5, r0
 8005c22:	f84c 1b04 	str.w	r1, [ip], #4
 8005c26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005c2a:	dcec      	bgt.n	8005c06 <__multadd+0x12>
 8005c2c:	b30e      	cbz	r6, 8005c72 <__multadd+0x7e>
 8005c2e:	68a3      	ldr	r3, [r4, #8]
 8005c30:	42ab      	cmp	r3, r5
 8005c32:	dc19      	bgt.n	8005c68 <__multadd+0x74>
 8005c34:	6861      	ldr	r1, [r4, #4]
 8005c36:	4638      	mov	r0, r7
 8005c38:	3101      	adds	r1, #1
 8005c3a:	f7ff ff79 	bl	8005b30 <_Balloc>
 8005c3e:	4680      	mov	r8, r0
 8005c40:	b928      	cbnz	r0, 8005c4e <__multadd+0x5a>
 8005c42:	4602      	mov	r2, r0
 8005c44:	4b0c      	ldr	r3, [pc, #48]	; (8005c78 <__multadd+0x84>)
 8005c46:	480d      	ldr	r0, [pc, #52]	; (8005c7c <__multadd+0x88>)
 8005c48:	21b5      	movs	r1, #181	; 0xb5
 8005c4a:	f000 fd69 	bl	8006720 <__assert_func>
 8005c4e:	6922      	ldr	r2, [r4, #16]
 8005c50:	3202      	adds	r2, #2
 8005c52:	f104 010c 	add.w	r1, r4, #12
 8005c56:	0092      	lsls	r2, r2, #2
 8005c58:	300c      	adds	r0, #12
 8005c5a:	f001 fc15 	bl	8007488 <memcpy>
 8005c5e:	4621      	mov	r1, r4
 8005c60:	4638      	mov	r0, r7
 8005c62:	f7ff ffa5 	bl	8005bb0 <_Bfree>
 8005c66:	4644      	mov	r4, r8
 8005c68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005c6c:	3501      	adds	r5, #1
 8005c6e:	615e      	str	r6, [r3, #20]
 8005c70:	6125      	str	r5, [r4, #16]
 8005c72:	4620      	mov	r0, r4
 8005c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c78:	08008087 	.word	0x08008087
 8005c7c:	0800802b 	.word	0x0800802b

08005c80 <__hi0bits>:
 8005c80:	0c03      	lsrs	r3, r0, #16
 8005c82:	041b      	lsls	r3, r3, #16
 8005c84:	b9d3      	cbnz	r3, 8005cbc <__hi0bits+0x3c>
 8005c86:	0400      	lsls	r0, r0, #16
 8005c88:	2310      	movs	r3, #16
 8005c8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005c8e:	bf04      	itt	eq
 8005c90:	0200      	lsleq	r0, r0, #8
 8005c92:	3308      	addeq	r3, #8
 8005c94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005c98:	bf04      	itt	eq
 8005c9a:	0100      	lsleq	r0, r0, #4
 8005c9c:	3304      	addeq	r3, #4
 8005c9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005ca2:	bf04      	itt	eq
 8005ca4:	0080      	lsleq	r0, r0, #2
 8005ca6:	3302      	addeq	r3, #2
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	db05      	blt.n	8005cb8 <__hi0bits+0x38>
 8005cac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005cb0:	f103 0301 	add.w	r3, r3, #1
 8005cb4:	bf08      	it	eq
 8005cb6:	2320      	moveq	r3, #32
 8005cb8:	4618      	mov	r0, r3
 8005cba:	4770      	bx	lr
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	e7e4      	b.n	8005c8a <__hi0bits+0xa>

08005cc0 <__lo0bits>:
 8005cc0:	6803      	ldr	r3, [r0, #0]
 8005cc2:	f013 0207 	ands.w	r2, r3, #7
 8005cc6:	4601      	mov	r1, r0
 8005cc8:	d00b      	beq.n	8005ce2 <__lo0bits+0x22>
 8005cca:	07da      	lsls	r2, r3, #31
 8005ccc:	d423      	bmi.n	8005d16 <__lo0bits+0x56>
 8005cce:	0798      	lsls	r0, r3, #30
 8005cd0:	bf49      	itett	mi
 8005cd2:	085b      	lsrmi	r3, r3, #1
 8005cd4:	089b      	lsrpl	r3, r3, #2
 8005cd6:	2001      	movmi	r0, #1
 8005cd8:	600b      	strmi	r3, [r1, #0]
 8005cda:	bf5c      	itt	pl
 8005cdc:	600b      	strpl	r3, [r1, #0]
 8005cde:	2002      	movpl	r0, #2
 8005ce0:	4770      	bx	lr
 8005ce2:	b298      	uxth	r0, r3
 8005ce4:	b9a8      	cbnz	r0, 8005d12 <__lo0bits+0x52>
 8005ce6:	0c1b      	lsrs	r3, r3, #16
 8005ce8:	2010      	movs	r0, #16
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	b90a      	cbnz	r2, 8005cf2 <__lo0bits+0x32>
 8005cee:	3008      	adds	r0, #8
 8005cf0:	0a1b      	lsrs	r3, r3, #8
 8005cf2:	071a      	lsls	r2, r3, #28
 8005cf4:	bf04      	itt	eq
 8005cf6:	091b      	lsreq	r3, r3, #4
 8005cf8:	3004      	addeq	r0, #4
 8005cfa:	079a      	lsls	r2, r3, #30
 8005cfc:	bf04      	itt	eq
 8005cfe:	089b      	lsreq	r3, r3, #2
 8005d00:	3002      	addeq	r0, #2
 8005d02:	07da      	lsls	r2, r3, #31
 8005d04:	d403      	bmi.n	8005d0e <__lo0bits+0x4e>
 8005d06:	085b      	lsrs	r3, r3, #1
 8005d08:	f100 0001 	add.w	r0, r0, #1
 8005d0c:	d005      	beq.n	8005d1a <__lo0bits+0x5a>
 8005d0e:	600b      	str	r3, [r1, #0]
 8005d10:	4770      	bx	lr
 8005d12:	4610      	mov	r0, r2
 8005d14:	e7e9      	b.n	8005cea <__lo0bits+0x2a>
 8005d16:	2000      	movs	r0, #0
 8005d18:	4770      	bx	lr
 8005d1a:	2020      	movs	r0, #32
 8005d1c:	4770      	bx	lr
	...

08005d20 <__i2b>:
 8005d20:	b510      	push	{r4, lr}
 8005d22:	460c      	mov	r4, r1
 8005d24:	2101      	movs	r1, #1
 8005d26:	f7ff ff03 	bl	8005b30 <_Balloc>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	b928      	cbnz	r0, 8005d3a <__i2b+0x1a>
 8005d2e:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <__i2b+0x24>)
 8005d30:	4805      	ldr	r0, [pc, #20]	; (8005d48 <__i2b+0x28>)
 8005d32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005d36:	f000 fcf3 	bl	8006720 <__assert_func>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	6144      	str	r4, [r0, #20]
 8005d3e:	6103      	str	r3, [r0, #16]
 8005d40:	bd10      	pop	{r4, pc}
 8005d42:	bf00      	nop
 8005d44:	08008087 	.word	0x08008087
 8005d48:	0800802b 	.word	0x0800802b

08005d4c <__multiply>:
 8005d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d50:	4691      	mov	r9, r2
 8005d52:	690a      	ldr	r2, [r1, #16]
 8005d54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	bfb8      	it	lt
 8005d5c:	460b      	movlt	r3, r1
 8005d5e:	460c      	mov	r4, r1
 8005d60:	bfbc      	itt	lt
 8005d62:	464c      	movlt	r4, r9
 8005d64:	4699      	movlt	r9, r3
 8005d66:	6927      	ldr	r7, [r4, #16]
 8005d68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005d6c:	68a3      	ldr	r3, [r4, #8]
 8005d6e:	6861      	ldr	r1, [r4, #4]
 8005d70:	eb07 060a 	add.w	r6, r7, sl
 8005d74:	42b3      	cmp	r3, r6
 8005d76:	b085      	sub	sp, #20
 8005d78:	bfb8      	it	lt
 8005d7a:	3101      	addlt	r1, #1
 8005d7c:	f7ff fed8 	bl	8005b30 <_Balloc>
 8005d80:	b930      	cbnz	r0, 8005d90 <__multiply+0x44>
 8005d82:	4602      	mov	r2, r0
 8005d84:	4b44      	ldr	r3, [pc, #272]	; (8005e98 <__multiply+0x14c>)
 8005d86:	4845      	ldr	r0, [pc, #276]	; (8005e9c <__multiply+0x150>)
 8005d88:	f240 115d 	movw	r1, #349	; 0x15d
 8005d8c:	f000 fcc8 	bl	8006720 <__assert_func>
 8005d90:	f100 0514 	add.w	r5, r0, #20
 8005d94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005d98:	462b      	mov	r3, r5
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	4543      	cmp	r3, r8
 8005d9e:	d321      	bcc.n	8005de4 <__multiply+0x98>
 8005da0:	f104 0314 	add.w	r3, r4, #20
 8005da4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005da8:	f109 0314 	add.w	r3, r9, #20
 8005dac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005db0:	9202      	str	r2, [sp, #8]
 8005db2:	1b3a      	subs	r2, r7, r4
 8005db4:	3a15      	subs	r2, #21
 8005db6:	f022 0203 	bic.w	r2, r2, #3
 8005dba:	3204      	adds	r2, #4
 8005dbc:	f104 0115 	add.w	r1, r4, #21
 8005dc0:	428f      	cmp	r7, r1
 8005dc2:	bf38      	it	cc
 8005dc4:	2204      	movcc	r2, #4
 8005dc6:	9201      	str	r2, [sp, #4]
 8005dc8:	9a02      	ldr	r2, [sp, #8]
 8005dca:	9303      	str	r3, [sp, #12]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d80c      	bhi.n	8005dea <__multiply+0x9e>
 8005dd0:	2e00      	cmp	r6, #0
 8005dd2:	dd03      	ble.n	8005ddc <__multiply+0x90>
 8005dd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d05a      	beq.n	8005e92 <__multiply+0x146>
 8005ddc:	6106      	str	r6, [r0, #16]
 8005dde:	b005      	add	sp, #20
 8005de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de4:	f843 2b04 	str.w	r2, [r3], #4
 8005de8:	e7d8      	b.n	8005d9c <__multiply+0x50>
 8005dea:	f8b3 a000 	ldrh.w	sl, [r3]
 8005dee:	f1ba 0f00 	cmp.w	sl, #0
 8005df2:	d024      	beq.n	8005e3e <__multiply+0xf2>
 8005df4:	f104 0e14 	add.w	lr, r4, #20
 8005df8:	46a9      	mov	r9, r5
 8005dfa:	f04f 0c00 	mov.w	ip, #0
 8005dfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005e02:	f8d9 1000 	ldr.w	r1, [r9]
 8005e06:	fa1f fb82 	uxth.w	fp, r2
 8005e0a:	b289      	uxth	r1, r1
 8005e0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005e10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005e14:	f8d9 2000 	ldr.w	r2, [r9]
 8005e18:	4461      	add	r1, ip
 8005e1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005e1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005e22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005e26:	b289      	uxth	r1, r1
 8005e28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005e2c:	4577      	cmp	r7, lr
 8005e2e:	f849 1b04 	str.w	r1, [r9], #4
 8005e32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005e36:	d8e2      	bhi.n	8005dfe <__multiply+0xb2>
 8005e38:	9a01      	ldr	r2, [sp, #4]
 8005e3a:	f845 c002 	str.w	ip, [r5, r2]
 8005e3e:	9a03      	ldr	r2, [sp, #12]
 8005e40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005e44:	3304      	adds	r3, #4
 8005e46:	f1b9 0f00 	cmp.w	r9, #0
 8005e4a:	d020      	beq.n	8005e8e <__multiply+0x142>
 8005e4c:	6829      	ldr	r1, [r5, #0]
 8005e4e:	f104 0c14 	add.w	ip, r4, #20
 8005e52:	46ae      	mov	lr, r5
 8005e54:	f04f 0a00 	mov.w	sl, #0
 8005e58:	f8bc b000 	ldrh.w	fp, [ip]
 8005e5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005e60:	fb09 220b 	mla	r2, r9, fp, r2
 8005e64:	4492      	add	sl, r2
 8005e66:	b289      	uxth	r1, r1
 8005e68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005e6c:	f84e 1b04 	str.w	r1, [lr], #4
 8005e70:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005e74:	f8be 1000 	ldrh.w	r1, [lr]
 8005e78:	0c12      	lsrs	r2, r2, #16
 8005e7a:	fb09 1102 	mla	r1, r9, r2, r1
 8005e7e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005e82:	4567      	cmp	r7, ip
 8005e84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005e88:	d8e6      	bhi.n	8005e58 <__multiply+0x10c>
 8005e8a:	9a01      	ldr	r2, [sp, #4]
 8005e8c:	50a9      	str	r1, [r5, r2]
 8005e8e:	3504      	adds	r5, #4
 8005e90:	e79a      	b.n	8005dc8 <__multiply+0x7c>
 8005e92:	3e01      	subs	r6, #1
 8005e94:	e79c      	b.n	8005dd0 <__multiply+0x84>
 8005e96:	bf00      	nop
 8005e98:	08008087 	.word	0x08008087
 8005e9c:	0800802b 	.word	0x0800802b

08005ea0 <__pow5mult>:
 8005ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ea4:	4615      	mov	r5, r2
 8005ea6:	f012 0203 	ands.w	r2, r2, #3
 8005eaa:	4606      	mov	r6, r0
 8005eac:	460f      	mov	r7, r1
 8005eae:	d007      	beq.n	8005ec0 <__pow5mult+0x20>
 8005eb0:	4c25      	ldr	r4, [pc, #148]	; (8005f48 <__pow5mult+0xa8>)
 8005eb2:	3a01      	subs	r2, #1
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005eba:	f7ff fe9b 	bl	8005bf4 <__multadd>
 8005ebe:	4607      	mov	r7, r0
 8005ec0:	10ad      	asrs	r5, r5, #2
 8005ec2:	d03d      	beq.n	8005f40 <__pow5mult+0xa0>
 8005ec4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005ec6:	b97c      	cbnz	r4, 8005ee8 <__pow5mult+0x48>
 8005ec8:	2010      	movs	r0, #16
 8005eca:	f001 fad5 	bl	8007478 <malloc>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	6270      	str	r0, [r6, #36]	; 0x24
 8005ed2:	b928      	cbnz	r0, 8005ee0 <__pow5mult+0x40>
 8005ed4:	4b1d      	ldr	r3, [pc, #116]	; (8005f4c <__pow5mult+0xac>)
 8005ed6:	481e      	ldr	r0, [pc, #120]	; (8005f50 <__pow5mult+0xb0>)
 8005ed8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005edc:	f000 fc20 	bl	8006720 <__assert_func>
 8005ee0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ee4:	6004      	str	r4, [r0, #0]
 8005ee6:	60c4      	str	r4, [r0, #12]
 8005ee8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005eec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ef0:	b94c      	cbnz	r4, 8005f06 <__pow5mult+0x66>
 8005ef2:	f240 2171 	movw	r1, #625	; 0x271
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	f7ff ff12 	bl	8005d20 <__i2b>
 8005efc:	2300      	movs	r3, #0
 8005efe:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f02:	4604      	mov	r4, r0
 8005f04:	6003      	str	r3, [r0, #0]
 8005f06:	f04f 0900 	mov.w	r9, #0
 8005f0a:	07eb      	lsls	r3, r5, #31
 8005f0c:	d50a      	bpl.n	8005f24 <__pow5mult+0x84>
 8005f0e:	4639      	mov	r1, r7
 8005f10:	4622      	mov	r2, r4
 8005f12:	4630      	mov	r0, r6
 8005f14:	f7ff ff1a 	bl	8005d4c <__multiply>
 8005f18:	4639      	mov	r1, r7
 8005f1a:	4680      	mov	r8, r0
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	f7ff fe47 	bl	8005bb0 <_Bfree>
 8005f22:	4647      	mov	r7, r8
 8005f24:	106d      	asrs	r5, r5, #1
 8005f26:	d00b      	beq.n	8005f40 <__pow5mult+0xa0>
 8005f28:	6820      	ldr	r0, [r4, #0]
 8005f2a:	b938      	cbnz	r0, 8005f3c <__pow5mult+0x9c>
 8005f2c:	4622      	mov	r2, r4
 8005f2e:	4621      	mov	r1, r4
 8005f30:	4630      	mov	r0, r6
 8005f32:	f7ff ff0b 	bl	8005d4c <__multiply>
 8005f36:	6020      	str	r0, [r4, #0]
 8005f38:	f8c0 9000 	str.w	r9, [r0]
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	e7e4      	b.n	8005f0a <__pow5mult+0x6a>
 8005f40:	4638      	mov	r0, r7
 8005f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f46:	bf00      	nop
 8005f48:	08008188 	.word	0x08008188
 8005f4c:	08008014 	.word	0x08008014
 8005f50:	0800802b 	.word	0x0800802b

08005f54 <__lshift>:
 8005f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f58:	460c      	mov	r4, r1
 8005f5a:	6849      	ldr	r1, [r1, #4]
 8005f5c:	6923      	ldr	r3, [r4, #16]
 8005f5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f62:	68a3      	ldr	r3, [r4, #8]
 8005f64:	4607      	mov	r7, r0
 8005f66:	4691      	mov	r9, r2
 8005f68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f6c:	f108 0601 	add.w	r6, r8, #1
 8005f70:	42b3      	cmp	r3, r6
 8005f72:	db0b      	blt.n	8005f8c <__lshift+0x38>
 8005f74:	4638      	mov	r0, r7
 8005f76:	f7ff fddb 	bl	8005b30 <_Balloc>
 8005f7a:	4605      	mov	r5, r0
 8005f7c:	b948      	cbnz	r0, 8005f92 <__lshift+0x3e>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	4b2a      	ldr	r3, [pc, #168]	; (800602c <__lshift+0xd8>)
 8005f82:	482b      	ldr	r0, [pc, #172]	; (8006030 <__lshift+0xdc>)
 8005f84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005f88:	f000 fbca 	bl	8006720 <__assert_func>
 8005f8c:	3101      	adds	r1, #1
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	e7ee      	b.n	8005f70 <__lshift+0x1c>
 8005f92:	2300      	movs	r3, #0
 8005f94:	f100 0114 	add.w	r1, r0, #20
 8005f98:	f100 0210 	add.w	r2, r0, #16
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	4553      	cmp	r3, sl
 8005fa0:	db37      	blt.n	8006012 <__lshift+0xbe>
 8005fa2:	6920      	ldr	r0, [r4, #16]
 8005fa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005fa8:	f104 0314 	add.w	r3, r4, #20
 8005fac:	f019 091f 	ands.w	r9, r9, #31
 8005fb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005fb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005fb8:	d02f      	beq.n	800601a <__lshift+0xc6>
 8005fba:	f1c9 0e20 	rsb	lr, r9, #32
 8005fbe:	468a      	mov	sl, r1
 8005fc0:	f04f 0c00 	mov.w	ip, #0
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	fa02 f209 	lsl.w	r2, r2, r9
 8005fca:	ea42 020c 	orr.w	r2, r2, ip
 8005fce:	f84a 2b04 	str.w	r2, [sl], #4
 8005fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fd6:	4298      	cmp	r0, r3
 8005fd8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005fdc:	d8f2      	bhi.n	8005fc4 <__lshift+0x70>
 8005fde:	1b03      	subs	r3, r0, r4
 8005fe0:	3b15      	subs	r3, #21
 8005fe2:	f023 0303 	bic.w	r3, r3, #3
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	f104 0215 	add.w	r2, r4, #21
 8005fec:	4290      	cmp	r0, r2
 8005fee:	bf38      	it	cc
 8005ff0:	2304      	movcc	r3, #4
 8005ff2:	f841 c003 	str.w	ip, [r1, r3]
 8005ff6:	f1bc 0f00 	cmp.w	ip, #0
 8005ffa:	d001      	beq.n	8006000 <__lshift+0xac>
 8005ffc:	f108 0602 	add.w	r6, r8, #2
 8006000:	3e01      	subs	r6, #1
 8006002:	4638      	mov	r0, r7
 8006004:	612e      	str	r6, [r5, #16]
 8006006:	4621      	mov	r1, r4
 8006008:	f7ff fdd2 	bl	8005bb0 <_Bfree>
 800600c:	4628      	mov	r0, r5
 800600e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006012:	f842 0f04 	str.w	r0, [r2, #4]!
 8006016:	3301      	adds	r3, #1
 8006018:	e7c1      	b.n	8005f9e <__lshift+0x4a>
 800601a:	3904      	subs	r1, #4
 800601c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006020:	f841 2f04 	str.w	r2, [r1, #4]!
 8006024:	4298      	cmp	r0, r3
 8006026:	d8f9      	bhi.n	800601c <__lshift+0xc8>
 8006028:	e7ea      	b.n	8006000 <__lshift+0xac>
 800602a:	bf00      	nop
 800602c:	08008087 	.word	0x08008087
 8006030:	0800802b 	.word	0x0800802b

08006034 <__mcmp>:
 8006034:	b530      	push	{r4, r5, lr}
 8006036:	6902      	ldr	r2, [r0, #16]
 8006038:	690c      	ldr	r4, [r1, #16]
 800603a:	1b12      	subs	r2, r2, r4
 800603c:	d10e      	bne.n	800605c <__mcmp+0x28>
 800603e:	f100 0314 	add.w	r3, r0, #20
 8006042:	3114      	adds	r1, #20
 8006044:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006048:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800604c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006050:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006054:	42a5      	cmp	r5, r4
 8006056:	d003      	beq.n	8006060 <__mcmp+0x2c>
 8006058:	d305      	bcc.n	8006066 <__mcmp+0x32>
 800605a:	2201      	movs	r2, #1
 800605c:	4610      	mov	r0, r2
 800605e:	bd30      	pop	{r4, r5, pc}
 8006060:	4283      	cmp	r3, r0
 8006062:	d3f3      	bcc.n	800604c <__mcmp+0x18>
 8006064:	e7fa      	b.n	800605c <__mcmp+0x28>
 8006066:	f04f 32ff 	mov.w	r2, #4294967295
 800606a:	e7f7      	b.n	800605c <__mcmp+0x28>

0800606c <__mdiff>:
 800606c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006070:	460c      	mov	r4, r1
 8006072:	4606      	mov	r6, r0
 8006074:	4611      	mov	r1, r2
 8006076:	4620      	mov	r0, r4
 8006078:	4690      	mov	r8, r2
 800607a:	f7ff ffdb 	bl	8006034 <__mcmp>
 800607e:	1e05      	subs	r5, r0, #0
 8006080:	d110      	bne.n	80060a4 <__mdiff+0x38>
 8006082:	4629      	mov	r1, r5
 8006084:	4630      	mov	r0, r6
 8006086:	f7ff fd53 	bl	8005b30 <_Balloc>
 800608a:	b930      	cbnz	r0, 800609a <__mdiff+0x2e>
 800608c:	4b3a      	ldr	r3, [pc, #232]	; (8006178 <__mdiff+0x10c>)
 800608e:	4602      	mov	r2, r0
 8006090:	f240 2132 	movw	r1, #562	; 0x232
 8006094:	4839      	ldr	r0, [pc, #228]	; (800617c <__mdiff+0x110>)
 8006096:	f000 fb43 	bl	8006720 <__assert_func>
 800609a:	2301      	movs	r3, #1
 800609c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80060a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a4:	bfa4      	itt	ge
 80060a6:	4643      	movge	r3, r8
 80060a8:	46a0      	movge	r8, r4
 80060aa:	4630      	mov	r0, r6
 80060ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80060b0:	bfa6      	itte	ge
 80060b2:	461c      	movge	r4, r3
 80060b4:	2500      	movge	r5, #0
 80060b6:	2501      	movlt	r5, #1
 80060b8:	f7ff fd3a 	bl	8005b30 <_Balloc>
 80060bc:	b920      	cbnz	r0, 80060c8 <__mdiff+0x5c>
 80060be:	4b2e      	ldr	r3, [pc, #184]	; (8006178 <__mdiff+0x10c>)
 80060c0:	4602      	mov	r2, r0
 80060c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80060c6:	e7e5      	b.n	8006094 <__mdiff+0x28>
 80060c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80060cc:	6926      	ldr	r6, [r4, #16]
 80060ce:	60c5      	str	r5, [r0, #12]
 80060d0:	f104 0914 	add.w	r9, r4, #20
 80060d4:	f108 0514 	add.w	r5, r8, #20
 80060d8:	f100 0e14 	add.w	lr, r0, #20
 80060dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80060e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80060e4:	f108 0210 	add.w	r2, r8, #16
 80060e8:	46f2      	mov	sl, lr
 80060ea:	2100      	movs	r1, #0
 80060ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80060f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80060f4:	fa1f f883 	uxth.w	r8, r3
 80060f8:	fa11 f18b 	uxtah	r1, r1, fp
 80060fc:	0c1b      	lsrs	r3, r3, #16
 80060fe:	eba1 0808 	sub.w	r8, r1, r8
 8006102:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006106:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800610a:	fa1f f888 	uxth.w	r8, r8
 800610e:	1419      	asrs	r1, r3, #16
 8006110:	454e      	cmp	r6, r9
 8006112:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006116:	f84a 3b04 	str.w	r3, [sl], #4
 800611a:	d8e7      	bhi.n	80060ec <__mdiff+0x80>
 800611c:	1b33      	subs	r3, r6, r4
 800611e:	3b15      	subs	r3, #21
 8006120:	f023 0303 	bic.w	r3, r3, #3
 8006124:	3304      	adds	r3, #4
 8006126:	3415      	adds	r4, #21
 8006128:	42a6      	cmp	r6, r4
 800612a:	bf38      	it	cc
 800612c:	2304      	movcc	r3, #4
 800612e:	441d      	add	r5, r3
 8006130:	4473      	add	r3, lr
 8006132:	469e      	mov	lr, r3
 8006134:	462e      	mov	r6, r5
 8006136:	4566      	cmp	r6, ip
 8006138:	d30e      	bcc.n	8006158 <__mdiff+0xec>
 800613a:	f10c 0203 	add.w	r2, ip, #3
 800613e:	1b52      	subs	r2, r2, r5
 8006140:	f022 0203 	bic.w	r2, r2, #3
 8006144:	3d03      	subs	r5, #3
 8006146:	45ac      	cmp	ip, r5
 8006148:	bf38      	it	cc
 800614a:	2200      	movcc	r2, #0
 800614c:	441a      	add	r2, r3
 800614e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006152:	b17b      	cbz	r3, 8006174 <__mdiff+0x108>
 8006154:	6107      	str	r7, [r0, #16]
 8006156:	e7a3      	b.n	80060a0 <__mdiff+0x34>
 8006158:	f856 8b04 	ldr.w	r8, [r6], #4
 800615c:	fa11 f288 	uxtah	r2, r1, r8
 8006160:	1414      	asrs	r4, r2, #16
 8006162:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006166:	b292      	uxth	r2, r2
 8006168:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800616c:	f84e 2b04 	str.w	r2, [lr], #4
 8006170:	1421      	asrs	r1, r4, #16
 8006172:	e7e0      	b.n	8006136 <__mdiff+0xca>
 8006174:	3f01      	subs	r7, #1
 8006176:	e7ea      	b.n	800614e <__mdiff+0xe2>
 8006178:	08008087 	.word	0x08008087
 800617c:	0800802b 	.word	0x0800802b

08006180 <__d2b>:
 8006180:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006184:	4689      	mov	r9, r1
 8006186:	2101      	movs	r1, #1
 8006188:	ec57 6b10 	vmov	r6, r7, d0
 800618c:	4690      	mov	r8, r2
 800618e:	f7ff fccf 	bl	8005b30 <_Balloc>
 8006192:	4604      	mov	r4, r0
 8006194:	b930      	cbnz	r0, 80061a4 <__d2b+0x24>
 8006196:	4602      	mov	r2, r0
 8006198:	4b25      	ldr	r3, [pc, #148]	; (8006230 <__d2b+0xb0>)
 800619a:	4826      	ldr	r0, [pc, #152]	; (8006234 <__d2b+0xb4>)
 800619c:	f240 310a 	movw	r1, #778	; 0x30a
 80061a0:	f000 fabe 	bl	8006720 <__assert_func>
 80061a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80061a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80061ac:	bb35      	cbnz	r5, 80061fc <__d2b+0x7c>
 80061ae:	2e00      	cmp	r6, #0
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	d028      	beq.n	8006206 <__d2b+0x86>
 80061b4:	4668      	mov	r0, sp
 80061b6:	9600      	str	r6, [sp, #0]
 80061b8:	f7ff fd82 	bl	8005cc0 <__lo0bits>
 80061bc:	9900      	ldr	r1, [sp, #0]
 80061be:	b300      	cbz	r0, 8006202 <__d2b+0x82>
 80061c0:	9a01      	ldr	r2, [sp, #4]
 80061c2:	f1c0 0320 	rsb	r3, r0, #32
 80061c6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ca:	430b      	orrs	r3, r1
 80061cc:	40c2      	lsrs	r2, r0
 80061ce:	6163      	str	r3, [r4, #20]
 80061d0:	9201      	str	r2, [sp, #4]
 80061d2:	9b01      	ldr	r3, [sp, #4]
 80061d4:	61a3      	str	r3, [r4, #24]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	bf14      	ite	ne
 80061da:	2202      	movne	r2, #2
 80061dc:	2201      	moveq	r2, #1
 80061de:	6122      	str	r2, [r4, #16]
 80061e0:	b1d5      	cbz	r5, 8006218 <__d2b+0x98>
 80061e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80061e6:	4405      	add	r5, r0
 80061e8:	f8c9 5000 	str.w	r5, [r9]
 80061ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80061f0:	f8c8 0000 	str.w	r0, [r8]
 80061f4:	4620      	mov	r0, r4
 80061f6:	b003      	add	sp, #12
 80061f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006200:	e7d5      	b.n	80061ae <__d2b+0x2e>
 8006202:	6161      	str	r1, [r4, #20]
 8006204:	e7e5      	b.n	80061d2 <__d2b+0x52>
 8006206:	a801      	add	r0, sp, #4
 8006208:	f7ff fd5a 	bl	8005cc0 <__lo0bits>
 800620c:	9b01      	ldr	r3, [sp, #4]
 800620e:	6163      	str	r3, [r4, #20]
 8006210:	2201      	movs	r2, #1
 8006212:	6122      	str	r2, [r4, #16]
 8006214:	3020      	adds	r0, #32
 8006216:	e7e3      	b.n	80061e0 <__d2b+0x60>
 8006218:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800621c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006220:	f8c9 0000 	str.w	r0, [r9]
 8006224:	6918      	ldr	r0, [r3, #16]
 8006226:	f7ff fd2b 	bl	8005c80 <__hi0bits>
 800622a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800622e:	e7df      	b.n	80061f0 <__d2b+0x70>
 8006230:	08008087 	.word	0x08008087
 8006234:	0800802b 	.word	0x0800802b

08006238 <_mprec_log10>:
 8006238:	2817      	cmp	r0, #23
 800623a:	b5d0      	push	{r4, r6, r7, lr}
 800623c:	4604      	mov	r4, r0
 800623e:	dc07      	bgt.n	8006250 <_mprec_log10+0x18>
 8006240:	4809      	ldr	r0, [pc, #36]	; (8006268 <_mprec_log10+0x30>)
 8006242:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8006246:	e9d4 0100 	ldrd	r0, r1, [r4]
 800624a:	ec41 0b10 	vmov	d0, r0, r1
 800624e:	bdd0      	pop	{r4, r6, r7, pc}
 8006250:	4906      	ldr	r1, [pc, #24]	; (800626c <_mprec_log10+0x34>)
 8006252:	4f07      	ldr	r7, [pc, #28]	; (8006270 <_mprec_log10+0x38>)
 8006254:	2000      	movs	r0, #0
 8006256:	2600      	movs	r6, #0
 8006258:	4632      	mov	r2, r6
 800625a:	463b      	mov	r3, r7
 800625c:	f7fa f9e4 	bl	8000628 <__aeabi_dmul>
 8006260:	3c01      	subs	r4, #1
 8006262:	d1f9      	bne.n	8006258 <_mprec_log10+0x20>
 8006264:	e7f1      	b.n	800624a <_mprec_log10+0x12>
 8006266:	bf00      	nop
 8006268:	080080c0 	.word	0x080080c0
 800626c:	3ff00000 	.word	0x3ff00000
 8006270:	40240000 	.word	0x40240000

08006274 <_calloc_r>:
 8006274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006276:	fba1 2402 	umull	r2, r4, r1, r2
 800627a:	b94c      	cbnz	r4, 8006290 <_calloc_r+0x1c>
 800627c:	4611      	mov	r1, r2
 800627e:	9201      	str	r2, [sp, #4]
 8006280:	f000 f82e 	bl	80062e0 <_malloc_r>
 8006284:	9a01      	ldr	r2, [sp, #4]
 8006286:	4605      	mov	r5, r0
 8006288:	b930      	cbnz	r0, 8006298 <_calloc_r+0x24>
 800628a:	4628      	mov	r0, r5
 800628c:	b003      	add	sp, #12
 800628e:	bd30      	pop	{r4, r5, pc}
 8006290:	220c      	movs	r2, #12
 8006292:	6002      	str	r2, [r0, #0]
 8006294:	2500      	movs	r5, #0
 8006296:	e7f8      	b.n	800628a <_calloc_r+0x16>
 8006298:	4621      	mov	r1, r4
 800629a:	f7ff fb09 	bl	80058b0 <memset>
 800629e:	e7f4      	b.n	800628a <_calloc_r+0x16>

080062a0 <sbrk_aligned>:
 80062a0:	b570      	push	{r4, r5, r6, lr}
 80062a2:	4e0e      	ldr	r6, [pc, #56]	; (80062dc <sbrk_aligned+0x3c>)
 80062a4:	460c      	mov	r4, r1
 80062a6:	6831      	ldr	r1, [r6, #0]
 80062a8:	4605      	mov	r5, r0
 80062aa:	b911      	cbnz	r1, 80062b2 <sbrk_aligned+0x12>
 80062ac:	f000 fa20 	bl	80066f0 <_sbrk_r>
 80062b0:	6030      	str	r0, [r6, #0]
 80062b2:	4621      	mov	r1, r4
 80062b4:	4628      	mov	r0, r5
 80062b6:	f000 fa1b 	bl	80066f0 <_sbrk_r>
 80062ba:	1c43      	adds	r3, r0, #1
 80062bc:	d00a      	beq.n	80062d4 <sbrk_aligned+0x34>
 80062be:	1cc4      	adds	r4, r0, #3
 80062c0:	f024 0403 	bic.w	r4, r4, #3
 80062c4:	42a0      	cmp	r0, r4
 80062c6:	d007      	beq.n	80062d8 <sbrk_aligned+0x38>
 80062c8:	1a21      	subs	r1, r4, r0
 80062ca:	4628      	mov	r0, r5
 80062cc:	f000 fa10 	bl	80066f0 <_sbrk_r>
 80062d0:	3001      	adds	r0, #1
 80062d2:	d101      	bne.n	80062d8 <sbrk_aligned+0x38>
 80062d4:	f04f 34ff 	mov.w	r4, #4294967295
 80062d8:	4620      	mov	r0, r4
 80062da:	bd70      	pop	{r4, r5, r6, pc}
 80062dc:	2000028c 	.word	0x2000028c

080062e0 <_malloc_r>:
 80062e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e4:	1ccd      	adds	r5, r1, #3
 80062e6:	f025 0503 	bic.w	r5, r5, #3
 80062ea:	3508      	adds	r5, #8
 80062ec:	2d0c      	cmp	r5, #12
 80062ee:	bf38      	it	cc
 80062f0:	250c      	movcc	r5, #12
 80062f2:	2d00      	cmp	r5, #0
 80062f4:	4607      	mov	r7, r0
 80062f6:	db01      	blt.n	80062fc <_malloc_r+0x1c>
 80062f8:	42a9      	cmp	r1, r5
 80062fa:	d905      	bls.n	8006308 <_malloc_r+0x28>
 80062fc:	230c      	movs	r3, #12
 80062fe:	603b      	str	r3, [r7, #0]
 8006300:	2600      	movs	r6, #0
 8006302:	4630      	mov	r0, r6
 8006304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006308:	4e2e      	ldr	r6, [pc, #184]	; (80063c4 <_malloc_r+0xe4>)
 800630a:	f001 f8cb 	bl	80074a4 <__malloc_lock>
 800630e:	6833      	ldr	r3, [r6, #0]
 8006310:	461c      	mov	r4, r3
 8006312:	bb34      	cbnz	r4, 8006362 <_malloc_r+0x82>
 8006314:	4629      	mov	r1, r5
 8006316:	4638      	mov	r0, r7
 8006318:	f7ff ffc2 	bl	80062a0 <sbrk_aligned>
 800631c:	1c43      	adds	r3, r0, #1
 800631e:	4604      	mov	r4, r0
 8006320:	d14d      	bne.n	80063be <_malloc_r+0xde>
 8006322:	6834      	ldr	r4, [r6, #0]
 8006324:	4626      	mov	r6, r4
 8006326:	2e00      	cmp	r6, #0
 8006328:	d140      	bne.n	80063ac <_malloc_r+0xcc>
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	4631      	mov	r1, r6
 800632e:	4638      	mov	r0, r7
 8006330:	eb04 0803 	add.w	r8, r4, r3
 8006334:	f000 f9dc 	bl	80066f0 <_sbrk_r>
 8006338:	4580      	cmp	r8, r0
 800633a:	d13a      	bne.n	80063b2 <_malloc_r+0xd2>
 800633c:	6821      	ldr	r1, [r4, #0]
 800633e:	3503      	adds	r5, #3
 8006340:	1a6d      	subs	r5, r5, r1
 8006342:	f025 0503 	bic.w	r5, r5, #3
 8006346:	3508      	adds	r5, #8
 8006348:	2d0c      	cmp	r5, #12
 800634a:	bf38      	it	cc
 800634c:	250c      	movcc	r5, #12
 800634e:	4629      	mov	r1, r5
 8006350:	4638      	mov	r0, r7
 8006352:	f7ff ffa5 	bl	80062a0 <sbrk_aligned>
 8006356:	3001      	adds	r0, #1
 8006358:	d02b      	beq.n	80063b2 <_malloc_r+0xd2>
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	442b      	add	r3, r5
 800635e:	6023      	str	r3, [r4, #0]
 8006360:	e00e      	b.n	8006380 <_malloc_r+0xa0>
 8006362:	6822      	ldr	r2, [r4, #0]
 8006364:	1b52      	subs	r2, r2, r5
 8006366:	d41e      	bmi.n	80063a6 <_malloc_r+0xc6>
 8006368:	2a0b      	cmp	r2, #11
 800636a:	d916      	bls.n	800639a <_malloc_r+0xba>
 800636c:	1961      	adds	r1, r4, r5
 800636e:	42a3      	cmp	r3, r4
 8006370:	6025      	str	r5, [r4, #0]
 8006372:	bf18      	it	ne
 8006374:	6059      	strne	r1, [r3, #4]
 8006376:	6863      	ldr	r3, [r4, #4]
 8006378:	bf08      	it	eq
 800637a:	6031      	streq	r1, [r6, #0]
 800637c:	5162      	str	r2, [r4, r5]
 800637e:	604b      	str	r3, [r1, #4]
 8006380:	4638      	mov	r0, r7
 8006382:	f104 060b 	add.w	r6, r4, #11
 8006386:	f001 f893 	bl	80074b0 <__malloc_unlock>
 800638a:	f026 0607 	bic.w	r6, r6, #7
 800638e:	1d23      	adds	r3, r4, #4
 8006390:	1af2      	subs	r2, r6, r3
 8006392:	d0b6      	beq.n	8006302 <_malloc_r+0x22>
 8006394:	1b9b      	subs	r3, r3, r6
 8006396:	50a3      	str	r3, [r4, r2]
 8006398:	e7b3      	b.n	8006302 <_malloc_r+0x22>
 800639a:	6862      	ldr	r2, [r4, #4]
 800639c:	42a3      	cmp	r3, r4
 800639e:	bf0c      	ite	eq
 80063a0:	6032      	streq	r2, [r6, #0]
 80063a2:	605a      	strne	r2, [r3, #4]
 80063a4:	e7ec      	b.n	8006380 <_malloc_r+0xa0>
 80063a6:	4623      	mov	r3, r4
 80063a8:	6864      	ldr	r4, [r4, #4]
 80063aa:	e7b2      	b.n	8006312 <_malloc_r+0x32>
 80063ac:	4634      	mov	r4, r6
 80063ae:	6876      	ldr	r6, [r6, #4]
 80063b0:	e7b9      	b.n	8006326 <_malloc_r+0x46>
 80063b2:	230c      	movs	r3, #12
 80063b4:	603b      	str	r3, [r7, #0]
 80063b6:	4638      	mov	r0, r7
 80063b8:	f001 f87a 	bl	80074b0 <__malloc_unlock>
 80063bc:	e7a1      	b.n	8006302 <_malloc_r+0x22>
 80063be:	6025      	str	r5, [r4, #0]
 80063c0:	e7de      	b.n	8006380 <_malloc_r+0xa0>
 80063c2:	bf00      	nop
 80063c4:	20000288 	.word	0x20000288

080063c8 <_printf_common>:
 80063c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063cc:	4616      	mov	r6, r2
 80063ce:	4699      	mov	r9, r3
 80063d0:	688a      	ldr	r2, [r1, #8]
 80063d2:	690b      	ldr	r3, [r1, #16]
 80063d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063d8:	4293      	cmp	r3, r2
 80063da:	bfb8      	it	lt
 80063dc:	4613      	movlt	r3, r2
 80063de:	6033      	str	r3, [r6, #0]
 80063e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063e4:	4607      	mov	r7, r0
 80063e6:	460c      	mov	r4, r1
 80063e8:	b10a      	cbz	r2, 80063ee <_printf_common+0x26>
 80063ea:	3301      	adds	r3, #1
 80063ec:	6033      	str	r3, [r6, #0]
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	0699      	lsls	r1, r3, #26
 80063f2:	bf42      	ittt	mi
 80063f4:	6833      	ldrmi	r3, [r6, #0]
 80063f6:	3302      	addmi	r3, #2
 80063f8:	6033      	strmi	r3, [r6, #0]
 80063fa:	6825      	ldr	r5, [r4, #0]
 80063fc:	f015 0506 	ands.w	r5, r5, #6
 8006400:	d106      	bne.n	8006410 <_printf_common+0x48>
 8006402:	f104 0a19 	add.w	sl, r4, #25
 8006406:	68e3      	ldr	r3, [r4, #12]
 8006408:	6832      	ldr	r2, [r6, #0]
 800640a:	1a9b      	subs	r3, r3, r2
 800640c:	42ab      	cmp	r3, r5
 800640e:	dc26      	bgt.n	800645e <_printf_common+0x96>
 8006410:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006414:	1e13      	subs	r3, r2, #0
 8006416:	6822      	ldr	r2, [r4, #0]
 8006418:	bf18      	it	ne
 800641a:	2301      	movne	r3, #1
 800641c:	0692      	lsls	r2, r2, #26
 800641e:	d42b      	bmi.n	8006478 <_printf_common+0xb0>
 8006420:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006424:	4649      	mov	r1, r9
 8006426:	4638      	mov	r0, r7
 8006428:	47c0      	blx	r8
 800642a:	3001      	adds	r0, #1
 800642c:	d01e      	beq.n	800646c <_printf_common+0xa4>
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	68e5      	ldr	r5, [r4, #12]
 8006432:	6832      	ldr	r2, [r6, #0]
 8006434:	f003 0306 	and.w	r3, r3, #6
 8006438:	2b04      	cmp	r3, #4
 800643a:	bf08      	it	eq
 800643c:	1aad      	subeq	r5, r5, r2
 800643e:	68a3      	ldr	r3, [r4, #8]
 8006440:	6922      	ldr	r2, [r4, #16]
 8006442:	bf0c      	ite	eq
 8006444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006448:	2500      	movne	r5, #0
 800644a:	4293      	cmp	r3, r2
 800644c:	bfc4      	itt	gt
 800644e:	1a9b      	subgt	r3, r3, r2
 8006450:	18ed      	addgt	r5, r5, r3
 8006452:	2600      	movs	r6, #0
 8006454:	341a      	adds	r4, #26
 8006456:	42b5      	cmp	r5, r6
 8006458:	d11a      	bne.n	8006490 <_printf_common+0xc8>
 800645a:	2000      	movs	r0, #0
 800645c:	e008      	b.n	8006470 <_printf_common+0xa8>
 800645e:	2301      	movs	r3, #1
 8006460:	4652      	mov	r2, sl
 8006462:	4649      	mov	r1, r9
 8006464:	4638      	mov	r0, r7
 8006466:	47c0      	blx	r8
 8006468:	3001      	adds	r0, #1
 800646a:	d103      	bne.n	8006474 <_printf_common+0xac>
 800646c:	f04f 30ff 	mov.w	r0, #4294967295
 8006470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006474:	3501      	adds	r5, #1
 8006476:	e7c6      	b.n	8006406 <_printf_common+0x3e>
 8006478:	18e1      	adds	r1, r4, r3
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	2030      	movs	r0, #48	; 0x30
 800647e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006482:	4422      	add	r2, r4
 8006484:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006488:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800648c:	3302      	adds	r3, #2
 800648e:	e7c7      	b.n	8006420 <_printf_common+0x58>
 8006490:	2301      	movs	r3, #1
 8006492:	4622      	mov	r2, r4
 8006494:	4649      	mov	r1, r9
 8006496:	4638      	mov	r0, r7
 8006498:	47c0      	blx	r8
 800649a:	3001      	adds	r0, #1
 800649c:	d0e6      	beq.n	800646c <_printf_common+0xa4>
 800649e:	3601      	adds	r6, #1
 80064a0:	e7d9      	b.n	8006456 <_printf_common+0x8e>
	...

080064a4 <_printf_i>:
 80064a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064a8:	7e0f      	ldrb	r7, [r1, #24]
 80064aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064ac:	2f78      	cmp	r7, #120	; 0x78
 80064ae:	4691      	mov	r9, r2
 80064b0:	4680      	mov	r8, r0
 80064b2:	460c      	mov	r4, r1
 80064b4:	469a      	mov	sl, r3
 80064b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064ba:	d807      	bhi.n	80064cc <_printf_i+0x28>
 80064bc:	2f62      	cmp	r7, #98	; 0x62
 80064be:	d80a      	bhi.n	80064d6 <_printf_i+0x32>
 80064c0:	2f00      	cmp	r7, #0
 80064c2:	f000 80d8 	beq.w	8006676 <_printf_i+0x1d2>
 80064c6:	2f58      	cmp	r7, #88	; 0x58
 80064c8:	f000 80a3 	beq.w	8006612 <_printf_i+0x16e>
 80064cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064d4:	e03a      	b.n	800654c <_printf_i+0xa8>
 80064d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064da:	2b15      	cmp	r3, #21
 80064dc:	d8f6      	bhi.n	80064cc <_printf_i+0x28>
 80064de:	a101      	add	r1, pc, #4	; (adr r1, 80064e4 <_printf_i+0x40>)
 80064e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064e4:	0800653d 	.word	0x0800653d
 80064e8:	08006551 	.word	0x08006551
 80064ec:	080064cd 	.word	0x080064cd
 80064f0:	080064cd 	.word	0x080064cd
 80064f4:	080064cd 	.word	0x080064cd
 80064f8:	080064cd 	.word	0x080064cd
 80064fc:	08006551 	.word	0x08006551
 8006500:	080064cd 	.word	0x080064cd
 8006504:	080064cd 	.word	0x080064cd
 8006508:	080064cd 	.word	0x080064cd
 800650c:	080064cd 	.word	0x080064cd
 8006510:	0800665d 	.word	0x0800665d
 8006514:	08006581 	.word	0x08006581
 8006518:	0800663f 	.word	0x0800663f
 800651c:	080064cd 	.word	0x080064cd
 8006520:	080064cd 	.word	0x080064cd
 8006524:	0800667f 	.word	0x0800667f
 8006528:	080064cd 	.word	0x080064cd
 800652c:	08006581 	.word	0x08006581
 8006530:	080064cd 	.word	0x080064cd
 8006534:	080064cd 	.word	0x080064cd
 8006538:	08006647 	.word	0x08006647
 800653c:	682b      	ldr	r3, [r5, #0]
 800653e:	1d1a      	adds	r2, r3, #4
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	602a      	str	r2, [r5, #0]
 8006544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800654c:	2301      	movs	r3, #1
 800654e:	e0a3      	b.n	8006698 <_printf_i+0x1f4>
 8006550:	6820      	ldr	r0, [r4, #0]
 8006552:	6829      	ldr	r1, [r5, #0]
 8006554:	0606      	lsls	r6, r0, #24
 8006556:	f101 0304 	add.w	r3, r1, #4
 800655a:	d50a      	bpl.n	8006572 <_printf_i+0xce>
 800655c:	680e      	ldr	r6, [r1, #0]
 800655e:	602b      	str	r3, [r5, #0]
 8006560:	2e00      	cmp	r6, #0
 8006562:	da03      	bge.n	800656c <_printf_i+0xc8>
 8006564:	232d      	movs	r3, #45	; 0x2d
 8006566:	4276      	negs	r6, r6
 8006568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800656c:	485e      	ldr	r0, [pc, #376]	; (80066e8 <_printf_i+0x244>)
 800656e:	230a      	movs	r3, #10
 8006570:	e019      	b.n	80065a6 <_printf_i+0x102>
 8006572:	680e      	ldr	r6, [r1, #0]
 8006574:	602b      	str	r3, [r5, #0]
 8006576:	f010 0f40 	tst.w	r0, #64	; 0x40
 800657a:	bf18      	it	ne
 800657c:	b236      	sxthne	r6, r6
 800657e:	e7ef      	b.n	8006560 <_printf_i+0xbc>
 8006580:	682b      	ldr	r3, [r5, #0]
 8006582:	6820      	ldr	r0, [r4, #0]
 8006584:	1d19      	adds	r1, r3, #4
 8006586:	6029      	str	r1, [r5, #0]
 8006588:	0601      	lsls	r1, r0, #24
 800658a:	d501      	bpl.n	8006590 <_printf_i+0xec>
 800658c:	681e      	ldr	r6, [r3, #0]
 800658e:	e002      	b.n	8006596 <_printf_i+0xf2>
 8006590:	0646      	lsls	r6, r0, #25
 8006592:	d5fb      	bpl.n	800658c <_printf_i+0xe8>
 8006594:	881e      	ldrh	r6, [r3, #0]
 8006596:	4854      	ldr	r0, [pc, #336]	; (80066e8 <_printf_i+0x244>)
 8006598:	2f6f      	cmp	r7, #111	; 0x6f
 800659a:	bf0c      	ite	eq
 800659c:	2308      	moveq	r3, #8
 800659e:	230a      	movne	r3, #10
 80065a0:	2100      	movs	r1, #0
 80065a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065a6:	6865      	ldr	r5, [r4, #4]
 80065a8:	60a5      	str	r5, [r4, #8]
 80065aa:	2d00      	cmp	r5, #0
 80065ac:	bfa2      	ittt	ge
 80065ae:	6821      	ldrge	r1, [r4, #0]
 80065b0:	f021 0104 	bicge.w	r1, r1, #4
 80065b4:	6021      	strge	r1, [r4, #0]
 80065b6:	b90e      	cbnz	r6, 80065bc <_printf_i+0x118>
 80065b8:	2d00      	cmp	r5, #0
 80065ba:	d04d      	beq.n	8006658 <_printf_i+0x1b4>
 80065bc:	4615      	mov	r5, r2
 80065be:	fbb6 f1f3 	udiv	r1, r6, r3
 80065c2:	fb03 6711 	mls	r7, r3, r1, r6
 80065c6:	5dc7      	ldrb	r7, [r0, r7]
 80065c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065cc:	4637      	mov	r7, r6
 80065ce:	42bb      	cmp	r3, r7
 80065d0:	460e      	mov	r6, r1
 80065d2:	d9f4      	bls.n	80065be <_printf_i+0x11a>
 80065d4:	2b08      	cmp	r3, #8
 80065d6:	d10b      	bne.n	80065f0 <_printf_i+0x14c>
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	07de      	lsls	r6, r3, #31
 80065dc:	d508      	bpl.n	80065f0 <_printf_i+0x14c>
 80065de:	6923      	ldr	r3, [r4, #16]
 80065e0:	6861      	ldr	r1, [r4, #4]
 80065e2:	4299      	cmp	r1, r3
 80065e4:	bfde      	ittt	le
 80065e6:	2330      	movle	r3, #48	; 0x30
 80065e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065f0:	1b52      	subs	r2, r2, r5
 80065f2:	6122      	str	r2, [r4, #16]
 80065f4:	f8cd a000 	str.w	sl, [sp]
 80065f8:	464b      	mov	r3, r9
 80065fa:	aa03      	add	r2, sp, #12
 80065fc:	4621      	mov	r1, r4
 80065fe:	4640      	mov	r0, r8
 8006600:	f7ff fee2 	bl	80063c8 <_printf_common>
 8006604:	3001      	adds	r0, #1
 8006606:	d14c      	bne.n	80066a2 <_printf_i+0x1fe>
 8006608:	f04f 30ff 	mov.w	r0, #4294967295
 800660c:	b004      	add	sp, #16
 800660e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006612:	4835      	ldr	r0, [pc, #212]	; (80066e8 <_printf_i+0x244>)
 8006614:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006618:	6829      	ldr	r1, [r5, #0]
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006620:	6029      	str	r1, [r5, #0]
 8006622:	061d      	lsls	r5, r3, #24
 8006624:	d514      	bpl.n	8006650 <_printf_i+0x1ac>
 8006626:	07df      	lsls	r7, r3, #31
 8006628:	bf44      	itt	mi
 800662a:	f043 0320 	orrmi.w	r3, r3, #32
 800662e:	6023      	strmi	r3, [r4, #0]
 8006630:	b91e      	cbnz	r6, 800663a <_printf_i+0x196>
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	f023 0320 	bic.w	r3, r3, #32
 8006638:	6023      	str	r3, [r4, #0]
 800663a:	2310      	movs	r3, #16
 800663c:	e7b0      	b.n	80065a0 <_printf_i+0xfc>
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	f043 0320 	orr.w	r3, r3, #32
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	2378      	movs	r3, #120	; 0x78
 8006648:	4828      	ldr	r0, [pc, #160]	; (80066ec <_printf_i+0x248>)
 800664a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800664e:	e7e3      	b.n	8006618 <_printf_i+0x174>
 8006650:	0659      	lsls	r1, r3, #25
 8006652:	bf48      	it	mi
 8006654:	b2b6      	uxthmi	r6, r6
 8006656:	e7e6      	b.n	8006626 <_printf_i+0x182>
 8006658:	4615      	mov	r5, r2
 800665a:	e7bb      	b.n	80065d4 <_printf_i+0x130>
 800665c:	682b      	ldr	r3, [r5, #0]
 800665e:	6826      	ldr	r6, [r4, #0]
 8006660:	6961      	ldr	r1, [r4, #20]
 8006662:	1d18      	adds	r0, r3, #4
 8006664:	6028      	str	r0, [r5, #0]
 8006666:	0635      	lsls	r5, r6, #24
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	d501      	bpl.n	8006670 <_printf_i+0x1cc>
 800666c:	6019      	str	r1, [r3, #0]
 800666e:	e002      	b.n	8006676 <_printf_i+0x1d2>
 8006670:	0670      	lsls	r0, r6, #25
 8006672:	d5fb      	bpl.n	800666c <_printf_i+0x1c8>
 8006674:	8019      	strh	r1, [r3, #0]
 8006676:	2300      	movs	r3, #0
 8006678:	6123      	str	r3, [r4, #16]
 800667a:	4615      	mov	r5, r2
 800667c:	e7ba      	b.n	80065f4 <_printf_i+0x150>
 800667e:	682b      	ldr	r3, [r5, #0]
 8006680:	1d1a      	adds	r2, r3, #4
 8006682:	602a      	str	r2, [r5, #0]
 8006684:	681d      	ldr	r5, [r3, #0]
 8006686:	6862      	ldr	r2, [r4, #4]
 8006688:	2100      	movs	r1, #0
 800668a:	4628      	mov	r0, r5
 800668c:	f7f9 fdc0 	bl	8000210 <memchr>
 8006690:	b108      	cbz	r0, 8006696 <_printf_i+0x1f2>
 8006692:	1b40      	subs	r0, r0, r5
 8006694:	6060      	str	r0, [r4, #4]
 8006696:	6863      	ldr	r3, [r4, #4]
 8006698:	6123      	str	r3, [r4, #16]
 800669a:	2300      	movs	r3, #0
 800669c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066a0:	e7a8      	b.n	80065f4 <_printf_i+0x150>
 80066a2:	6923      	ldr	r3, [r4, #16]
 80066a4:	462a      	mov	r2, r5
 80066a6:	4649      	mov	r1, r9
 80066a8:	4640      	mov	r0, r8
 80066aa:	47d0      	blx	sl
 80066ac:	3001      	adds	r0, #1
 80066ae:	d0ab      	beq.n	8006608 <_printf_i+0x164>
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	079b      	lsls	r3, r3, #30
 80066b4:	d413      	bmi.n	80066de <_printf_i+0x23a>
 80066b6:	68e0      	ldr	r0, [r4, #12]
 80066b8:	9b03      	ldr	r3, [sp, #12]
 80066ba:	4298      	cmp	r0, r3
 80066bc:	bfb8      	it	lt
 80066be:	4618      	movlt	r0, r3
 80066c0:	e7a4      	b.n	800660c <_printf_i+0x168>
 80066c2:	2301      	movs	r3, #1
 80066c4:	4632      	mov	r2, r6
 80066c6:	4649      	mov	r1, r9
 80066c8:	4640      	mov	r0, r8
 80066ca:	47d0      	blx	sl
 80066cc:	3001      	adds	r0, #1
 80066ce:	d09b      	beq.n	8006608 <_printf_i+0x164>
 80066d0:	3501      	adds	r5, #1
 80066d2:	68e3      	ldr	r3, [r4, #12]
 80066d4:	9903      	ldr	r1, [sp, #12]
 80066d6:	1a5b      	subs	r3, r3, r1
 80066d8:	42ab      	cmp	r3, r5
 80066da:	dcf2      	bgt.n	80066c2 <_printf_i+0x21e>
 80066dc:	e7eb      	b.n	80066b6 <_printf_i+0x212>
 80066de:	2500      	movs	r5, #0
 80066e0:	f104 0619 	add.w	r6, r4, #25
 80066e4:	e7f5      	b.n	80066d2 <_printf_i+0x22e>
 80066e6:	bf00      	nop
 80066e8:	08008194 	.word	0x08008194
 80066ec:	080081a5 	.word	0x080081a5

080066f0 <_sbrk_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4d06      	ldr	r5, [pc, #24]	; (800670c <_sbrk_r+0x1c>)
 80066f4:	2300      	movs	r3, #0
 80066f6:	4604      	mov	r4, r0
 80066f8:	4608      	mov	r0, r1
 80066fa:	602b      	str	r3, [r5, #0]
 80066fc:	f7fb ffc6 	bl	800268c <_sbrk>
 8006700:	1c43      	adds	r3, r0, #1
 8006702:	d102      	bne.n	800670a <_sbrk_r+0x1a>
 8006704:	682b      	ldr	r3, [r5, #0]
 8006706:	b103      	cbz	r3, 800670a <_sbrk_r+0x1a>
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	bd38      	pop	{r3, r4, r5, pc}
 800670c:	20000290 	.word	0x20000290

08006710 <strcpy>:
 8006710:	4603      	mov	r3, r0
 8006712:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006716:	f803 2b01 	strb.w	r2, [r3], #1
 800671a:	2a00      	cmp	r2, #0
 800671c:	d1f9      	bne.n	8006712 <strcpy+0x2>
 800671e:	4770      	bx	lr

08006720 <__assert_func>:
 8006720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006722:	4614      	mov	r4, r2
 8006724:	461a      	mov	r2, r3
 8006726:	4b09      	ldr	r3, [pc, #36]	; (800674c <__assert_func+0x2c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4605      	mov	r5, r0
 800672c:	68d8      	ldr	r0, [r3, #12]
 800672e:	b14c      	cbz	r4, 8006744 <__assert_func+0x24>
 8006730:	4b07      	ldr	r3, [pc, #28]	; (8006750 <__assert_func+0x30>)
 8006732:	9100      	str	r1, [sp, #0]
 8006734:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006738:	4906      	ldr	r1, [pc, #24]	; (8006754 <__assert_func+0x34>)
 800673a:	462b      	mov	r3, r5
 800673c:	f000 fe8a 	bl	8007454 <fiprintf>
 8006740:	f001 f922 	bl	8007988 <abort>
 8006744:	4b04      	ldr	r3, [pc, #16]	; (8006758 <__assert_func+0x38>)
 8006746:	461c      	mov	r4, r3
 8006748:	e7f3      	b.n	8006732 <__assert_func+0x12>
 800674a:	bf00      	nop
 800674c:	2000001c 	.word	0x2000001c
 8006750:	080081b6 	.word	0x080081b6
 8006754:	080081c3 	.word	0x080081c3
 8006758:	080081f1 	.word	0x080081f1

0800675c <quorem>:
 800675c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006760:	6903      	ldr	r3, [r0, #16]
 8006762:	690c      	ldr	r4, [r1, #16]
 8006764:	42a3      	cmp	r3, r4
 8006766:	4607      	mov	r7, r0
 8006768:	f2c0 8081 	blt.w	800686e <quorem+0x112>
 800676c:	3c01      	subs	r4, #1
 800676e:	f101 0814 	add.w	r8, r1, #20
 8006772:	f100 0514 	add.w	r5, r0, #20
 8006776:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800677a:	9301      	str	r3, [sp, #4]
 800677c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006780:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006784:	3301      	adds	r3, #1
 8006786:	429a      	cmp	r2, r3
 8006788:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800678c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006790:	fbb2 f6f3 	udiv	r6, r2, r3
 8006794:	d331      	bcc.n	80067fa <quorem+0x9e>
 8006796:	f04f 0e00 	mov.w	lr, #0
 800679a:	4640      	mov	r0, r8
 800679c:	46ac      	mov	ip, r5
 800679e:	46f2      	mov	sl, lr
 80067a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80067a4:	b293      	uxth	r3, r2
 80067a6:	fb06 e303 	mla	r3, r6, r3, lr
 80067aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	ebaa 0303 	sub.w	r3, sl, r3
 80067b4:	f8dc a000 	ldr.w	sl, [ip]
 80067b8:	0c12      	lsrs	r2, r2, #16
 80067ba:	fa13 f38a 	uxtah	r3, r3, sl
 80067be:	fb06 e202 	mla	r2, r6, r2, lr
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	9b00      	ldr	r3, [sp, #0]
 80067c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80067ca:	b292      	uxth	r2, r2
 80067cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80067d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80067d8:	4581      	cmp	r9, r0
 80067da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067de:	f84c 3b04 	str.w	r3, [ip], #4
 80067e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80067e6:	d2db      	bcs.n	80067a0 <quorem+0x44>
 80067e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80067ec:	b92b      	cbnz	r3, 80067fa <quorem+0x9e>
 80067ee:	9b01      	ldr	r3, [sp, #4]
 80067f0:	3b04      	subs	r3, #4
 80067f2:	429d      	cmp	r5, r3
 80067f4:	461a      	mov	r2, r3
 80067f6:	d32e      	bcc.n	8006856 <quorem+0xfa>
 80067f8:	613c      	str	r4, [r7, #16]
 80067fa:	4638      	mov	r0, r7
 80067fc:	f7ff fc1a 	bl	8006034 <__mcmp>
 8006800:	2800      	cmp	r0, #0
 8006802:	db24      	blt.n	800684e <quorem+0xf2>
 8006804:	3601      	adds	r6, #1
 8006806:	4628      	mov	r0, r5
 8006808:	f04f 0c00 	mov.w	ip, #0
 800680c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006810:	f8d0 e000 	ldr.w	lr, [r0]
 8006814:	b293      	uxth	r3, r2
 8006816:	ebac 0303 	sub.w	r3, ip, r3
 800681a:	0c12      	lsrs	r2, r2, #16
 800681c:	fa13 f38e 	uxtah	r3, r3, lr
 8006820:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006824:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006828:	b29b      	uxth	r3, r3
 800682a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800682e:	45c1      	cmp	r9, r8
 8006830:	f840 3b04 	str.w	r3, [r0], #4
 8006834:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006838:	d2e8      	bcs.n	800680c <quorem+0xb0>
 800683a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800683e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006842:	b922      	cbnz	r2, 800684e <quorem+0xf2>
 8006844:	3b04      	subs	r3, #4
 8006846:	429d      	cmp	r5, r3
 8006848:	461a      	mov	r2, r3
 800684a:	d30a      	bcc.n	8006862 <quorem+0x106>
 800684c:	613c      	str	r4, [r7, #16]
 800684e:	4630      	mov	r0, r6
 8006850:	b003      	add	sp, #12
 8006852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006856:	6812      	ldr	r2, [r2, #0]
 8006858:	3b04      	subs	r3, #4
 800685a:	2a00      	cmp	r2, #0
 800685c:	d1cc      	bne.n	80067f8 <quorem+0x9c>
 800685e:	3c01      	subs	r4, #1
 8006860:	e7c7      	b.n	80067f2 <quorem+0x96>
 8006862:	6812      	ldr	r2, [r2, #0]
 8006864:	3b04      	subs	r3, #4
 8006866:	2a00      	cmp	r2, #0
 8006868:	d1f0      	bne.n	800684c <quorem+0xf0>
 800686a:	3c01      	subs	r4, #1
 800686c:	e7eb      	b.n	8006846 <quorem+0xea>
 800686e:	2000      	movs	r0, #0
 8006870:	e7ee      	b.n	8006850 <quorem+0xf4>
 8006872:	0000      	movs	r0, r0
 8006874:	0000      	movs	r0, r0
	...

08006878 <_dtoa_r>:
 8006878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687c:	ed2d 8b04 	vpush	{d8-d9}
 8006880:	ec57 6b10 	vmov	r6, r7, d0
 8006884:	b093      	sub	sp, #76	; 0x4c
 8006886:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006888:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800688c:	9106      	str	r1, [sp, #24]
 800688e:	ee10 aa10 	vmov	sl, s0
 8006892:	4604      	mov	r4, r0
 8006894:	9209      	str	r2, [sp, #36]	; 0x24
 8006896:	930c      	str	r3, [sp, #48]	; 0x30
 8006898:	46bb      	mov	fp, r7
 800689a:	b975      	cbnz	r5, 80068ba <_dtoa_r+0x42>
 800689c:	2010      	movs	r0, #16
 800689e:	f000 fdeb 	bl	8007478 <malloc>
 80068a2:	4602      	mov	r2, r0
 80068a4:	6260      	str	r0, [r4, #36]	; 0x24
 80068a6:	b920      	cbnz	r0, 80068b2 <_dtoa_r+0x3a>
 80068a8:	4ba7      	ldr	r3, [pc, #668]	; (8006b48 <_dtoa_r+0x2d0>)
 80068aa:	21ea      	movs	r1, #234	; 0xea
 80068ac:	48a7      	ldr	r0, [pc, #668]	; (8006b4c <_dtoa_r+0x2d4>)
 80068ae:	f7ff ff37 	bl	8006720 <__assert_func>
 80068b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80068b6:	6005      	str	r5, [r0, #0]
 80068b8:	60c5      	str	r5, [r0, #12]
 80068ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068bc:	6819      	ldr	r1, [r3, #0]
 80068be:	b151      	cbz	r1, 80068d6 <_dtoa_r+0x5e>
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	604a      	str	r2, [r1, #4]
 80068c4:	2301      	movs	r3, #1
 80068c6:	4093      	lsls	r3, r2
 80068c8:	608b      	str	r3, [r1, #8]
 80068ca:	4620      	mov	r0, r4
 80068cc:	f7ff f970 	bl	8005bb0 <_Bfree>
 80068d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	1e3b      	subs	r3, r7, #0
 80068d8:	bfaa      	itet	ge
 80068da:	2300      	movge	r3, #0
 80068dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80068e0:	f8c8 3000 	strge.w	r3, [r8]
 80068e4:	4b9a      	ldr	r3, [pc, #616]	; (8006b50 <_dtoa_r+0x2d8>)
 80068e6:	bfbc      	itt	lt
 80068e8:	2201      	movlt	r2, #1
 80068ea:	f8c8 2000 	strlt.w	r2, [r8]
 80068ee:	ea33 030b 	bics.w	r3, r3, fp
 80068f2:	d11b      	bne.n	800692c <_dtoa_r+0xb4>
 80068f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80068fa:	6013      	str	r3, [r2, #0]
 80068fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006900:	4333      	orrs	r3, r6
 8006902:	f000 8592 	beq.w	800742a <_dtoa_r+0xbb2>
 8006906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006908:	b963      	cbnz	r3, 8006924 <_dtoa_r+0xac>
 800690a:	4b92      	ldr	r3, [pc, #584]	; (8006b54 <_dtoa_r+0x2dc>)
 800690c:	e022      	b.n	8006954 <_dtoa_r+0xdc>
 800690e:	4b92      	ldr	r3, [pc, #584]	; (8006b58 <_dtoa_r+0x2e0>)
 8006910:	9301      	str	r3, [sp, #4]
 8006912:	3308      	adds	r3, #8
 8006914:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006916:	6013      	str	r3, [r2, #0]
 8006918:	9801      	ldr	r0, [sp, #4]
 800691a:	b013      	add	sp, #76	; 0x4c
 800691c:	ecbd 8b04 	vpop	{d8-d9}
 8006920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006924:	4b8b      	ldr	r3, [pc, #556]	; (8006b54 <_dtoa_r+0x2dc>)
 8006926:	9301      	str	r3, [sp, #4]
 8006928:	3303      	adds	r3, #3
 800692a:	e7f3      	b.n	8006914 <_dtoa_r+0x9c>
 800692c:	2200      	movs	r2, #0
 800692e:	2300      	movs	r3, #0
 8006930:	4650      	mov	r0, sl
 8006932:	4659      	mov	r1, fp
 8006934:	f7fa f8e0 	bl	8000af8 <__aeabi_dcmpeq>
 8006938:	ec4b ab19 	vmov	d9, sl, fp
 800693c:	4680      	mov	r8, r0
 800693e:	b158      	cbz	r0, 8006958 <_dtoa_r+0xe0>
 8006940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006942:	2301      	movs	r3, #1
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 856b 	beq.w	8007424 <_dtoa_r+0xbac>
 800694e:	4883      	ldr	r0, [pc, #524]	; (8006b5c <_dtoa_r+0x2e4>)
 8006950:	6018      	str	r0, [r3, #0]
 8006952:	1e43      	subs	r3, r0, #1
 8006954:	9301      	str	r3, [sp, #4]
 8006956:	e7df      	b.n	8006918 <_dtoa_r+0xa0>
 8006958:	ec4b ab10 	vmov	d0, sl, fp
 800695c:	aa10      	add	r2, sp, #64	; 0x40
 800695e:	a911      	add	r1, sp, #68	; 0x44
 8006960:	4620      	mov	r0, r4
 8006962:	f7ff fc0d 	bl	8006180 <__d2b>
 8006966:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800696a:	ee08 0a10 	vmov	s16, r0
 800696e:	2d00      	cmp	r5, #0
 8006970:	f000 8084 	beq.w	8006a7c <_dtoa_r+0x204>
 8006974:	ee19 3a90 	vmov	r3, s19
 8006978:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800697c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006980:	4656      	mov	r6, sl
 8006982:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006986:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800698a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800698e:	4b74      	ldr	r3, [pc, #464]	; (8006b60 <_dtoa_r+0x2e8>)
 8006990:	2200      	movs	r2, #0
 8006992:	4630      	mov	r0, r6
 8006994:	4639      	mov	r1, r7
 8006996:	f7f9 fc8f 	bl	80002b8 <__aeabi_dsub>
 800699a:	a365      	add	r3, pc, #404	; (adr r3, 8006b30 <_dtoa_r+0x2b8>)
 800699c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a0:	f7f9 fe42 	bl	8000628 <__aeabi_dmul>
 80069a4:	a364      	add	r3, pc, #400	; (adr r3, 8006b38 <_dtoa_r+0x2c0>)
 80069a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069aa:	f7f9 fc87 	bl	80002bc <__adddf3>
 80069ae:	4606      	mov	r6, r0
 80069b0:	4628      	mov	r0, r5
 80069b2:	460f      	mov	r7, r1
 80069b4:	f7f9 fdce 	bl	8000554 <__aeabi_i2d>
 80069b8:	a361      	add	r3, pc, #388	; (adr r3, 8006b40 <_dtoa_r+0x2c8>)
 80069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069be:	f7f9 fe33 	bl	8000628 <__aeabi_dmul>
 80069c2:	4602      	mov	r2, r0
 80069c4:	460b      	mov	r3, r1
 80069c6:	4630      	mov	r0, r6
 80069c8:	4639      	mov	r1, r7
 80069ca:	f7f9 fc77 	bl	80002bc <__adddf3>
 80069ce:	4606      	mov	r6, r0
 80069d0:	460f      	mov	r7, r1
 80069d2:	f7fa f8c3 	bl	8000b5c <__aeabi_d2iz>
 80069d6:	2200      	movs	r2, #0
 80069d8:	9000      	str	r0, [sp, #0]
 80069da:	2300      	movs	r3, #0
 80069dc:	4630      	mov	r0, r6
 80069de:	4639      	mov	r1, r7
 80069e0:	f7fa f894 	bl	8000b0c <__aeabi_dcmplt>
 80069e4:	b150      	cbz	r0, 80069fc <_dtoa_r+0x184>
 80069e6:	9800      	ldr	r0, [sp, #0]
 80069e8:	f7f9 fdb4 	bl	8000554 <__aeabi_i2d>
 80069ec:	4632      	mov	r2, r6
 80069ee:	463b      	mov	r3, r7
 80069f0:	f7fa f882 	bl	8000af8 <__aeabi_dcmpeq>
 80069f4:	b910      	cbnz	r0, 80069fc <_dtoa_r+0x184>
 80069f6:	9b00      	ldr	r3, [sp, #0]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	9b00      	ldr	r3, [sp, #0]
 80069fe:	2b16      	cmp	r3, #22
 8006a00:	d85a      	bhi.n	8006ab8 <_dtoa_r+0x240>
 8006a02:	9a00      	ldr	r2, [sp, #0]
 8006a04:	4b57      	ldr	r3, [pc, #348]	; (8006b64 <_dtoa_r+0x2ec>)
 8006a06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0e:	ec51 0b19 	vmov	r0, r1, d9
 8006a12:	f7fa f87b 	bl	8000b0c <__aeabi_dcmplt>
 8006a16:	2800      	cmp	r0, #0
 8006a18:	d050      	beq.n	8006abc <_dtoa_r+0x244>
 8006a1a:	9b00      	ldr	r3, [sp, #0]
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	2300      	movs	r3, #0
 8006a22:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a26:	1b5d      	subs	r5, r3, r5
 8006a28:	1e6b      	subs	r3, r5, #1
 8006a2a:	9305      	str	r3, [sp, #20]
 8006a2c:	bf45      	ittet	mi
 8006a2e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006a32:	9304      	strmi	r3, [sp, #16]
 8006a34:	2300      	movpl	r3, #0
 8006a36:	2300      	movmi	r3, #0
 8006a38:	bf4c      	ite	mi
 8006a3a:	9305      	strmi	r3, [sp, #20]
 8006a3c:	9304      	strpl	r3, [sp, #16]
 8006a3e:	9b00      	ldr	r3, [sp, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	db3d      	blt.n	8006ac0 <_dtoa_r+0x248>
 8006a44:	9b05      	ldr	r3, [sp, #20]
 8006a46:	9a00      	ldr	r2, [sp, #0]
 8006a48:	920a      	str	r2, [sp, #40]	; 0x28
 8006a4a:	4413      	add	r3, r2
 8006a4c:	9305      	str	r3, [sp, #20]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	9307      	str	r3, [sp, #28]
 8006a52:	9b06      	ldr	r3, [sp, #24]
 8006a54:	2b09      	cmp	r3, #9
 8006a56:	f200 8089 	bhi.w	8006b6c <_dtoa_r+0x2f4>
 8006a5a:	2b05      	cmp	r3, #5
 8006a5c:	bfc4      	itt	gt
 8006a5e:	3b04      	subgt	r3, #4
 8006a60:	9306      	strgt	r3, [sp, #24]
 8006a62:	9b06      	ldr	r3, [sp, #24]
 8006a64:	f1a3 0302 	sub.w	r3, r3, #2
 8006a68:	bfcc      	ite	gt
 8006a6a:	2500      	movgt	r5, #0
 8006a6c:	2501      	movle	r5, #1
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	f200 8087 	bhi.w	8006b82 <_dtoa_r+0x30a>
 8006a74:	e8df f003 	tbb	[pc, r3]
 8006a78:	59383a2d 	.word	0x59383a2d
 8006a7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006a80:	441d      	add	r5, r3
 8006a82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006a86:	2b20      	cmp	r3, #32
 8006a88:	bfc1      	itttt	gt
 8006a8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006a92:	fa0b f303 	lslgt.w	r3, fp, r3
 8006a96:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006a9a:	bfda      	itte	le
 8006a9c:	f1c3 0320 	rsble	r3, r3, #32
 8006aa0:	fa06 f003 	lslle.w	r0, r6, r3
 8006aa4:	4318      	orrgt	r0, r3
 8006aa6:	f7f9 fd45 	bl	8000534 <__aeabi_ui2d>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	4606      	mov	r6, r0
 8006aae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006ab2:	3d01      	subs	r5, #1
 8006ab4:	930e      	str	r3, [sp, #56]	; 0x38
 8006ab6:	e76a      	b.n	800698e <_dtoa_r+0x116>
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e7b2      	b.n	8006a22 <_dtoa_r+0x1aa>
 8006abc:	900b      	str	r0, [sp, #44]	; 0x2c
 8006abe:	e7b1      	b.n	8006a24 <_dtoa_r+0x1ac>
 8006ac0:	9b04      	ldr	r3, [sp, #16]
 8006ac2:	9a00      	ldr	r2, [sp, #0]
 8006ac4:	1a9b      	subs	r3, r3, r2
 8006ac6:	9304      	str	r3, [sp, #16]
 8006ac8:	4253      	negs	r3, r2
 8006aca:	9307      	str	r3, [sp, #28]
 8006acc:	2300      	movs	r3, #0
 8006ace:	930a      	str	r3, [sp, #40]	; 0x28
 8006ad0:	e7bf      	b.n	8006a52 <_dtoa_r+0x1da>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	9308      	str	r3, [sp, #32]
 8006ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	dc55      	bgt.n	8006b88 <_dtoa_r+0x310>
 8006adc:	2301      	movs	r3, #1
 8006ade:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	9209      	str	r2, [sp, #36]	; 0x24
 8006ae6:	e00c      	b.n	8006b02 <_dtoa_r+0x28a>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e7f3      	b.n	8006ad4 <_dtoa_r+0x25c>
 8006aec:	2300      	movs	r3, #0
 8006aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006af0:	9308      	str	r3, [sp, #32]
 8006af2:	9b00      	ldr	r3, [sp, #0]
 8006af4:	4413      	add	r3, r2
 8006af6:	9302      	str	r3, [sp, #8]
 8006af8:	3301      	adds	r3, #1
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	9303      	str	r3, [sp, #12]
 8006afe:	bfb8      	it	lt
 8006b00:	2301      	movlt	r3, #1
 8006b02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006b04:	2200      	movs	r2, #0
 8006b06:	6042      	str	r2, [r0, #4]
 8006b08:	2204      	movs	r2, #4
 8006b0a:	f102 0614 	add.w	r6, r2, #20
 8006b0e:	429e      	cmp	r6, r3
 8006b10:	6841      	ldr	r1, [r0, #4]
 8006b12:	d93d      	bls.n	8006b90 <_dtoa_r+0x318>
 8006b14:	4620      	mov	r0, r4
 8006b16:	f7ff f80b 	bl	8005b30 <_Balloc>
 8006b1a:	9001      	str	r0, [sp, #4]
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d13b      	bne.n	8006b98 <_dtoa_r+0x320>
 8006b20:	4b11      	ldr	r3, [pc, #68]	; (8006b68 <_dtoa_r+0x2f0>)
 8006b22:	4602      	mov	r2, r0
 8006b24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006b28:	e6c0      	b.n	80068ac <_dtoa_r+0x34>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e7df      	b.n	8006aee <_dtoa_r+0x276>
 8006b2e:	bf00      	nop
 8006b30:	636f4361 	.word	0x636f4361
 8006b34:	3fd287a7 	.word	0x3fd287a7
 8006b38:	8b60c8b3 	.word	0x8b60c8b3
 8006b3c:	3fc68a28 	.word	0x3fc68a28
 8006b40:	509f79fb 	.word	0x509f79fb
 8006b44:	3fd34413 	.word	0x3fd34413
 8006b48:	08008014 	.word	0x08008014
 8006b4c:	08008201 	.word	0x08008201
 8006b50:	7ff00000 	.word	0x7ff00000
 8006b54:	080081fb 	.word	0x080081fb
 8006b58:	080081f2 	.word	0x080081f2
 8006b5c:	08008200 	.word	0x08008200
 8006b60:	3ff80000 	.word	0x3ff80000
 8006b64:	080080c0 	.word	0x080080c0
 8006b68:	08008087 	.word	0x08008087
 8006b6c:	2501      	movs	r5, #1
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9306      	str	r3, [sp, #24]
 8006b72:	9508      	str	r5, [sp, #32]
 8006b74:	f04f 33ff 	mov.w	r3, #4294967295
 8006b78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	2312      	movs	r3, #18
 8006b80:	e7b0      	b.n	8006ae4 <_dtoa_r+0x26c>
 8006b82:	2301      	movs	r3, #1
 8006b84:	9308      	str	r3, [sp, #32]
 8006b86:	e7f5      	b.n	8006b74 <_dtoa_r+0x2fc>
 8006b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006b8e:	e7b8      	b.n	8006b02 <_dtoa_r+0x28a>
 8006b90:	3101      	adds	r1, #1
 8006b92:	6041      	str	r1, [r0, #4]
 8006b94:	0052      	lsls	r2, r2, #1
 8006b96:	e7b8      	b.n	8006b0a <_dtoa_r+0x292>
 8006b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b9a:	9a01      	ldr	r2, [sp, #4]
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	9b03      	ldr	r3, [sp, #12]
 8006ba0:	2b0e      	cmp	r3, #14
 8006ba2:	f200 809d 	bhi.w	8006ce0 <_dtoa_r+0x468>
 8006ba6:	2d00      	cmp	r5, #0
 8006ba8:	f000 809a 	beq.w	8006ce0 <_dtoa_r+0x468>
 8006bac:	9b00      	ldr	r3, [sp, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	dd32      	ble.n	8006c18 <_dtoa_r+0x3a0>
 8006bb2:	4ab7      	ldr	r2, [pc, #732]	; (8006e90 <_dtoa_r+0x618>)
 8006bb4:	f003 030f 	and.w	r3, r3, #15
 8006bb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006bbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bc0:	9b00      	ldr	r3, [sp, #0]
 8006bc2:	05d8      	lsls	r0, r3, #23
 8006bc4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006bc8:	d516      	bpl.n	8006bf8 <_dtoa_r+0x380>
 8006bca:	4bb2      	ldr	r3, [pc, #712]	; (8006e94 <_dtoa_r+0x61c>)
 8006bcc:	ec51 0b19 	vmov	r0, r1, d9
 8006bd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bd4:	f7f9 fe52 	bl	800087c <__aeabi_ddiv>
 8006bd8:	f007 070f 	and.w	r7, r7, #15
 8006bdc:	4682      	mov	sl, r0
 8006bde:	468b      	mov	fp, r1
 8006be0:	2503      	movs	r5, #3
 8006be2:	4eac      	ldr	r6, [pc, #688]	; (8006e94 <_dtoa_r+0x61c>)
 8006be4:	b957      	cbnz	r7, 8006bfc <_dtoa_r+0x384>
 8006be6:	4642      	mov	r2, r8
 8006be8:	464b      	mov	r3, r9
 8006bea:	4650      	mov	r0, sl
 8006bec:	4659      	mov	r1, fp
 8006bee:	f7f9 fe45 	bl	800087c <__aeabi_ddiv>
 8006bf2:	4682      	mov	sl, r0
 8006bf4:	468b      	mov	fp, r1
 8006bf6:	e028      	b.n	8006c4a <_dtoa_r+0x3d2>
 8006bf8:	2502      	movs	r5, #2
 8006bfa:	e7f2      	b.n	8006be2 <_dtoa_r+0x36a>
 8006bfc:	07f9      	lsls	r1, r7, #31
 8006bfe:	d508      	bpl.n	8006c12 <_dtoa_r+0x39a>
 8006c00:	4640      	mov	r0, r8
 8006c02:	4649      	mov	r1, r9
 8006c04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c08:	f7f9 fd0e 	bl	8000628 <__aeabi_dmul>
 8006c0c:	3501      	adds	r5, #1
 8006c0e:	4680      	mov	r8, r0
 8006c10:	4689      	mov	r9, r1
 8006c12:	107f      	asrs	r7, r7, #1
 8006c14:	3608      	adds	r6, #8
 8006c16:	e7e5      	b.n	8006be4 <_dtoa_r+0x36c>
 8006c18:	f000 809b 	beq.w	8006d52 <_dtoa_r+0x4da>
 8006c1c:	9b00      	ldr	r3, [sp, #0]
 8006c1e:	4f9d      	ldr	r7, [pc, #628]	; (8006e94 <_dtoa_r+0x61c>)
 8006c20:	425e      	negs	r6, r3
 8006c22:	4b9b      	ldr	r3, [pc, #620]	; (8006e90 <_dtoa_r+0x618>)
 8006c24:	f006 020f 	and.w	r2, r6, #15
 8006c28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c30:	ec51 0b19 	vmov	r0, r1, d9
 8006c34:	f7f9 fcf8 	bl	8000628 <__aeabi_dmul>
 8006c38:	1136      	asrs	r6, r6, #4
 8006c3a:	4682      	mov	sl, r0
 8006c3c:	468b      	mov	fp, r1
 8006c3e:	2300      	movs	r3, #0
 8006c40:	2502      	movs	r5, #2
 8006c42:	2e00      	cmp	r6, #0
 8006c44:	d17a      	bne.n	8006d3c <_dtoa_r+0x4c4>
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1d3      	bne.n	8006bf2 <_dtoa_r+0x37a>
 8006c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 8082 	beq.w	8006d56 <_dtoa_r+0x4de>
 8006c52:	4b91      	ldr	r3, [pc, #580]	; (8006e98 <_dtoa_r+0x620>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	4650      	mov	r0, sl
 8006c58:	4659      	mov	r1, fp
 8006c5a:	f7f9 ff57 	bl	8000b0c <__aeabi_dcmplt>
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d079      	beq.n	8006d56 <_dtoa_r+0x4de>
 8006c62:	9b03      	ldr	r3, [sp, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d076      	beq.n	8006d56 <_dtoa_r+0x4de>
 8006c68:	9b02      	ldr	r3, [sp, #8]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	dd36      	ble.n	8006cdc <_dtoa_r+0x464>
 8006c6e:	9b00      	ldr	r3, [sp, #0]
 8006c70:	4650      	mov	r0, sl
 8006c72:	4659      	mov	r1, fp
 8006c74:	1e5f      	subs	r7, r3, #1
 8006c76:	2200      	movs	r2, #0
 8006c78:	4b88      	ldr	r3, [pc, #544]	; (8006e9c <_dtoa_r+0x624>)
 8006c7a:	f7f9 fcd5 	bl	8000628 <__aeabi_dmul>
 8006c7e:	9e02      	ldr	r6, [sp, #8]
 8006c80:	4682      	mov	sl, r0
 8006c82:	468b      	mov	fp, r1
 8006c84:	3501      	adds	r5, #1
 8006c86:	4628      	mov	r0, r5
 8006c88:	f7f9 fc64 	bl	8000554 <__aeabi_i2d>
 8006c8c:	4652      	mov	r2, sl
 8006c8e:	465b      	mov	r3, fp
 8006c90:	f7f9 fcca 	bl	8000628 <__aeabi_dmul>
 8006c94:	4b82      	ldr	r3, [pc, #520]	; (8006ea0 <_dtoa_r+0x628>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	f7f9 fb10 	bl	80002bc <__adddf3>
 8006c9c:	46d0      	mov	r8, sl
 8006c9e:	46d9      	mov	r9, fp
 8006ca0:	4682      	mov	sl, r0
 8006ca2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006ca6:	2e00      	cmp	r6, #0
 8006ca8:	d158      	bne.n	8006d5c <_dtoa_r+0x4e4>
 8006caa:	4b7e      	ldr	r3, [pc, #504]	; (8006ea4 <_dtoa_r+0x62c>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	4640      	mov	r0, r8
 8006cb0:	4649      	mov	r1, r9
 8006cb2:	f7f9 fb01 	bl	80002b8 <__aeabi_dsub>
 8006cb6:	4652      	mov	r2, sl
 8006cb8:	465b      	mov	r3, fp
 8006cba:	4680      	mov	r8, r0
 8006cbc:	4689      	mov	r9, r1
 8006cbe:	f7f9 ff43 	bl	8000b48 <__aeabi_dcmpgt>
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	f040 8295 	bne.w	80071f2 <_dtoa_r+0x97a>
 8006cc8:	4652      	mov	r2, sl
 8006cca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006cce:	4640      	mov	r0, r8
 8006cd0:	4649      	mov	r1, r9
 8006cd2:	f7f9 ff1b 	bl	8000b0c <__aeabi_dcmplt>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	f040 8289 	bne.w	80071ee <_dtoa_r+0x976>
 8006cdc:	ec5b ab19 	vmov	sl, fp, d9
 8006ce0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f2c0 8148 	blt.w	8006f78 <_dtoa_r+0x700>
 8006ce8:	9a00      	ldr	r2, [sp, #0]
 8006cea:	2a0e      	cmp	r2, #14
 8006cec:	f300 8144 	bgt.w	8006f78 <_dtoa_r+0x700>
 8006cf0:	4b67      	ldr	r3, [pc, #412]	; (8006e90 <_dtoa_r+0x618>)
 8006cf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f280 80d5 	bge.w	8006eac <_dtoa_r+0x634>
 8006d02:	9b03      	ldr	r3, [sp, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f300 80d1 	bgt.w	8006eac <_dtoa_r+0x634>
 8006d0a:	f040 826f 	bne.w	80071ec <_dtoa_r+0x974>
 8006d0e:	4b65      	ldr	r3, [pc, #404]	; (8006ea4 <_dtoa_r+0x62c>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	4640      	mov	r0, r8
 8006d14:	4649      	mov	r1, r9
 8006d16:	f7f9 fc87 	bl	8000628 <__aeabi_dmul>
 8006d1a:	4652      	mov	r2, sl
 8006d1c:	465b      	mov	r3, fp
 8006d1e:	f7f9 ff09 	bl	8000b34 <__aeabi_dcmpge>
 8006d22:	9e03      	ldr	r6, [sp, #12]
 8006d24:	4637      	mov	r7, r6
 8006d26:	2800      	cmp	r0, #0
 8006d28:	f040 8245 	bne.w	80071b6 <_dtoa_r+0x93e>
 8006d2c:	9d01      	ldr	r5, [sp, #4]
 8006d2e:	2331      	movs	r3, #49	; 0x31
 8006d30:	f805 3b01 	strb.w	r3, [r5], #1
 8006d34:	9b00      	ldr	r3, [sp, #0]
 8006d36:	3301      	adds	r3, #1
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	e240      	b.n	80071be <_dtoa_r+0x946>
 8006d3c:	07f2      	lsls	r2, r6, #31
 8006d3e:	d505      	bpl.n	8006d4c <_dtoa_r+0x4d4>
 8006d40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d44:	f7f9 fc70 	bl	8000628 <__aeabi_dmul>
 8006d48:	3501      	adds	r5, #1
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	1076      	asrs	r6, r6, #1
 8006d4e:	3708      	adds	r7, #8
 8006d50:	e777      	b.n	8006c42 <_dtoa_r+0x3ca>
 8006d52:	2502      	movs	r5, #2
 8006d54:	e779      	b.n	8006c4a <_dtoa_r+0x3d2>
 8006d56:	9f00      	ldr	r7, [sp, #0]
 8006d58:	9e03      	ldr	r6, [sp, #12]
 8006d5a:	e794      	b.n	8006c86 <_dtoa_r+0x40e>
 8006d5c:	9901      	ldr	r1, [sp, #4]
 8006d5e:	4b4c      	ldr	r3, [pc, #304]	; (8006e90 <_dtoa_r+0x618>)
 8006d60:	4431      	add	r1, r6
 8006d62:	910d      	str	r1, [sp, #52]	; 0x34
 8006d64:	9908      	ldr	r1, [sp, #32]
 8006d66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006d6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d6e:	2900      	cmp	r1, #0
 8006d70:	d043      	beq.n	8006dfa <_dtoa_r+0x582>
 8006d72:	494d      	ldr	r1, [pc, #308]	; (8006ea8 <_dtoa_r+0x630>)
 8006d74:	2000      	movs	r0, #0
 8006d76:	f7f9 fd81 	bl	800087c <__aeabi_ddiv>
 8006d7a:	4652      	mov	r2, sl
 8006d7c:	465b      	mov	r3, fp
 8006d7e:	f7f9 fa9b 	bl	80002b8 <__aeabi_dsub>
 8006d82:	9d01      	ldr	r5, [sp, #4]
 8006d84:	4682      	mov	sl, r0
 8006d86:	468b      	mov	fp, r1
 8006d88:	4649      	mov	r1, r9
 8006d8a:	4640      	mov	r0, r8
 8006d8c:	f7f9 fee6 	bl	8000b5c <__aeabi_d2iz>
 8006d90:	4606      	mov	r6, r0
 8006d92:	f7f9 fbdf 	bl	8000554 <__aeabi_i2d>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4640      	mov	r0, r8
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	f7f9 fa8b 	bl	80002b8 <__aeabi_dsub>
 8006da2:	3630      	adds	r6, #48	; 0x30
 8006da4:	f805 6b01 	strb.w	r6, [r5], #1
 8006da8:	4652      	mov	r2, sl
 8006daa:	465b      	mov	r3, fp
 8006dac:	4680      	mov	r8, r0
 8006dae:	4689      	mov	r9, r1
 8006db0:	f7f9 feac 	bl	8000b0c <__aeabi_dcmplt>
 8006db4:	2800      	cmp	r0, #0
 8006db6:	d163      	bne.n	8006e80 <_dtoa_r+0x608>
 8006db8:	4642      	mov	r2, r8
 8006dba:	464b      	mov	r3, r9
 8006dbc:	4936      	ldr	r1, [pc, #216]	; (8006e98 <_dtoa_r+0x620>)
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	f7f9 fa7a 	bl	80002b8 <__aeabi_dsub>
 8006dc4:	4652      	mov	r2, sl
 8006dc6:	465b      	mov	r3, fp
 8006dc8:	f7f9 fea0 	bl	8000b0c <__aeabi_dcmplt>
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	f040 80b5 	bne.w	8006f3c <_dtoa_r+0x6c4>
 8006dd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dd4:	429d      	cmp	r5, r3
 8006dd6:	d081      	beq.n	8006cdc <_dtoa_r+0x464>
 8006dd8:	4b30      	ldr	r3, [pc, #192]	; (8006e9c <_dtoa_r+0x624>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	4650      	mov	r0, sl
 8006dde:	4659      	mov	r1, fp
 8006de0:	f7f9 fc22 	bl	8000628 <__aeabi_dmul>
 8006de4:	4b2d      	ldr	r3, [pc, #180]	; (8006e9c <_dtoa_r+0x624>)
 8006de6:	4682      	mov	sl, r0
 8006de8:	468b      	mov	fp, r1
 8006dea:	4640      	mov	r0, r8
 8006dec:	4649      	mov	r1, r9
 8006dee:	2200      	movs	r2, #0
 8006df0:	f7f9 fc1a 	bl	8000628 <__aeabi_dmul>
 8006df4:	4680      	mov	r8, r0
 8006df6:	4689      	mov	r9, r1
 8006df8:	e7c6      	b.n	8006d88 <_dtoa_r+0x510>
 8006dfa:	4650      	mov	r0, sl
 8006dfc:	4659      	mov	r1, fp
 8006dfe:	f7f9 fc13 	bl	8000628 <__aeabi_dmul>
 8006e02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e04:	9d01      	ldr	r5, [sp, #4]
 8006e06:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e08:	4682      	mov	sl, r0
 8006e0a:	468b      	mov	fp, r1
 8006e0c:	4649      	mov	r1, r9
 8006e0e:	4640      	mov	r0, r8
 8006e10:	f7f9 fea4 	bl	8000b5c <__aeabi_d2iz>
 8006e14:	4606      	mov	r6, r0
 8006e16:	f7f9 fb9d 	bl	8000554 <__aeabi_i2d>
 8006e1a:	3630      	adds	r6, #48	; 0x30
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	460b      	mov	r3, r1
 8006e20:	4640      	mov	r0, r8
 8006e22:	4649      	mov	r1, r9
 8006e24:	f7f9 fa48 	bl	80002b8 <__aeabi_dsub>
 8006e28:	f805 6b01 	strb.w	r6, [r5], #1
 8006e2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e2e:	429d      	cmp	r5, r3
 8006e30:	4680      	mov	r8, r0
 8006e32:	4689      	mov	r9, r1
 8006e34:	f04f 0200 	mov.w	r2, #0
 8006e38:	d124      	bne.n	8006e84 <_dtoa_r+0x60c>
 8006e3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ea8 <_dtoa_r+0x630>)
 8006e3c:	4650      	mov	r0, sl
 8006e3e:	4659      	mov	r1, fp
 8006e40:	f7f9 fa3c 	bl	80002bc <__adddf3>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4640      	mov	r0, r8
 8006e4a:	4649      	mov	r1, r9
 8006e4c:	f7f9 fe7c 	bl	8000b48 <__aeabi_dcmpgt>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d173      	bne.n	8006f3c <_dtoa_r+0x6c4>
 8006e54:	4652      	mov	r2, sl
 8006e56:	465b      	mov	r3, fp
 8006e58:	4913      	ldr	r1, [pc, #76]	; (8006ea8 <_dtoa_r+0x630>)
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	f7f9 fa2c 	bl	80002b8 <__aeabi_dsub>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	4640      	mov	r0, r8
 8006e66:	4649      	mov	r1, r9
 8006e68:	f7f9 fe50 	bl	8000b0c <__aeabi_dcmplt>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	f43f af35 	beq.w	8006cdc <_dtoa_r+0x464>
 8006e72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006e74:	1e6b      	subs	r3, r5, #1
 8006e76:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006e7c:	2b30      	cmp	r3, #48	; 0x30
 8006e7e:	d0f8      	beq.n	8006e72 <_dtoa_r+0x5fa>
 8006e80:	9700      	str	r7, [sp, #0]
 8006e82:	e049      	b.n	8006f18 <_dtoa_r+0x6a0>
 8006e84:	4b05      	ldr	r3, [pc, #20]	; (8006e9c <_dtoa_r+0x624>)
 8006e86:	f7f9 fbcf 	bl	8000628 <__aeabi_dmul>
 8006e8a:	4680      	mov	r8, r0
 8006e8c:	4689      	mov	r9, r1
 8006e8e:	e7bd      	b.n	8006e0c <_dtoa_r+0x594>
 8006e90:	080080c0 	.word	0x080080c0
 8006e94:	08008098 	.word	0x08008098
 8006e98:	3ff00000 	.word	0x3ff00000
 8006e9c:	40240000 	.word	0x40240000
 8006ea0:	401c0000 	.word	0x401c0000
 8006ea4:	40140000 	.word	0x40140000
 8006ea8:	3fe00000 	.word	0x3fe00000
 8006eac:	9d01      	ldr	r5, [sp, #4]
 8006eae:	4656      	mov	r6, sl
 8006eb0:	465f      	mov	r7, fp
 8006eb2:	4642      	mov	r2, r8
 8006eb4:	464b      	mov	r3, r9
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	4639      	mov	r1, r7
 8006eba:	f7f9 fcdf 	bl	800087c <__aeabi_ddiv>
 8006ebe:	f7f9 fe4d 	bl	8000b5c <__aeabi_d2iz>
 8006ec2:	4682      	mov	sl, r0
 8006ec4:	f7f9 fb46 	bl	8000554 <__aeabi_i2d>
 8006ec8:	4642      	mov	r2, r8
 8006eca:	464b      	mov	r3, r9
 8006ecc:	f7f9 fbac 	bl	8000628 <__aeabi_dmul>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	4639      	mov	r1, r7
 8006ed8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006edc:	f7f9 f9ec 	bl	80002b8 <__aeabi_dsub>
 8006ee0:	f805 6b01 	strb.w	r6, [r5], #1
 8006ee4:	9e01      	ldr	r6, [sp, #4]
 8006ee6:	9f03      	ldr	r7, [sp, #12]
 8006ee8:	1bae      	subs	r6, r5, r6
 8006eea:	42b7      	cmp	r7, r6
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	d135      	bne.n	8006f5e <_dtoa_r+0x6e6>
 8006ef2:	f7f9 f9e3 	bl	80002bc <__adddf3>
 8006ef6:	4642      	mov	r2, r8
 8006ef8:	464b      	mov	r3, r9
 8006efa:	4606      	mov	r6, r0
 8006efc:	460f      	mov	r7, r1
 8006efe:	f7f9 fe23 	bl	8000b48 <__aeabi_dcmpgt>
 8006f02:	b9d0      	cbnz	r0, 8006f3a <_dtoa_r+0x6c2>
 8006f04:	4642      	mov	r2, r8
 8006f06:	464b      	mov	r3, r9
 8006f08:	4630      	mov	r0, r6
 8006f0a:	4639      	mov	r1, r7
 8006f0c:	f7f9 fdf4 	bl	8000af8 <__aeabi_dcmpeq>
 8006f10:	b110      	cbz	r0, 8006f18 <_dtoa_r+0x6a0>
 8006f12:	f01a 0f01 	tst.w	sl, #1
 8006f16:	d110      	bne.n	8006f3a <_dtoa_r+0x6c2>
 8006f18:	4620      	mov	r0, r4
 8006f1a:	ee18 1a10 	vmov	r1, s16
 8006f1e:	f7fe fe47 	bl	8005bb0 <_Bfree>
 8006f22:	2300      	movs	r3, #0
 8006f24:	9800      	ldr	r0, [sp, #0]
 8006f26:	702b      	strb	r3, [r5, #0]
 8006f28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	6018      	str	r0, [r3, #0]
 8006f2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f43f acf1 	beq.w	8006918 <_dtoa_r+0xa0>
 8006f36:	601d      	str	r5, [r3, #0]
 8006f38:	e4ee      	b.n	8006918 <_dtoa_r+0xa0>
 8006f3a:	9f00      	ldr	r7, [sp, #0]
 8006f3c:	462b      	mov	r3, r5
 8006f3e:	461d      	mov	r5, r3
 8006f40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f44:	2a39      	cmp	r2, #57	; 0x39
 8006f46:	d106      	bne.n	8006f56 <_dtoa_r+0x6de>
 8006f48:	9a01      	ldr	r2, [sp, #4]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d1f7      	bne.n	8006f3e <_dtoa_r+0x6c6>
 8006f4e:	9901      	ldr	r1, [sp, #4]
 8006f50:	2230      	movs	r2, #48	; 0x30
 8006f52:	3701      	adds	r7, #1
 8006f54:	700a      	strb	r2, [r1, #0]
 8006f56:	781a      	ldrb	r2, [r3, #0]
 8006f58:	3201      	adds	r2, #1
 8006f5a:	701a      	strb	r2, [r3, #0]
 8006f5c:	e790      	b.n	8006e80 <_dtoa_r+0x608>
 8006f5e:	4ba6      	ldr	r3, [pc, #664]	; (80071f8 <_dtoa_r+0x980>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	f7f9 fb61 	bl	8000628 <__aeabi_dmul>
 8006f66:	2200      	movs	r2, #0
 8006f68:	2300      	movs	r3, #0
 8006f6a:	4606      	mov	r6, r0
 8006f6c:	460f      	mov	r7, r1
 8006f6e:	f7f9 fdc3 	bl	8000af8 <__aeabi_dcmpeq>
 8006f72:	2800      	cmp	r0, #0
 8006f74:	d09d      	beq.n	8006eb2 <_dtoa_r+0x63a>
 8006f76:	e7cf      	b.n	8006f18 <_dtoa_r+0x6a0>
 8006f78:	9a08      	ldr	r2, [sp, #32]
 8006f7a:	2a00      	cmp	r2, #0
 8006f7c:	f000 80d7 	beq.w	800712e <_dtoa_r+0x8b6>
 8006f80:	9a06      	ldr	r2, [sp, #24]
 8006f82:	2a01      	cmp	r2, #1
 8006f84:	f300 80ba 	bgt.w	80070fc <_dtoa_r+0x884>
 8006f88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f8a:	2a00      	cmp	r2, #0
 8006f8c:	f000 80b2 	beq.w	80070f4 <_dtoa_r+0x87c>
 8006f90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006f94:	9e07      	ldr	r6, [sp, #28]
 8006f96:	9d04      	ldr	r5, [sp, #16]
 8006f98:	9a04      	ldr	r2, [sp, #16]
 8006f9a:	441a      	add	r2, r3
 8006f9c:	9204      	str	r2, [sp, #16]
 8006f9e:	9a05      	ldr	r2, [sp, #20]
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	441a      	add	r2, r3
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	9205      	str	r2, [sp, #20]
 8006fa8:	f7fe feba 	bl	8005d20 <__i2b>
 8006fac:	4607      	mov	r7, r0
 8006fae:	2d00      	cmp	r5, #0
 8006fb0:	dd0c      	ble.n	8006fcc <_dtoa_r+0x754>
 8006fb2:	9b05      	ldr	r3, [sp, #20]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	dd09      	ble.n	8006fcc <_dtoa_r+0x754>
 8006fb8:	42ab      	cmp	r3, r5
 8006fba:	9a04      	ldr	r2, [sp, #16]
 8006fbc:	bfa8      	it	ge
 8006fbe:	462b      	movge	r3, r5
 8006fc0:	1ad2      	subs	r2, r2, r3
 8006fc2:	9204      	str	r2, [sp, #16]
 8006fc4:	9a05      	ldr	r2, [sp, #20]
 8006fc6:	1aed      	subs	r5, r5, r3
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	9305      	str	r3, [sp, #20]
 8006fcc:	9b07      	ldr	r3, [sp, #28]
 8006fce:	b31b      	cbz	r3, 8007018 <_dtoa_r+0x7a0>
 8006fd0:	9b08      	ldr	r3, [sp, #32]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f000 80af 	beq.w	8007136 <_dtoa_r+0x8be>
 8006fd8:	2e00      	cmp	r6, #0
 8006fda:	dd13      	ble.n	8007004 <_dtoa_r+0x78c>
 8006fdc:	4639      	mov	r1, r7
 8006fde:	4632      	mov	r2, r6
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f7fe ff5d 	bl	8005ea0 <__pow5mult>
 8006fe6:	ee18 2a10 	vmov	r2, s16
 8006fea:	4601      	mov	r1, r0
 8006fec:	4607      	mov	r7, r0
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f7fe feac 	bl	8005d4c <__multiply>
 8006ff4:	ee18 1a10 	vmov	r1, s16
 8006ff8:	4680      	mov	r8, r0
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f7fe fdd8 	bl	8005bb0 <_Bfree>
 8007000:	ee08 8a10 	vmov	s16, r8
 8007004:	9b07      	ldr	r3, [sp, #28]
 8007006:	1b9a      	subs	r2, r3, r6
 8007008:	d006      	beq.n	8007018 <_dtoa_r+0x7a0>
 800700a:	ee18 1a10 	vmov	r1, s16
 800700e:	4620      	mov	r0, r4
 8007010:	f7fe ff46 	bl	8005ea0 <__pow5mult>
 8007014:	ee08 0a10 	vmov	s16, r0
 8007018:	2101      	movs	r1, #1
 800701a:	4620      	mov	r0, r4
 800701c:	f7fe fe80 	bl	8005d20 <__i2b>
 8007020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007022:	2b00      	cmp	r3, #0
 8007024:	4606      	mov	r6, r0
 8007026:	f340 8088 	ble.w	800713a <_dtoa_r+0x8c2>
 800702a:	461a      	mov	r2, r3
 800702c:	4601      	mov	r1, r0
 800702e:	4620      	mov	r0, r4
 8007030:	f7fe ff36 	bl	8005ea0 <__pow5mult>
 8007034:	9b06      	ldr	r3, [sp, #24]
 8007036:	2b01      	cmp	r3, #1
 8007038:	4606      	mov	r6, r0
 800703a:	f340 8081 	ble.w	8007140 <_dtoa_r+0x8c8>
 800703e:	f04f 0800 	mov.w	r8, #0
 8007042:	6933      	ldr	r3, [r6, #16]
 8007044:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007048:	6918      	ldr	r0, [r3, #16]
 800704a:	f7fe fe19 	bl	8005c80 <__hi0bits>
 800704e:	f1c0 0020 	rsb	r0, r0, #32
 8007052:	9b05      	ldr	r3, [sp, #20]
 8007054:	4418      	add	r0, r3
 8007056:	f010 001f 	ands.w	r0, r0, #31
 800705a:	f000 8092 	beq.w	8007182 <_dtoa_r+0x90a>
 800705e:	f1c0 0320 	rsb	r3, r0, #32
 8007062:	2b04      	cmp	r3, #4
 8007064:	f340 808a 	ble.w	800717c <_dtoa_r+0x904>
 8007068:	f1c0 001c 	rsb	r0, r0, #28
 800706c:	9b04      	ldr	r3, [sp, #16]
 800706e:	4403      	add	r3, r0
 8007070:	9304      	str	r3, [sp, #16]
 8007072:	9b05      	ldr	r3, [sp, #20]
 8007074:	4403      	add	r3, r0
 8007076:	4405      	add	r5, r0
 8007078:	9305      	str	r3, [sp, #20]
 800707a:	9b04      	ldr	r3, [sp, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	dd07      	ble.n	8007090 <_dtoa_r+0x818>
 8007080:	ee18 1a10 	vmov	r1, s16
 8007084:	461a      	mov	r2, r3
 8007086:	4620      	mov	r0, r4
 8007088:	f7fe ff64 	bl	8005f54 <__lshift>
 800708c:	ee08 0a10 	vmov	s16, r0
 8007090:	9b05      	ldr	r3, [sp, #20]
 8007092:	2b00      	cmp	r3, #0
 8007094:	dd05      	ble.n	80070a2 <_dtoa_r+0x82a>
 8007096:	4631      	mov	r1, r6
 8007098:	461a      	mov	r2, r3
 800709a:	4620      	mov	r0, r4
 800709c:	f7fe ff5a 	bl	8005f54 <__lshift>
 80070a0:	4606      	mov	r6, r0
 80070a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d06e      	beq.n	8007186 <_dtoa_r+0x90e>
 80070a8:	ee18 0a10 	vmov	r0, s16
 80070ac:	4631      	mov	r1, r6
 80070ae:	f7fe ffc1 	bl	8006034 <__mcmp>
 80070b2:	2800      	cmp	r0, #0
 80070b4:	da67      	bge.n	8007186 <_dtoa_r+0x90e>
 80070b6:	9b00      	ldr	r3, [sp, #0]
 80070b8:	3b01      	subs	r3, #1
 80070ba:	ee18 1a10 	vmov	r1, s16
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	220a      	movs	r2, #10
 80070c2:	2300      	movs	r3, #0
 80070c4:	4620      	mov	r0, r4
 80070c6:	f7fe fd95 	bl	8005bf4 <__multadd>
 80070ca:	9b08      	ldr	r3, [sp, #32]
 80070cc:	ee08 0a10 	vmov	s16, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 81b1 	beq.w	8007438 <_dtoa_r+0xbc0>
 80070d6:	2300      	movs	r3, #0
 80070d8:	4639      	mov	r1, r7
 80070da:	220a      	movs	r2, #10
 80070dc:	4620      	mov	r0, r4
 80070de:	f7fe fd89 	bl	8005bf4 <__multadd>
 80070e2:	9b02      	ldr	r3, [sp, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	4607      	mov	r7, r0
 80070e8:	f300 808e 	bgt.w	8007208 <_dtoa_r+0x990>
 80070ec:	9b06      	ldr	r3, [sp, #24]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	dc51      	bgt.n	8007196 <_dtoa_r+0x91e>
 80070f2:	e089      	b.n	8007208 <_dtoa_r+0x990>
 80070f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80070f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80070fa:	e74b      	b.n	8006f94 <_dtoa_r+0x71c>
 80070fc:	9b03      	ldr	r3, [sp, #12]
 80070fe:	1e5e      	subs	r6, r3, #1
 8007100:	9b07      	ldr	r3, [sp, #28]
 8007102:	42b3      	cmp	r3, r6
 8007104:	bfbf      	itttt	lt
 8007106:	9b07      	ldrlt	r3, [sp, #28]
 8007108:	9607      	strlt	r6, [sp, #28]
 800710a:	1af2      	sublt	r2, r6, r3
 800710c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800710e:	bfb6      	itet	lt
 8007110:	189b      	addlt	r3, r3, r2
 8007112:	1b9e      	subge	r6, r3, r6
 8007114:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007116:	9b03      	ldr	r3, [sp, #12]
 8007118:	bfb8      	it	lt
 800711a:	2600      	movlt	r6, #0
 800711c:	2b00      	cmp	r3, #0
 800711e:	bfb7      	itett	lt
 8007120:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007124:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007128:	1a9d      	sublt	r5, r3, r2
 800712a:	2300      	movlt	r3, #0
 800712c:	e734      	b.n	8006f98 <_dtoa_r+0x720>
 800712e:	9e07      	ldr	r6, [sp, #28]
 8007130:	9d04      	ldr	r5, [sp, #16]
 8007132:	9f08      	ldr	r7, [sp, #32]
 8007134:	e73b      	b.n	8006fae <_dtoa_r+0x736>
 8007136:	9a07      	ldr	r2, [sp, #28]
 8007138:	e767      	b.n	800700a <_dtoa_r+0x792>
 800713a:	9b06      	ldr	r3, [sp, #24]
 800713c:	2b01      	cmp	r3, #1
 800713e:	dc18      	bgt.n	8007172 <_dtoa_r+0x8fa>
 8007140:	f1ba 0f00 	cmp.w	sl, #0
 8007144:	d115      	bne.n	8007172 <_dtoa_r+0x8fa>
 8007146:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800714a:	b993      	cbnz	r3, 8007172 <_dtoa_r+0x8fa>
 800714c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007150:	0d1b      	lsrs	r3, r3, #20
 8007152:	051b      	lsls	r3, r3, #20
 8007154:	b183      	cbz	r3, 8007178 <_dtoa_r+0x900>
 8007156:	9b04      	ldr	r3, [sp, #16]
 8007158:	3301      	adds	r3, #1
 800715a:	9304      	str	r3, [sp, #16]
 800715c:	9b05      	ldr	r3, [sp, #20]
 800715e:	3301      	adds	r3, #1
 8007160:	9305      	str	r3, [sp, #20]
 8007162:	f04f 0801 	mov.w	r8, #1
 8007166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007168:	2b00      	cmp	r3, #0
 800716a:	f47f af6a 	bne.w	8007042 <_dtoa_r+0x7ca>
 800716e:	2001      	movs	r0, #1
 8007170:	e76f      	b.n	8007052 <_dtoa_r+0x7da>
 8007172:	f04f 0800 	mov.w	r8, #0
 8007176:	e7f6      	b.n	8007166 <_dtoa_r+0x8ee>
 8007178:	4698      	mov	r8, r3
 800717a:	e7f4      	b.n	8007166 <_dtoa_r+0x8ee>
 800717c:	f43f af7d 	beq.w	800707a <_dtoa_r+0x802>
 8007180:	4618      	mov	r0, r3
 8007182:	301c      	adds	r0, #28
 8007184:	e772      	b.n	800706c <_dtoa_r+0x7f4>
 8007186:	9b03      	ldr	r3, [sp, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	dc37      	bgt.n	80071fc <_dtoa_r+0x984>
 800718c:	9b06      	ldr	r3, [sp, #24]
 800718e:	2b02      	cmp	r3, #2
 8007190:	dd34      	ble.n	80071fc <_dtoa_r+0x984>
 8007192:	9b03      	ldr	r3, [sp, #12]
 8007194:	9302      	str	r3, [sp, #8]
 8007196:	9b02      	ldr	r3, [sp, #8]
 8007198:	b96b      	cbnz	r3, 80071b6 <_dtoa_r+0x93e>
 800719a:	4631      	mov	r1, r6
 800719c:	2205      	movs	r2, #5
 800719e:	4620      	mov	r0, r4
 80071a0:	f7fe fd28 	bl	8005bf4 <__multadd>
 80071a4:	4601      	mov	r1, r0
 80071a6:	4606      	mov	r6, r0
 80071a8:	ee18 0a10 	vmov	r0, s16
 80071ac:	f7fe ff42 	bl	8006034 <__mcmp>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	f73f adbb 	bgt.w	8006d2c <_dtoa_r+0x4b4>
 80071b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b8:	9d01      	ldr	r5, [sp, #4]
 80071ba:	43db      	mvns	r3, r3
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	f04f 0800 	mov.w	r8, #0
 80071c2:	4631      	mov	r1, r6
 80071c4:	4620      	mov	r0, r4
 80071c6:	f7fe fcf3 	bl	8005bb0 <_Bfree>
 80071ca:	2f00      	cmp	r7, #0
 80071cc:	f43f aea4 	beq.w	8006f18 <_dtoa_r+0x6a0>
 80071d0:	f1b8 0f00 	cmp.w	r8, #0
 80071d4:	d005      	beq.n	80071e2 <_dtoa_r+0x96a>
 80071d6:	45b8      	cmp	r8, r7
 80071d8:	d003      	beq.n	80071e2 <_dtoa_r+0x96a>
 80071da:	4641      	mov	r1, r8
 80071dc:	4620      	mov	r0, r4
 80071de:	f7fe fce7 	bl	8005bb0 <_Bfree>
 80071e2:	4639      	mov	r1, r7
 80071e4:	4620      	mov	r0, r4
 80071e6:	f7fe fce3 	bl	8005bb0 <_Bfree>
 80071ea:	e695      	b.n	8006f18 <_dtoa_r+0x6a0>
 80071ec:	2600      	movs	r6, #0
 80071ee:	4637      	mov	r7, r6
 80071f0:	e7e1      	b.n	80071b6 <_dtoa_r+0x93e>
 80071f2:	9700      	str	r7, [sp, #0]
 80071f4:	4637      	mov	r7, r6
 80071f6:	e599      	b.n	8006d2c <_dtoa_r+0x4b4>
 80071f8:	40240000 	.word	0x40240000
 80071fc:	9b08      	ldr	r3, [sp, #32]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f000 80ca 	beq.w	8007398 <_dtoa_r+0xb20>
 8007204:	9b03      	ldr	r3, [sp, #12]
 8007206:	9302      	str	r3, [sp, #8]
 8007208:	2d00      	cmp	r5, #0
 800720a:	dd05      	ble.n	8007218 <_dtoa_r+0x9a0>
 800720c:	4639      	mov	r1, r7
 800720e:	462a      	mov	r2, r5
 8007210:	4620      	mov	r0, r4
 8007212:	f7fe fe9f 	bl	8005f54 <__lshift>
 8007216:	4607      	mov	r7, r0
 8007218:	f1b8 0f00 	cmp.w	r8, #0
 800721c:	d05b      	beq.n	80072d6 <_dtoa_r+0xa5e>
 800721e:	6879      	ldr	r1, [r7, #4]
 8007220:	4620      	mov	r0, r4
 8007222:	f7fe fc85 	bl	8005b30 <_Balloc>
 8007226:	4605      	mov	r5, r0
 8007228:	b928      	cbnz	r0, 8007236 <_dtoa_r+0x9be>
 800722a:	4b87      	ldr	r3, [pc, #540]	; (8007448 <_dtoa_r+0xbd0>)
 800722c:	4602      	mov	r2, r0
 800722e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007232:	f7ff bb3b 	b.w	80068ac <_dtoa_r+0x34>
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	3202      	adds	r2, #2
 800723a:	0092      	lsls	r2, r2, #2
 800723c:	f107 010c 	add.w	r1, r7, #12
 8007240:	300c      	adds	r0, #12
 8007242:	f000 f921 	bl	8007488 <memcpy>
 8007246:	2201      	movs	r2, #1
 8007248:	4629      	mov	r1, r5
 800724a:	4620      	mov	r0, r4
 800724c:	f7fe fe82 	bl	8005f54 <__lshift>
 8007250:	9b01      	ldr	r3, [sp, #4]
 8007252:	f103 0901 	add.w	r9, r3, #1
 8007256:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800725a:	4413      	add	r3, r2
 800725c:	9305      	str	r3, [sp, #20]
 800725e:	f00a 0301 	and.w	r3, sl, #1
 8007262:	46b8      	mov	r8, r7
 8007264:	9304      	str	r3, [sp, #16]
 8007266:	4607      	mov	r7, r0
 8007268:	4631      	mov	r1, r6
 800726a:	ee18 0a10 	vmov	r0, s16
 800726e:	f7ff fa75 	bl	800675c <quorem>
 8007272:	4641      	mov	r1, r8
 8007274:	9002      	str	r0, [sp, #8]
 8007276:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800727a:	ee18 0a10 	vmov	r0, s16
 800727e:	f7fe fed9 	bl	8006034 <__mcmp>
 8007282:	463a      	mov	r2, r7
 8007284:	9003      	str	r0, [sp, #12]
 8007286:	4631      	mov	r1, r6
 8007288:	4620      	mov	r0, r4
 800728a:	f7fe feef 	bl	800606c <__mdiff>
 800728e:	68c2      	ldr	r2, [r0, #12]
 8007290:	f109 3bff 	add.w	fp, r9, #4294967295
 8007294:	4605      	mov	r5, r0
 8007296:	bb02      	cbnz	r2, 80072da <_dtoa_r+0xa62>
 8007298:	4601      	mov	r1, r0
 800729a:	ee18 0a10 	vmov	r0, s16
 800729e:	f7fe fec9 	bl	8006034 <__mcmp>
 80072a2:	4602      	mov	r2, r0
 80072a4:	4629      	mov	r1, r5
 80072a6:	4620      	mov	r0, r4
 80072a8:	9207      	str	r2, [sp, #28]
 80072aa:	f7fe fc81 	bl	8005bb0 <_Bfree>
 80072ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80072b2:	ea43 0102 	orr.w	r1, r3, r2
 80072b6:	9b04      	ldr	r3, [sp, #16]
 80072b8:	430b      	orrs	r3, r1
 80072ba:	464d      	mov	r5, r9
 80072bc:	d10f      	bne.n	80072de <_dtoa_r+0xa66>
 80072be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80072c2:	d02a      	beq.n	800731a <_dtoa_r+0xaa2>
 80072c4:	9b03      	ldr	r3, [sp, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	dd02      	ble.n	80072d0 <_dtoa_r+0xa58>
 80072ca:	9b02      	ldr	r3, [sp, #8]
 80072cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80072d0:	f88b a000 	strb.w	sl, [fp]
 80072d4:	e775      	b.n	80071c2 <_dtoa_r+0x94a>
 80072d6:	4638      	mov	r0, r7
 80072d8:	e7ba      	b.n	8007250 <_dtoa_r+0x9d8>
 80072da:	2201      	movs	r2, #1
 80072dc:	e7e2      	b.n	80072a4 <_dtoa_r+0xa2c>
 80072de:	9b03      	ldr	r3, [sp, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	db04      	blt.n	80072ee <_dtoa_r+0xa76>
 80072e4:	9906      	ldr	r1, [sp, #24]
 80072e6:	430b      	orrs	r3, r1
 80072e8:	9904      	ldr	r1, [sp, #16]
 80072ea:	430b      	orrs	r3, r1
 80072ec:	d122      	bne.n	8007334 <_dtoa_r+0xabc>
 80072ee:	2a00      	cmp	r2, #0
 80072f0:	ddee      	ble.n	80072d0 <_dtoa_r+0xa58>
 80072f2:	ee18 1a10 	vmov	r1, s16
 80072f6:	2201      	movs	r2, #1
 80072f8:	4620      	mov	r0, r4
 80072fa:	f7fe fe2b 	bl	8005f54 <__lshift>
 80072fe:	4631      	mov	r1, r6
 8007300:	ee08 0a10 	vmov	s16, r0
 8007304:	f7fe fe96 	bl	8006034 <__mcmp>
 8007308:	2800      	cmp	r0, #0
 800730a:	dc03      	bgt.n	8007314 <_dtoa_r+0xa9c>
 800730c:	d1e0      	bne.n	80072d0 <_dtoa_r+0xa58>
 800730e:	f01a 0f01 	tst.w	sl, #1
 8007312:	d0dd      	beq.n	80072d0 <_dtoa_r+0xa58>
 8007314:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007318:	d1d7      	bne.n	80072ca <_dtoa_r+0xa52>
 800731a:	2339      	movs	r3, #57	; 0x39
 800731c:	f88b 3000 	strb.w	r3, [fp]
 8007320:	462b      	mov	r3, r5
 8007322:	461d      	mov	r5, r3
 8007324:	3b01      	subs	r3, #1
 8007326:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800732a:	2a39      	cmp	r2, #57	; 0x39
 800732c:	d071      	beq.n	8007412 <_dtoa_r+0xb9a>
 800732e:	3201      	adds	r2, #1
 8007330:	701a      	strb	r2, [r3, #0]
 8007332:	e746      	b.n	80071c2 <_dtoa_r+0x94a>
 8007334:	2a00      	cmp	r2, #0
 8007336:	dd07      	ble.n	8007348 <_dtoa_r+0xad0>
 8007338:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800733c:	d0ed      	beq.n	800731a <_dtoa_r+0xaa2>
 800733e:	f10a 0301 	add.w	r3, sl, #1
 8007342:	f88b 3000 	strb.w	r3, [fp]
 8007346:	e73c      	b.n	80071c2 <_dtoa_r+0x94a>
 8007348:	9b05      	ldr	r3, [sp, #20]
 800734a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800734e:	4599      	cmp	r9, r3
 8007350:	d047      	beq.n	80073e2 <_dtoa_r+0xb6a>
 8007352:	ee18 1a10 	vmov	r1, s16
 8007356:	2300      	movs	r3, #0
 8007358:	220a      	movs	r2, #10
 800735a:	4620      	mov	r0, r4
 800735c:	f7fe fc4a 	bl	8005bf4 <__multadd>
 8007360:	45b8      	cmp	r8, r7
 8007362:	ee08 0a10 	vmov	s16, r0
 8007366:	f04f 0300 	mov.w	r3, #0
 800736a:	f04f 020a 	mov.w	r2, #10
 800736e:	4641      	mov	r1, r8
 8007370:	4620      	mov	r0, r4
 8007372:	d106      	bne.n	8007382 <_dtoa_r+0xb0a>
 8007374:	f7fe fc3e 	bl	8005bf4 <__multadd>
 8007378:	4680      	mov	r8, r0
 800737a:	4607      	mov	r7, r0
 800737c:	f109 0901 	add.w	r9, r9, #1
 8007380:	e772      	b.n	8007268 <_dtoa_r+0x9f0>
 8007382:	f7fe fc37 	bl	8005bf4 <__multadd>
 8007386:	4639      	mov	r1, r7
 8007388:	4680      	mov	r8, r0
 800738a:	2300      	movs	r3, #0
 800738c:	220a      	movs	r2, #10
 800738e:	4620      	mov	r0, r4
 8007390:	f7fe fc30 	bl	8005bf4 <__multadd>
 8007394:	4607      	mov	r7, r0
 8007396:	e7f1      	b.n	800737c <_dtoa_r+0xb04>
 8007398:	9b03      	ldr	r3, [sp, #12]
 800739a:	9302      	str	r3, [sp, #8]
 800739c:	9d01      	ldr	r5, [sp, #4]
 800739e:	ee18 0a10 	vmov	r0, s16
 80073a2:	4631      	mov	r1, r6
 80073a4:	f7ff f9da 	bl	800675c <quorem>
 80073a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80073ac:	9b01      	ldr	r3, [sp, #4]
 80073ae:	f805 ab01 	strb.w	sl, [r5], #1
 80073b2:	1aea      	subs	r2, r5, r3
 80073b4:	9b02      	ldr	r3, [sp, #8]
 80073b6:	4293      	cmp	r3, r2
 80073b8:	dd09      	ble.n	80073ce <_dtoa_r+0xb56>
 80073ba:	ee18 1a10 	vmov	r1, s16
 80073be:	2300      	movs	r3, #0
 80073c0:	220a      	movs	r2, #10
 80073c2:	4620      	mov	r0, r4
 80073c4:	f7fe fc16 	bl	8005bf4 <__multadd>
 80073c8:	ee08 0a10 	vmov	s16, r0
 80073cc:	e7e7      	b.n	800739e <_dtoa_r+0xb26>
 80073ce:	9b02      	ldr	r3, [sp, #8]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	bfc8      	it	gt
 80073d4:	461d      	movgt	r5, r3
 80073d6:	9b01      	ldr	r3, [sp, #4]
 80073d8:	bfd8      	it	le
 80073da:	2501      	movle	r5, #1
 80073dc:	441d      	add	r5, r3
 80073de:	f04f 0800 	mov.w	r8, #0
 80073e2:	ee18 1a10 	vmov	r1, s16
 80073e6:	2201      	movs	r2, #1
 80073e8:	4620      	mov	r0, r4
 80073ea:	f7fe fdb3 	bl	8005f54 <__lshift>
 80073ee:	4631      	mov	r1, r6
 80073f0:	ee08 0a10 	vmov	s16, r0
 80073f4:	f7fe fe1e 	bl	8006034 <__mcmp>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	dc91      	bgt.n	8007320 <_dtoa_r+0xaa8>
 80073fc:	d102      	bne.n	8007404 <_dtoa_r+0xb8c>
 80073fe:	f01a 0f01 	tst.w	sl, #1
 8007402:	d18d      	bne.n	8007320 <_dtoa_r+0xaa8>
 8007404:	462b      	mov	r3, r5
 8007406:	461d      	mov	r5, r3
 8007408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800740c:	2a30      	cmp	r2, #48	; 0x30
 800740e:	d0fa      	beq.n	8007406 <_dtoa_r+0xb8e>
 8007410:	e6d7      	b.n	80071c2 <_dtoa_r+0x94a>
 8007412:	9a01      	ldr	r2, [sp, #4]
 8007414:	429a      	cmp	r2, r3
 8007416:	d184      	bne.n	8007322 <_dtoa_r+0xaaa>
 8007418:	9b00      	ldr	r3, [sp, #0]
 800741a:	3301      	adds	r3, #1
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	2331      	movs	r3, #49	; 0x31
 8007420:	7013      	strb	r3, [r2, #0]
 8007422:	e6ce      	b.n	80071c2 <_dtoa_r+0x94a>
 8007424:	4b09      	ldr	r3, [pc, #36]	; (800744c <_dtoa_r+0xbd4>)
 8007426:	f7ff ba95 	b.w	8006954 <_dtoa_r+0xdc>
 800742a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800742c:	2b00      	cmp	r3, #0
 800742e:	f47f aa6e 	bne.w	800690e <_dtoa_r+0x96>
 8007432:	4b07      	ldr	r3, [pc, #28]	; (8007450 <_dtoa_r+0xbd8>)
 8007434:	f7ff ba8e 	b.w	8006954 <_dtoa_r+0xdc>
 8007438:	9b02      	ldr	r3, [sp, #8]
 800743a:	2b00      	cmp	r3, #0
 800743c:	dcae      	bgt.n	800739c <_dtoa_r+0xb24>
 800743e:	9b06      	ldr	r3, [sp, #24]
 8007440:	2b02      	cmp	r3, #2
 8007442:	f73f aea8 	bgt.w	8007196 <_dtoa_r+0x91e>
 8007446:	e7a9      	b.n	800739c <_dtoa_r+0xb24>
 8007448:	08008087 	.word	0x08008087
 800744c:	080081ff 	.word	0x080081ff
 8007450:	080081f2 	.word	0x080081f2

08007454 <fiprintf>:
 8007454:	b40e      	push	{r1, r2, r3}
 8007456:	b503      	push	{r0, r1, lr}
 8007458:	4601      	mov	r1, r0
 800745a:	ab03      	add	r3, sp, #12
 800745c:	4805      	ldr	r0, [pc, #20]	; (8007474 <fiprintf+0x20>)
 800745e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007462:	6800      	ldr	r0, [r0, #0]
 8007464:	9301      	str	r3, [sp, #4]
 8007466:	f000 f89f 	bl	80075a8 <_vfiprintf_r>
 800746a:	b002      	add	sp, #8
 800746c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007470:	b003      	add	sp, #12
 8007472:	4770      	bx	lr
 8007474:	2000001c 	.word	0x2000001c

08007478 <malloc>:
 8007478:	4b02      	ldr	r3, [pc, #8]	; (8007484 <malloc+0xc>)
 800747a:	4601      	mov	r1, r0
 800747c:	6818      	ldr	r0, [r3, #0]
 800747e:	f7fe bf2f 	b.w	80062e0 <_malloc_r>
 8007482:	bf00      	nop
 8007484:	2000001c 	.word	0x2000001c

08007488 <memcpy>:
 8007488:	440a      	add	r2, r1
 800748a:	4291      	cmp	r1, r2
 800748c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007490:	d100      	bne.n	8007494 <memcpy+0xc>
 8007492:	4770      	bx	lr
 8007494:	b510      	push	{r4, lr}
 8007496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800749a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800749e:	4291      	cmp	r1, r2
 80074a0:	d1f9      	bne.n	8007496 <memcpy+0xe>
 80074a2:	bd10      	pop	{r4, pc}

080074a4 <__malloc_lock>:
 80074a4:	4801      	ldr	r0, [pc, #4]	; (80074ac <__malloc_lock+0x8>)
 80074a6:	f000 bc2f 	b.w	8007d08 <__retarget_lock_acquire_recursive>
 80074aa:	bf00      	nop
 80074ac:	20000294 	.word	0x20000294

080074b0 <__malloc_unlock>:
 80074b0:	4801      	ldr	r0, [pc, #4]	; (80074b8 <__malloc_unlock+0x8>)
 80074b2:	f000 bc2a 	b.w	8007d0a <__retarget_lock_release_recursive>
 80074b6:	bf00      	nop
 80074b8:	20000294 	.word	0x20000294

080074bc <_free_r>:
 80074bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074be:	2900      	cmp	r1, #0
 80074c0:	d044      	beq.n	800754c <_free_r+0x90>
 80074c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074c6:	9001      	str	r0, [sp, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f1a1 0404 	sub.w	r4, r1, #4
 80074ce:	bfb8      	it	lt
 80074d0:	18e4      	addlt	r4, r4, r3
 80074d2:	f7ff ffe7 	bl	80074a4 <__malloc_lock>
 80074d6:	4a1e      	ldr	r2, [pc, #120]	; (8007550 <_free_r+0x94>)
 80074d8:	9801      	ldr	r0, [sp, #4]
 80074da:	6813      	ldr	r3, [r2, #0]
 80074dc:	b933      	cbnz	r3, 80074ec <_free_r+0x30>
 80074de:	6063      	str	r3, [r4, #4]
 80074e0:	6014      	str	r4, [r2, #0]
 80074e2:	b003      	add	sp, #12
 80074e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074e8:	f7ff bfe2 	b.w	80074b0 <__malloc_unlock>
 80074ec:	42a3      	cmp	r3, r4
 80074ee:	d908      	bls.n	8007502 <_free_r+0x46>
 80074f0:	6825      	ldr	r5, [r4, #0]
 80074f2:	1961      	adds	r1, r4, r5
 80074f4:	428b      	cmp	r3, r1
 80074f6:	bf01      	itttt	eq
 80074f8:	6819      	ldreq	r1, [r3, #0]
 80074fa:	685b      	ldreq	r3, [r3, #4]
 80074fc:	1949      	addeq	r1, r1, r5
 80074fe:	6021      	streq	r1, [r4, #0]
 8007500:	e7ed      	b.n	80074de <_free_r+0x22>
 8007502:	461a      	mov	r2, r3
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	b10b      	cbz	r3, 800750c <_free_r+0x50>
 8007508:	42a3      	cmp	r3, r4
 800750a:	d9fa      	bls.n	8007502 <_free_r+0x46>
 800750c:	6811      	ldr	r1, [r2, #0]
 800750e:	1855      	adds	r5, r2, r1
 8007510:	42a5      	cmp	r5, r4
 8007512:	d10b      	bne.n	800752c <_free_r+0x70>
 8007514:	6824      	ldr	r4, [r4, #0]
 8007516:	4421      	add	r1, r4
 8007518:	1854      	adds	r4, r2, r1
 800751a:	42a3      	cmp	r3, r4
 800751c:	6011      	str	r1, [r2, #0]
 800751e:	d1e0      	bne.n	80074e2 <_free_r+0x26>
 8007520:	681c      	ldr	r4, [r3, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	6053      	str	r3, [r2, #4]
 8007526:	4421      	add	r1, r4
 8007528:	6011      	str	r1, [r2, #0]
 800752a:	e7da      	b.n	80074e2 <_free_r+0x26>
 800752c:	d902      	bls.n	8007534 <_free_r+0x78>
 800752e:	230c      	movs	r3, #12
 8007530:	6003      	str	r3, [r0, #0]
 8007532:	e7d6      	b.n	80074e2 <_free_r+0x26>
 8007534:	6825      	ldr	r5, [r4, #0]
 8007536:	1961      	adds	r1, r4, r5
 8007538:	428b      	cmp	r3, r1
 800753a:	bf04      	itt	eq
 800753c:	6819      	ldreq	r1, [r3, #0]
 800753e:	685b      	ldreq	r3, [r3, #4]
 8007540:	6063      	str	r3, [r4, #4]
 8007542:	bf04      	itt	eq
 8007544:	1949      	addeq	r1, r1, r5
 8007546:	6021      	streq	r1, [r4, #0]
 8007548:	6054      	str	r4, [r2, #4]
 800754a:	e7ca      	b.n	80074e2 <_free_r+0x26>
 800754c:	b003      	add	sp, #12
 800754e:	bd30      	pop	{r4, r5, pc}
 8007550:	20000288 	.word	0x20000288

08007554 <__sfputc_r>:
 8007554:	6893      	ldr	r3, [r2, #8]
 8007556:	3b01      	subs	r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	b410      	push	{r4}
 800755c:	6093      	str	r3, [r2, #8]
 800755e:	da08      	bge.n	8007572 <__sfputc_r+0x1e>
 8007560:	6994      	ldr	r4, [r2, #24]
 8007562:	42a3      	cmp	r3, r4
 8007564:	db01      	blt.n	800756a <__sfputc_r+0x16>
 8007566:	290a      	cmp	r1, #10
 8007568:	d103      	bne.n	8007572 <__sfputc_r+0x1e>
 800756a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800756e:	f000 b94b 	b.w	8007808 <__swbuf_r>
 8007572:	6813      	ldr	r3, [r2, #0]
 8007574:	1c58      	adds	r0, r3, #1
 8007576:	6010      	str	r0, [r2, #0]
 8007578:	7019      	strb	r1, [r3, #0]
 800757a:	4608      	mov	r0, r1
 800757c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007580:	4770      	bx	lr

08007582 <__sfputs_r>:
 8007582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007584:	4606      	mov	r6, r0
 8007586:	460f      	mov	r7, r1
 8007588:	4614      	mov	r4, r2
 800758a:	18d5      	adds	r5, r2, r3
 800758c:	42ac      	cmp	r4, r5
 800758e:	d101      	bne.n	8007594 <__sfputs_r+0x12>
 8007590:	2000      	movs	r0, #0
 8007592:	e007      	b.n	80075a4 <__sfputs_r+0x22>
 8007594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007598:	463a      	mov	r2, r7
 800759a:	4630      	mov	r0, r6
 800759c:	f7ff ffda 	bl	8007554 <__sfputc_r>
 80075a0:	1c43      	adds	r3, r0, #1
 80075a2:	d1f3      	bne.n	800758c <__sfputs_r+0xa>
 80075a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075a8 <_vfiprintf_r>:
 80075a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	460d      	mov	r5, r1
 80075ae:	b09d      	sub	sp, #116	; 0x74
 80075b0:	4614      	mov	r4, r2
 80075b2:	4698      	mov	r8, r3
 80075b4:	4606      	mov	r6, r0
 80075b6:	b118      	cbz	r0, 80075c0 <_vfiprintf_r+0x18>
 80075b8:	6983      	ldr	r3, [r0, #24]
 80075ba:	b90b      	cbnz	r3, 80075c0 <_vfiprintf_r+0x18>
 80075bc:	f000 fb06 	bl	8007bcc <__sinit>
 80075c0:	4b89      	ldr	r3, [pc, #548]	; (80077e8 <_vfiprintf_r+0x240>)
 80075c2:	429d      	cmp	r5, r3
 80075c4:	d11b      	bne.n	80075fe <_vfiprintf_r+0x56>
 80075c6:	6875      	ldr	r5, [r6, #4]
 80075c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075ca:	07d9      	lsls	r1, r3, #31
 80075cc:	d405      	bmi.n	80075da <_vfiprintf_r+0x32>
 80075ce:	89ab      	ldrh	r3, [r5, #12]
 80075d0:	059a      	lsls	r2, r3, #22
 80075d2:	d402      	bmi.n	80075da <_vfiprintf_r+0x32>
 80075d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075d6:	f000 fb97 	bl	8007d08 <__retarget_lock_acquire_recursive>
 80075da:	89ab      	ldrh	r3, [r5, #12]
 80075dc:	071b      	lsls	r3, r3, #28
 80075de:	d501      	bpl.n	80075e4 <_vfiprintf_r+0x3c>
 80075e0:	692b      	ldr	r3, [r5, #16]
 80075e2:	b9eb      	cbnz	r3, 8007620 <_vfiprintf_r+0x78>
 80075e4:	4629      	mov	r1, r5
 80075e6:	4630      	mov	r0, r6
 80075e8:	f000 f960 	bl	80078ac <__swsetup_r>
 80075ec:	b1c0      	cbz	r0, 8007620 <_vfiprintf_r+0x78>
 80075ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075f0:	07dc      	lsls	r4, r3, #31
 80075f2:	d50e      	bpl.n	8007612 <_vfiprintf_r+0x6a>
 80075f4:	f04f 30ff 	mov.w	r0, #4294967295
 80075f8:	b01d      	add	sp, #116	; 0x74
 80075fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075fe:	4b7b      	ldr	r3, [pc, #492]	; (80077ec <_vfiprintf_r+0x244>)
 8007600:	429d      	cmp	r5, r3
 8007602:	d101      	bne.n	8007608 <_vfiprintf_r+0x60>
 8007604:	68b5      	ldr	r5, [r6, #8]
 8007606:	e7df      	b.n	80075c8 <_vfiprintf_r+0x20>
 8007608:	4b79      	ldr	r3, [pc, #484]	; (80077f0 <_vfiprintf_r+0x248>)
 800760a:	429d      	cmp	r5, r3
 800760c:	bf08      	it	eq
 800760e:	68f5      	ldreq	r5, [r6, #12]
 8007610:	e7da      	b.n	80075c8 <_vfiprintf_r+0x20>
 8007612:	89ab      	ldrh	r3, [r5, #12]
 8007614:	0598      	lsls	r0, r3, #22
 8007616:	d4ed      	bmi.n	80075f4 <_vfiprintf_r+0x4c>
 8007618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800761a:	f000 fb76 	bl	8007d0a <__retarget_lock_release_recursive>
 800761e:	e7e9      	b.n	80075f4 <_vfiprintf_r+0x4c>
 8007620:	2300      	movs	r3, #0
 8007622:	9309      	str	r3, [sp, #36]	; 0x24
 8007624:	2320      	movs	r3, #32
 8007626:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800762a:	f8cd 800c 	str.w	r8, [sp, #12]
 800762e:	2330      	movs	r3, #48	; 0x30
 8007630:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80077f4 <_vfiprintf_r+0x24c>
 8007634:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007638:	f04f 0901 	mov.w	r9, #1
 800763c:	4623      	mov	r3, r4
 800763e:	469a      	mov	sl, r3
 8007640:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007644:	b10a      	cbz	r2, 800764a <_vfiprintf_r+0xa2>
 8007646:	2a25      	cmp	r2, #37	; 0x25
 8007648:	d1f9      	bne.n	800763e <_vfiprintf_r+0x96>
 800764a:	ebba 0b04 	subs.w	fp, sl, r4
 800764e:	d00b      	beq.n	8007668 <_vfiprintf_r+0xc0>
 8007650:	465b      	mov	r3, fp
 8007652:	4622      	mov	r2, r4
 8007654:	4629      	mov	r1, r5
 8007656:	4630      	mov	r0, r6
 8007658:	f7ff ff93 	bl	8007582 <__sfputs_r>
 800765c:	3001      	adds	r0, #1
 800765e:	f000 80aa 	beq.w	80077b6 <_vfiprintf_r+0x20e>
 8007662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007664:	445a      	add	r2, fp
 8007666:	9209      	str	r2, [sp, #36]	; 0x24
 8007668:	f89a 3000 	ldrb.w	r3, [sl]
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 80a2 	beq.w	80077b6 <_vfiprintf_r+0x20e>
 8007672:	2300      	movs	r3, #0
 8007674:	f04f 32ff 	mov.w	r2, #4294967295
 8007678:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800767c:	f10a 0a01 	add.w	sl, sl, #1
 8007680:	9304      	str	r3, [sp, #16]
 8007682:	9307      	str	r3, [sp, #28]
 8007684:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007688:	931a      	str	r3, [sp, #104]	; 0x68
 800768a:	4654      	mov	r4, sl
 800768c:	2205      	movs	r2, #5
 800768e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007692:	4858      	ldr	r0, [pc, #352]	; (80077f4 <_vfiprintf_r+0x24c>)
 8007694:	f7f8 fdbc 	bl	8000210 <memchr>
 8007698:	9a04      	ldr	r2, [sp, #16]
 800769a:	b9d8      	cbnz	r0, 80076d4 <_vfiprintf_r+0x12c>
 800769c:	06d1      	lsls	r1, r2, #27
 800769e:	bf44      	itt	mi
 80076a0:	2320      	movmi	r3, #32
 80076a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076a6:	0713      	lsls	r3, r2, #28
 80076a8:	bf44      	itt	mi
 80076aa:	232b      	movmi	r3, #43	; 0x2b
 80076ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076b0:	f89a 3000 	ldrb.w	r3, [sl]
 80076b4:	2b2a      	cmp	r3, #42	; 0x2a
 80076b6:	d015      	beq.n	80076e4 <_vfiprintf_r+0x13c>
 80076b8:	9a07      	ldr	r2, [sp, #28]
 80076ba:	4654      	mov	r4, sl
 80076bc:	2000      	movs	r0, #0
 80076be:	f04f 0c0a 	mov.w	ip, #10
 80076c2:	4621      	mov	r1, r4
 80076c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076c8:	3b30      	subs	r3, #48	; 0x30
 80076ca:	2b09      	cmp	r3, #9
 80076cc:	d94e      	bls.n	800776c <_vfiprintf_r+0x1c4>
 80076ce:	b1b0      	cbz	r0, 80076fe <_vfiprintf_r+0x156>
 80076d0:	9207      	str	r2, [sp, #28]
 80076d2:	e014      	b.n	80076fe <_vfiprintf_r+0x156>
 80076d4:	eba0 0308 	sub.w	r3, r0, r8
 80076d8:	fa09 f303 	lsl.w	r3, r9, r3
 80076dc:	4313      	orrs	r3, r2
 80076de:	9304      	str	r3, [sp, #16]
 80076e0:	46a2      	mov	sl, r4
 80076e2:	e7d2      	b.n	800768a <_vfiprintf_r+0xe2>
 80076e4:	9b03      	ldr	r3, [sp, #12]
 80076e6:	1d19      	adds	r1, r3, #4
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	9103      	str	r1, [sp, #12]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	bfbb      	ittet	lt
 80076f0:	425b      	neglt	r3, r3
 80076f2:	f042 0202 	orrlt.w	r2, r2, #2
 80076f6:	9307      	strge	r3, [sp, #28]
 80076f8:	9307      	strlt	r3, [sp, #28]
 80076fa:	bfb8      	it	lt
 80076fc:	9204      	strlt	r2, [sp, #16]
 80076fe:	7823      	ldrb	r3, [r4, #0]
 8007700:	2b2e      	cmp	r3, #46	; 0x2e
 8007702:	d10c      	bne.n	800771e <_vfiprintf_r+0x176>
 8007704:	7863      	ldrb	r3, [r4, #1]
 8007706:	2b2a      	cmp	r3, #42	; 0x2a
 8007708:	d135      	bne.n	8007776 <_vfiprintf_r+0x1ce>
 800770a:	9b03      	ldr	r3, [sp, #12]
 800770c:	1d1a      	adds	r2, r3, #4
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	9203      	str	r2, [sp, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	bfb8      	it	lt
 8007716:	f04f 33ff 	movlt.w	r3, #4294967295
 800771a:	3402      	adds	r4, #2
 800771c:	9305      	str	r3, [sp, #20]
 800771e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007804 <_vfiprintf_r+0x25c>
 8007722:	7821      	ldrb	r1, [r4, #0]
 8007724:	2203      	movs	r2, #3
 8007726:	4650      	mov	r0, sl
 8007728:	f7f8 fd72 	bl	8000210 <memchr>
 800772c:	b140      	cbz	r0, 8007740 <_vfiprintf_r+0x198>
 800772e:	2340      	movs	r3, #64	; 0x40
 8007730:	eba0 000a 	sub.w	r0, r0, sl
 8007734:	fa03 f000 	lsl.w	r0, r3, r0
 8007738:	9b04      	ldr	r3, [sp, #16]
 800773a:	4303      	orrs	r3, r0
 800773c:	3401      	adds	r4, #1
 800773e:	9304      	str	r3, [sp, #16]
 8007740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007744:	482c      	ldr	r0, [pc, #176]	; (80077f8 <_vfiprintf_r+0x250>)
 8007746:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800774a:	2206      	movs	r2, #6
 800774c:	f7f8 fd60 	bl	8000210 <memchr>
 8007750:	2800      	cmp	r0, #0
 8007752:	d03f      	beq.n	80077d4 <_vfiprintf_r+0x22c>
 8007754:	4b29      	ldr	r3, [pc, #164]	; (80077fc <_vfiprintf_r+0x254>)
 8007756:	bb1b      	cbnz	r3, 80077a0 <_vfiprintf_r+0x1f8>
 8007758:	9b03      	ldr	r3, [sp, #12]
 800775a:	3307      	adds	r3, #7
 800775c:	f023 0307 	bic.w	r3, r3, #7
 8007760:	3308      	adds	r3, #8
 8007762:	9303      	str	r3, [sp, #12]
 8007764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007766:	443b      	add	r3, r7
 8007768:	9309      	str	r3, [sp, #36]	; 0x24
 800776a:	e767      	b.n	800763c <_vfiprintf_r+0x94>
 800776c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007770:	460c      	mov	r4, r1
 8007772:	2001      	movs	r0, #1
 8007774:	e7a5      	b.n	80076c2 <_vfiprintf_r+0x11a>
 8007776:	2300      	movs	r3, #0
 8007778:	3401      	adds	r4, #1
 800777a:	9305      	str	r3, [sp, #20]
 800777c:	4619      	mov	r1, r3
 800777e:	f04f 0c0a 	mov.w	ip, #10
 8007782:	4620      	mov	r0, r4
 8007784:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007788:	3a30      	subs	r2, #48	; 0x30
 800778a:	2a09      	cmp	r2, #9
 800778c:	d903      	bls.n	8007796 <_vfiprintf_r+0x1ee>
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0c5      	beq.n	800771e <_vfiprintf_r+0x176>
 8007792:	9105      	str	r1, [sp, #20]
 8007794:	e7c3      	b.n	800771e <_vfiprintf_r+0x176>
 8007796:	fb0c 2101 	mla	r1, ip, r1, r2
 800779a:	4604      	mov	r4, r0
 800779c:	2301      	movs	r3, #1
 800779e:	e7f0      	b.n	8007782 <_vfiprintf_r+0x1da>
 80077a0:	ab03      	add	r3, sp, #12
 80077a2:	9300      	str	r3, [sp, #0]
 80077a4:	462a      	mov	r2, r5
 80077a6:	4b16      	ldr	r3, [pc, #88]	; (8007800 <_vfiprintf_r+0x258>)
 80077a8:	a904      	add	r1, sp, #16
 80077aa:	4630      	mov	r0, r6
 80077ac:	f3af 8000 	nop.w
 80077b0:	4607      	mov	r7, r0
 80077b2:	1c78      	adds	r0, r7, #1
 80077b4:	d1d6      	bne.n	8007764 <_vfiprintf_r+0x1bc>
 80077b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077b8:	07d9      	lsls	r1, r3, #31
 80077ba:	d405      	bmi.n	80077c8 <_vfiprintf_r+0x220>
 80077bc:	89ab      	ldrh	r3, [r5, #12]
 80077be:	059a      	lsls	r2, r3, #22
 80077c0:	d402      	bmi.n	80077c8 <_vfiprintf_r+0x220>
 80077c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077c4:	f000 faa1 	bl	8007d0a <__retarget_lock_release_recursive>
 80077c8:	89ab      	ldrh	r3, [r5, #12]
 80077ca:	065b      	lsls	r3, r3, #25
 80077cc:	f53f af12 	bmi.w	80075f4 <_vfiprintf_r+0x4c>
 80077d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077d2:	e711      	b.n	80075f8 <_vfiprintf_r+0x50>
 80077d4:	ab03      	add	r3, sp, #12
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	462a      	mov	r2, r5
 80077da:	4b09      	ldr	r3, [pc, #36]	; (8007800 <_vfiprintf_r+0x258>)
 80077dc:	a904      	add	r1, sp, #16
 80077de:	4630      	mov	r0, r6
 80077e0:	f7fe fe60 	bl	80064a4 <_printf_i>
 80077e4:	e7e4      	b.n	80077b0 <_vfiprintf_r+0x208>
 80077e6:	bf00      	nop
 80077e8:	08008290 	.word	0x08008290
 80077ec:	080082b0 	.word	0x080082b0
 80077f0:	08008270 	.word	0x08008270
 80077f4:	0800825c 	.word	0x0800825c
 80077f8:	08008266 	.word	0x08008266
 80077fc:	00000000 	.word	0x00000000
 8007800:	08007583 	.word	0x08007583
 8007804:	08008262 	.word	0x08008262

08007808 <__swbuf_r>:
 8007808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780a:	460e      	mov	r6, r1
 800780c:	4614      	mov	r4, r2
 800780e:	4605      	mov	r5, r0
 8007810:	b118      	cbz	r0, 800781a <__swbuf_r+0x12>
 8007812:	6983      	ldr	r3, [r0, #24]
 8007814:	b90b      	cbnz	r3, 800781a <__swbuf_r+0x12>
 8007816:	f000 f9d9 	bl	8007bcc <__sinit>
 800781a:	4b21      	ldr	r3, [pc, #132]	; (80078a0 <__swbuf_r+0x98>)
 800781c:	429c      	cmp	r4, r3
 800781e:	d12b      	bne.n	8007878 <__swbuf_r+0x70>
 8007820:	686c      	ldr	r4, [r5, #4]
 8007822:	69a3      	ldr	r3, [r4, #24]
 8007824:	60a3      	str	r3, [r4, #8]
 8007826:	89a3      	ldrh	r3, [r4, #12]
 8007828:	071a      	lsls	r2, r3, #28
 800782a:	d52f      	bpl.n	800788c <__swbuf_r+0x84>
 800782c:	6923      	ldr	r3, [r4, #16]
 800782e:	b36b      	cbz	r3, 800788c <__swbuf_r+0x84>
 8007830:	6923      	ldr	r3, [r4, #16]
 8007832:	6820      	ldr	r0, [r4, #0]
 8007834:	1ac0      	subs	r0, r0, r3
 8007836:	6963      	ldr	r3, [r4, #20]
 8007838:	b2f6      	uxtb	r6, r6
 800783a:	4283      	cmp	r3, r0
 800783c:	4637      	mov	r7, r6
 800783e:	dc04      	bgt.n	800784a <__swbuf_r+0x42>
 8007840:	4621      	mov	r1, r4
 8007842:	4628      	mov	r0, r5
 8007844:	f000 f92e 	bl	8007aa4 <_fflush_r>
 8007848:	bb30      	cbnz	r0, 8007898 <__swbuf_r+0x90>
 800784a:	68a3      	ldr	r3, [r4, #8]
 800784c:	3b01      	subs	r3, #1
 800784e:	60a3      	str	r3, [r4, #8]
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	6022      	str	r2, [r4, #0]
 8007856:	701e      	strb	r6, [r3, #0]
 8007858:	6963      	ldr	r3, [r4, #20]
 800785a:	3001      	adds	r0, #1
 800785c:	4283      	cmp	r3, r0
 800785e:	d004      	beq.n	800786a <__swbuf_r+0x62>
 8007860:	89a3      	ldrh	r3, [r4, #12]
 8007862:	07db      	lsls	r3, r3, #31
 8007864:	d506      	bpl.n	8007874 <__swbuf_r+0x6c>
 8007866:	2e0a      	cmp	r6, #10
 8007868:	d104      	bne.n	8007874 <__swbuf_r+0x6c>
 800786a:	4621      	mov	r1, r4
 800786c:	4628      	mov	r0, r5
 800786e:	f000 f919 	bl	8007aa4 <_fflush_r>
 8007872:	b988      	cbnz	r0, 8007898 <__swbuf_r+0x90>
 8007874:	4638      	mov	r0, r7
 8007876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007878:	4b0a      	ldr	r3, [pc, #40]	; (80078a4 <__swbuf_r+0x9c>)
 800787a:	429c      	cmp	r4, r3
 800787c:	d101      	bne.n	8007882 <__swbuf_r+0x7a>
 800787e:	68ac      	ldr	r4, [r5, #8]
 8007880:	e7cf      	b.n	8007822 <__swbuf_r+0x1a>
 8007882:	4b09      	ldr	r3, [pc, #36]	; (80078a8 <__swbuf_r+0xa0>)
 8007884:	429c      	cmp	r4, r3
 8007886:	bf08      	it	eq
 8007888:	68ec      	ldreq	r4, [r5, #12]
 800788a:	e7ca      	b.n	8007822 <__swbuf_r+0x1a>
 800788c:	4621      	mov	r1, r4
 800788e:	4628      	mov	r0, r5
 8007890:	f000 f80c 	bl	80078ac <__swsetup_r>
 8007894:	2800      	cmp	r0, #0
 8007896:	d0cb      	beq.n	8007830 <__swbuf_r+0x28>
 8007898:	f04f 37ff 	mov.w	r7, #4294967295
 800789c:	e7ea      	b.n	8007874 <__swbuf_r+0x6c>
 800789e:	bf00      	nop
 80078a0:	08008290 	.word	0x08008290
 80078a4:	080082b0 	.word	0x080082b0
 80078a8:	08008270 	.word	0x08008270

080078ac <__swsetup_r>:
 80078ac:	4b32      	ldr	r3, [pc, #200]	; (8007978 <__swsetup_r+0xcc>)
 80078ae:	b570      	push	{r4, r5, r6, lr}
 80078b0:	681d      	ldr	r5, [r3, #0]
 80078b2:	4606      	mov	r6, r0
 80078b4:	460c      	mov	r4, r1
 80078b6:	b125      	cbz	r5, 80078c2 <__swsetup_r+0x16>
 80078b8:	69ab      	ldr	r3, [r5, #24]
 80078ba:	b913      	cbnz	r3, 80078c2 <__swsetup_r+0x16>
 80078bc:	4628      	mov	r0, r5
 80078be:	f000 f985 	bl	8007bcc <__sinit>
 80078c2:	4b2e      	ldr	r3, [pc, #184]	; (800797c <__swsetup_r+0xd0>)
 80078c4:	429c      	cmp	r4, r3
 80078c6:	d10f      	bne.n	80078e8 <__swsetup_r+0x3c>
 80078c8:	686c      	ldr	r4, [r5, #4]
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078d0:	0719      	lsls	r1, r3, #28
 80078d2:	d42c      	bmi.n	800792e <__swsetup_r+0x82>
 80078d4:	06dd      	lsls	r5, r3, #27
 80078d6:	d411      	bmi.n	80078fc <__swsetup_r+0x50>
 80078d8:	2309      	movs	r3, #9
 80078da:	6033      	str	r3, [r6, #0]
 80078dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80078e0:	81a3      	strh	r3, [r4, #12]
 80078e2:	f04f 30ff 	mov.w	r0, #4294967295
 80078e6:	e03e      	b.n	8007966 <__swsetup_r+0xba>
 80078e8:	4b25      	ldr	r3, [pc, #148]	; (8007980 <__swsetup_r+0xd4>)
 80078ea:	429c      	cmp	r4, r3
 80078ec:	d101      	bne.n	80078f2 <__swsetup_r+0x46>
 80078ee:	68ac      	ldr	r4, [r5, #8]
 80078f0:	e7eb      	b.n	80078ca <__swsetup_r+0x1e>
 80078f2:	4b24      	ldr	r3, [pc, #144]	; (8007984 <__swsetup_r+0xd8>)
 80078f4:	429c      	cmp	r4, r3
 80078f6:	bf08      	it	eq
 80078f8:	68ec      	ldreq	r4, [r5, #12]
 80078fa:	e7e6      	b.n	80078ca <__swsetup_r+0x1e>
 80078fc:	0758      	lsls	r0, r3, #29
 80078fe:	d512      	bpl.n	8007926 <__swsetup_r+0x7a>
 8007900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007902:	b141      	cbz	r1, 8007916 <__swsetup_r+0x6a>
 8007904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007908:	4299      	cmp	r1, r3
 800790a:	d002      	beq.n	8007912 <__swsetup_r+0x66>
 800790c:	4630      	mov	r0, r6
 800790e:	f7ff fdd5 	bl	80074bc <_free_r>
 8007912:	2300      	movs	r3, #0
 8007914:	6363      	str	r3, [r4, #52]	; 0x34
 8007916:	89a3      	ldrh	r3, [r4, #12]
 8007918:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800791c:	81a3      	strh	r3, [r4, #12]
 800791e:	2300      	movs	r3, #0
 8007920:	6063      	str	r3, [r4, #4]
 8007922:	6923      	ldr	r3, [r4, #16]
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	89a3      	ldrh	r3, [r4, #12]
 8007928:	f043 0308 	orr.w	r3, r3, #8
 800792c:	81a3      	strh	r3, [r4, #12]
 800792e:	6923      	ldr	r3, [r4, #16]
 8007930:	b94b      	cbnz	r3, 8007946 <__swsetup_r+0x9a>
 8007932:	89a3      	ldrh	r3, [r4, #12]
 8007934:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800793c:	d003      	beq.n	8007946 <__swsetup_r+0x9a>
 800793e:	4621      	mov	r1, r4
 8007940:	4630      	mov	r0, r6
 8007942:	f000 fa09 	bl	8007d58 <__smakebuf_r>
 8007946:	89a0      	ldrh	r0, [r4, #12]
 8007948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800794c:	f010 0301 	ands.w	r3, r0, #1
 8007950:	d00a      	beq.n	8007968 <__swsetup_r+0xbc>
 8007952:	2300      	movs	r3, #0
 8007954:	60a3      	str	r3, [r4, #8]
 8007956:	6963      	ldr	r3, [r4, #20]
 8007958:	425b      	negs	r3, r3
 800795a:	61a3      	str	r3, [r4, #24]
 800795c:	6923      	ldr	r3, [r4, #16]
 800795e:	b943      	cbnz	r3, 8007972 <__swsetup_r+0xc6>
 8007960:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007964:	d1ba      	bne.n	80078dc <__swsetup_r+0x30>
 8007966:	bd70      	pop	{r4, r5, r6, pc}
 8007968:	0781      	lsls	r1, r0, #30
 800796a:	bf58      	it	pl
 800796c:	6963      	ldrpl	r3, [r4, #20]
 800796e:	60a3      	str	r3, [r4, #8]
 8007970:	e7f4      	b.n	800795c <__swsetup_r+0xb0>
 8007972:	2000      	movs	r0, #0
 8007974:	e7f7      	b.n	8007966 <__swsetup_r+0xba>
 8007976:	bf00      	nop
 8007978:	2000001c 	.word	0x2000001c
 800797c:	08008290 	.word	0x08008290
 8007980:	080082b0 	.word	0x080082b0
 8007984:	08008270 	.word	0x08008270

08007988 <abort>:
 8007988:	b508      	push	{r3, lr}
 800798a:	2006      	movs	r0, #6
 800798c:	f000 fa4c 	bl	8007e28 <raise>
 8007990:	2001      	movs	r0, #1
 8007992:	f7fa fe03 	bl	800259c <_exit>
	...

08007998 <__sflush_r>:
 8007998:	898a      	ldrh	r2, [r1, #12]
 800799a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800799e:	4605      	mov	r5, r0
 80079a0:	0710      	lsls	r0, r2, #28
 80079a2:	460c      	mov	r4, r1
 80079a4:	d458      	bmi.n	8007a58 <__sflush_r+0xc0>
 80079a6:	684b      	ldr	r3, [r1, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	dc05      	bgt.n	80079b8 <__sflush_r+0x20>
 80079ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	dc02      	bgt.n	80079b8 <__sflush_r+0x20>
 80079b2:	2000      	movs	r0, #0
 80079b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079ba:	2e00      	cmp	r6, #0
 80079bc:	d0f9      	beq.n	80079b2 <__sflush_r+0x1a>
 80079be:	2300      	movs	r3, #0
 80079c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079c4:	682f      	ldr	r7, [r5, #0]
 80079c6:	602b      	str	r3, [r5, #0]
 80079c8:	d032      	beq.n	8007a30 <__sflush_r+0x98>
 80079ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079cc:	89a3      	ldrh	r3, [r4, #12]
 80079ce:	075a      	lsls	r2, r3, #29
 80079d0:	d505      	bpl.n	80079de <__sflush_r+0x46>
 80079d2:	6863      	ldr	r3, [r4, #4]
 80079d4:	1ac0      	subs	r0, r0, r3
 80079d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079d8:	b10b      	cbz	r3, 80079de <__sflush_r+0x46>
 80079da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079dc:	1ac0      	subs	r0, r0, r3
 80079de:	2300      	movs	r3, #0
 80079e0:	4602      	mov	r2, r0
 80079e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079e4:	6a21      	ldr	r1, [r4, #32]
 80079e6:	4628      	mov	r0, r5
 80079e8:	47b0      	blx	r6
 80079ea:	1c43      	adds	r3, r0, #1
 80079ec:	89a3      	ldrh	r3, [r4, #12]
 80079ee:	d106      	bne.n	80079fe <__sflush_r+0x66>
 80079f0:	6829      	ldr	r1, [r5, #0]
 80079f2:	291d      	cmp	r1, #29
 80079f4:	d82c      	bhi.n	8007a50 <__sflush_r+0xb8>
 80079f6:	4a2a      	ldr	r2, [pc, #168]	; (8007aa0 <__sflush_r+0x108>)
 80079f8:	40ca      	lsrs	r2, r1
 80079fa:	07d6      	lsls	r6, r2, #31
 80079fc:	d528      	bpl.n	8007a50 <__sflush_r+0xb8>
 80079fe:	2200      	movs	r2, #0
 8007a00:	6062      	str	r2, [r4, #4]
 8007a02:	04d9      	lsls	r1, r3, #19
 8007a04:	6922      	ldr	r2, [r4, #16]
 8007a06:	6022      	str	r2, [r4, #0]
 8007a08:	d504      	bpl.n	8007a14 <__sflush_r+0x7c>
 8007a0a:	1c42      	adds	r2, r0, #1
 8007a0c:	d101      	bne.n	8007a12 <__sflush_r+0x7a>
 8007a0e:	682b      	ldr	r3, [r5, #0]
 8007a10:	b903      	cbnz	r3, 8007a14 <__sflush_r+0x7c>
 8007a12:	6560      	str	r0, [r4, #84]	; 0x54
 8007a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a16:	602f      	str	r7, [r5, #0]
 8007a18:	2900      	cmp	r1, #0
 8007a1a:	d0ca      	beq.n	80079b2 <__sflush_r+0x1a>
 8007a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a20:	4299      	cmp	r1, r3
 8007a22:	d002      	beq.n	8007a2a <__sflush_r+0x92>
 8007a24:	4628      	mov	r0, r5
 8007a26:	f7ff fd49 	bl	80074bc <_free_r>
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	6360      	str	r0, [r4, #52]	; 0x34
 8007a2e:	e7c1      	b.n	80079b4 <__sflush_r+0x1c>
 8007a30:	6a21      	ldr	r1, [r4, #32]
 8007a32:	2301      	movs	r3, #1
 8007a34:	4628      	mov	r0, r5
 8007a36:	47b0      	blx	r6
 8007a38:	1c41      	adds	r1, r0, #1
 8007a3a:	d1c7      	bne.n	80079cc <__sflush_r+0x34>
 8007a3c:	682b      	ldr	r3, [r5, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d0c4      	beq.n	80079cc <__sflush_r+0x34>
 8007a42:	2b1d      	cmp	r3, #29
 8007a44:	d001      	beq.n	8007a4a <__sflush_r+0xb2>
 8007a46:	2b16      	cmp	r3, #22
 8007a48:	d101      	bne.n	8007a4e <__sflush_r+0xb6>
 8007a4a:	602f      	str	r7, [r5, #0]
 8007a4c:	e7b1      	b.n	80079b2 <__sflush_r+0x1a>
 8007a4e:	89a3      	ldrh	r3, [r4, #12]
 8007a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a54:	81a3      	strh	r3, [r4, #12]
 8007a56:	e7ad      	b.n	80079b4 <__sflush_r+0x1c>
 8007a58:	690f      	ldr	r7, [r1, #16]
 8007a5a:	2f00      	cmp	r7, #0
 8007a5c:	d0a9      	beq.n	80079b2 <__sflush_r+0x1a>
 8007a5e:	0793      	lsls	r3, r2, #30
 8007a60:	680e      	ldr	r6, [r1, #0]
 8007a62:	bf08      	it	eq
 8007a64:	694b      	ldreq	r3, [r1, #20]
 8007a66:	600f      	str	r7, [r1, #0]
 8007a68:	bf18      	it	ne
 8007a6a:	2300      	movne	r3, #0
 8007a6c:	eba6 0807 	sub.w	r8, r6, r7
 8007a70:	608b      	str	r3, [r1, #8]
 8007a72:	f1b8 0f00 	cmp.w	r8, #0
 8007a76:	dd9c      	ble.n	80079b2 <__sflush_r+0x1a>
 8007a78:	6a21      	ldr	r1, [r4, #32]
 8007a7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a7c:	4643      	mov	r3, r8
 8007a7e:	463a      	mov	r2, r7
 8007a80:	4628      	mov	r0, r5
 8007a82:	47b0      	blx	r6
 8007a84:	2800      	cmp	r0, #0
 8007a86:	dc06      	bgt.n	8007a96 <__sflush_r+0xfe>
 8007a88:	89a3      	ldrh	r3, [r4, #12]
 8007a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a8e:	81a3      	strh	r3, [r4, #12]
 8007a90:	f04f 30ff 	mov.w	r0, #4294967295
 8007a94:	e78e      	b.n	80079b4 <__sflush_r+0x1c>
 8007a96:	4407      	add	r7, r0
 8007a98:	eba8 0800 	sub.w	r8, r8, r0
 8007a9c:	e7e9      	b.n	8007a72 <__sflush_r+0xda>
 8007a9e:	bf00      	nop
 8007aa0:	20400001 	.word	0x20400001

08007aa4 <_fflush_r>:
 8007aa4:	b538      	push	{r3, r4, r5, lr}
 8007aa6:	690b      	ldr	r3, [r1, #16]
 8007aa8:	4605      	mov	r5, r0
 8007aaa:	460c      	mov	r4, r1
 8007aac:	b913      	cbnz	r3, 8007ab4 <_fflush_r+0x10>
 8007aae:	2500      	movs	r5, #0
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	bd38      	pop	{r3, r4, r5, pc}
 8007ab4:	b118      	cbz	r0, 8007abe <_fflush_r+0x1a>
 8007ab6:	6983      	ldr	r3, [r0, #24]
 8007ab8:	b90b      	cbnz	r3, 8007abe <_fflush_r+0x1a>
 8007aba:	f000 f887 	bl	8007bcc <__sinit>
 8007abe:	4b14      	ldr	r3, [pc, #80]	; (8007b10 <_fflush_r+0x6c>)
 8007ac0:	429c      	cmp	r4, r3
 8007ac2:	d11b      	bne.n	8007afc <_fflush_r+0x58>
 8007ac4:	686c      	ldr	r4, [r5, #4]
 8007ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d0ef      	beq.n	8007aae <_fflush_r+0xa>
 8007ace:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ad0:	07d0      	lsls	r0, r2, #31
 8007ad2:	d404      	bmi.n	8007ade <_fflush_r+0x3a>
 8007ad4:	0599      	lsls	r1, r3, #22
 8007ad6:	d402      	bmi.n	8007ade <_fflush_r+0x3a>
 8007ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ada:	f000 f915 	bl	8007d08 <__retarget_lock_acquire_recursive>
 8007ade:	4628      	mov	r0, r5
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	f7ff ff59 	bl	8007998 <__sflush_r>
 8007ae6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ae8:	07da      	lsls	r2, r3, #31
 8007aea:	4605      	mov	r5, r0
 8007aec:	d4e0      	bmi.n	8007ab0 <_fflush_r+0xc>
 8007aee:	89a3      	ldrh	r3, [r4, #12]
 8007af0:	059b      	lsls	r3, r3, #22
 8007af2:	d4dd      	bmi.n	8007ab0 <_fflush_r+0xc>
 8007af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007af6:	f000 f908 	bl	8007d0a <__retarget_lock_release_recursive>
 8007afa:	e7d9      	b.n	8007ab0 <_fflush_r+0xc>
 8007afc:	4b05      	ldr	r3, [pc, #20]	; (8007b14 <_fflush_r+0x70>)
 8007afe:	429c      	cmp	r4, r3
 8007b00:	d101      	bne.n	8007b06 <_fflush_r+0x62>
 8007b02:	68ac      	ldr	r4, [r5, #8]
 8007b04:	e7df      	b.n	8007ac6 <_fflush_r+0x22>
 8007b06:	4b04      	ldr	r3, [pc, #16]	; (8007b18 <_fflush_r+0x74>)
 8007b08:	429c      	cmp	r4, r3
 8007b0a:	bf08      	it	eq
 8007b0c:	68ec      	ldreq	r4, [r5, #12]
 8007b0e:	e7da      	b.n	8007ac6 <_fflush_r+0x22>
 8007b10:	08008290 	.word	0x08008290
 8007b14:	080082b0 	.word	0x080082b0
 8007b18:	08008270 	.word	0x08008270

08007b1c <std>:
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	b510      	push	{r4, lr}
 8007b20:	4604      	mov	r4, r0
 8007b22:	e9c0 3300 	strd	r3, r3, [r0]
 8007b26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b2a:	6083      	str	r3, [r0, #8]
 8007b2c:	8181      	strh	r1, [r0, #12]
 8007b2e:	6643      	str	r3, [r0, #100]	; 0x64
 8007b30:	81c2      	strh	r2, [r0, #14]
 8007b32:	6183      	str	r3, [r0, #24]
 8007b34:	4619      	mov	r1, r3
 8007b36:	2208      	movs	r2, #8
 8007b38:	305c      	adds	r0, #92	; 0x5c
 8007b3a:	f7fd feb9 	bl	80058b0 <memset>
 8007b3e:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <std+0x38>)
 8007b40:	6263      	str	r3, [r4, #36]	; 0x24
 8007b42:	4b05      	ldr	r3, [pc, #20]	; (8007b58 <std+0x3c>)
 8007b44:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b46:	4b05      	ldr	r3, [pc, #20]	; (8007b5c <std+0x40>)
 8007b48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b4a:	4b05      	ldr	r3, [pc, #20]	; (8007b60 <std+0x44>)
 8007b4c:	6224      	str	r4, [r4, #32]
 8007b4e:	6323      	str	r3, [r4, #48]	; 0x30
 8007b50:	bd10      	pop	{r4, pc}
 8007b52:	bf00      	nop
 8007b54:	08007e61 	.word	0x08007e61
 8007b58:	08007e83 	.word	0x08007e83
 8007b5c:	08007ebb 	.word	0x08007ebb
 8007b60:	08007edf 	.word	0x08007edf

08007b64 <_cleanup_r>:
 8007b64:	4901      	ldr	r1, [pc, #4]	; (8007b6c <_cleanup_r+0x8>)
 8007b66:	f000 b8af 	b.w	8007cc8 <_fwalk_reent>
 8007b6a:	bf00      	nop
 8007b6c:	08007aa5 	.word	0x08007aa5

08007b70 <__sfmoreglue>:
 8007b70:	b570      	push	{r4, r5, r6, lr}
 8007b72:	2268      	movs	r2, #104	; 0x68
 8007b74:	1e4d      	subs	r5, r1, #1
 8007b76:	4355      	muls	r5, r2
 8007b78:	460e      	mov	r6, r1
 8007b7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b7e:	f7fe fbaf 	bl	80062e0 <_malloc_r>
 8007b82:	4604      	mov	r4, r0
 8007b84:	b140      	cbz	r0, 8007b98 <__sfmoreglue+0x28>
 8007b86:	2100      	movs	r1, #0
 8007b88:	e9c0 1600 	strd	r1, r6, [r0]
 8007b8c:	300c      	adds	r0, #12
 8007b8e:	60a0      	str	r0, [r4, #8]
 8007b90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b94:	f7fd fe8c 	bl	80058b0 <memset>
 8007b98:	4620      	mov	r0, r4
 8007b9a:	bd70      	pop	{r4, r5, r6, pc}

08007b9c <__sfp_lock_acquire>:
 8007b9c:	4801      	ldr	r0, [pc, #4]	; (8007ba4 <__sfp_lock_acquire+0x8>)
 8007b9e:	f000 b8b3 	b.w	8007d08 <__retarget_lock_acquire_recursive>
 8007ba2:	bf00      	nop
 8007ba4:	20000295 	.word	0x20000295

08007ba8 <__sfp_lock_release>:
 8007ba8:	4801      	ldr	r0, [pc, #4]	; (8007bb0 <__sfp_lock_release+0x8>)
 8007baa:	f000 b8ae 	b.w	8007d0a <__retarget_lock_release_recursive>
 8007bae:	bf00      	nop
 8007bb0:	20000295 	.word	0x20000295

08007bb4 <__sinit_lock_acquire>:
 8007bb4:	4801      	ldr	r0, [pc, #4]	; (8007bbc <__sinit_lock_acquire+0x8>)
 8007bb6:	f000 b8a7 	b.w	8007d08 <__retarget_lock_acquire_recursive>
 8007bba:	bf00      	nop
 8007bbc:	20000296 	.word	0x20000296

08007bc0 <__sinit_lock_release>:
 8007bc0:	4801      	ldr	r0, [pc, #4]	; (8007bc8 <__sinit_lock_release+0x8>)
 8007bc2:	f000 b8a2 	b.w	8007d0a <__retarget_lock_release_recursive>
 8007bc6:	bf00      	nop
 8007bc8:	20000296 	.word	0x20000296

08007bcc <__sinit>:
 8007bcc:	b510      	push	{r4, lr}
 8007bce:	4604      	mov	r4, r0
 8007bd0:	f7ff fff0 	bl	8007bb4 <__sinit_lock_acquire>
 8007bd4:	69a3      	ldr	r3, [r4, #24]
 8007bd6:	b11b      	cbz	r3, 8007be0 <__sinit+0x14>
 8007bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bdc:	f7ff bff0 	b.w	8007bc0 <__sinit_lock_release>
 8007be0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007be4:	6523      	str	r3, [r4, #80]	; 0x50
 8007be6:	4b13      	ldr	r3, [pc, #76]	; (8007c34 <__sinit+0x68>)
 8007be8:	4a13      	ldr	r2, [pc, #76]	; (8007c38 <__sinit+0x6c>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	62a2      	str	r2, [r4, #40]	; 0x28
 8007bee:	42a3      	cmp	r3, r4
 8007bf0:	bf04      	itt	eq
 8007bf2:	2301      	moveq	r3, #1
 8007bf4:	61a3      	streq	r3, [r4, #24]
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f000 f820 	bl	8007c3c <__sfp>
 8007bfc:	6060      	str	r0, [r4, #4]
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f000 f81c 	bl	8007c3c <__sfp>
 8007c04:	60a0      	str	r0, [r4, #8]
 8007c06:	4620      	mov	r0, r4
 8007c08:	f000 f818 	bl	8007c3c <__sfp>
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	60e0      	str	r0, [r4, #12]
 8007c10:	2104      	movs	r1, #4
 8007c12:	6860      	ldr	r0, [r4, #4]
 8007c14:	f7ff ff82 	bl	8007b1c <std>
 8007c18:	68a0      	ldr	r0, [r4, #8]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	2109      	movs	r1, #9
 8007c1e:	f7ff ff7d 	bl	8007b1c <std>
 8007c22:	68e0      	ldr	r0, [r4, #12]
 8007c24:	2202      	movs	r2, #2
 8007c26:	2112      	movs	r1, #18
 8007c28:	f7ff ff78 	bl	8007b1c <std>
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	61a3      	str	r3, [r4, #24]
 8007c30:	e7d2      	b.n	8007bd8 <__sinit+0xc>
 8007c32:	bf00      	nop
 8007c34:	08008010 	.word	0x08008010
 8007c38:	08007b65 	.word	0x08007b65

08007c3c <__sfp>:
 8007c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3e:	4607      	mov	r7, r0
 8007c40:	f7ff ffac 	bl	8007b9c <__sfp_lock_acquire>
 8007c44:	4b1e      	ldr	r3, [pc, #120]	; (8007cc0 <__sfp+0x84>)
 8007c46:	681e      	ldr	r6, [r3, #0]
 8007c48:	69b3      	ldr	r3, [r6, #24]
 8007c4a:	b913      	cbnz	r3, 8007c52 <__sfp+0x16>
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	f7ff ffbd 	bl	8007bcc <__sinit>
 8007c52:	3648      	adds	r6, #72	; 0x48
 8007c54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	d503      	bpl.n	8007c64 <__sfp+0x28>
 8007c5c:	6833      	ldr	r3, [r6, #0]
 8007c5e:	b30b      	cbz	r3, 8007ca4 <__sfp+0x68>
 8007c60:	6836      	ldr	r6, [r6, #0]
 8007c62:	e7f7      	b.n	8007c54 <__sfp+0x18>
 8007c64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c68:	b9d5      	cbnz	r5, 8007ca0 <__sfp+0x64>
 8007c6a:	4b16      	ldr	r3, [pc, #88]	; (8007cc4 <__sfp+0x88>)
 8007c6c:	60e3      	str	r3, [r4, #12]
 8007c6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c72:	6665      	str	r5, [r4, #100]	; 0x64
 8007c74:	f000 f847 	bl	8007d06 <__retarget_lock_init_recursive>
 8007c78:	f7ff ff96 	bl	8007ba8 <__sfp_lock_release>
 8007c7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c84:	6025      	str	r5, [r4, #0]
 8007c86:	61a5      	str	r5, [r4, #24]
 8007c88:	2208      	movs	r2, #8
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c90:	f7fd fe0e 	bl	80058b0 <memset>
 8007c94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ca0:	3468      	adds	r4, #104	; 0x68
 8007ca2:	e7d9      	b.n	8007c58 <__sfp+0x1c>
 8007ca4:	2104      	movs	r1, #4
 8007ca6:	4638      	mov	r0, r7
 8007ca8:	f7ff ff62 	bl	8007b70 <__sfmoreglue>
 8007cac:	4604      	mov	r4, r0
 8007cae:	6030      	str	r0, [r6, #0]
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	d1d5      	bne.n	8007c60 <__sfp+0x24>
 8007cb4:	f7ff ff78 	bl	8007ba8 <__sfp_lock_release>
 8007cb8:	230c      	movs	r3, #12
 8007cba:	603b      	str	r3, [r7, #0]
 8007cbc:	e7ee      	b.n	8007c9c <__sfp+0x60>
 8007cbe:	bf00      	nop
 8007cc0:	08008010 	.word	0x08008010
 8007cc4:	ffff0001 	.word	0xffff0001

08007cc8 <_fwalk_reent>:
 8007cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ccc:	4606      	mov	r6, r0
 8007cce:	4688      	mov	r8, r1
 8007cd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007cd4:	2700      	movs	r7, #0
 8007cd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cda:	f1b9 0901 	subs.w	r9, r9, #1
 8007cde:	d505      	bpl.n	8007cec <_fwalk_reent+0x24>
 8007ce0:	6824      	ldr	r4, [r4, #0]
 8007ce2:	2c00      	cmp	r4, #0
 8007ce4:	d1f7      	bne.n	8007cd6 <_fwalk_reent+0xe>
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cec:	89ab      	ldrh	r3, [r5, #12]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d907      	bls.n	8007d02 <_fwalk_reent+0x3a>
 8007cf2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	d003      	beq.n	8007d02 <_fwalk_reent+0x3a>
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	47c0      	blx	r8
 8007d00:	4307      	orrs	r7, r0
 8007d02:	3568      	adds	r5, #104	; 0x68
 8007d04:	e7e9      	b.n	8007cda <_fwalk_reent+0x12>

08007d06 <__retarget_lock_init_recursive>:
 8007d06:	4770      	bx	lr

08007d08 <__retarget_lock_acquire_recursive>:
 8007d08:	4770      	bx	lr

08007d0a <__retarget_lock_release_recursive>:
 8007d0a:	4770      	bx	lr

08007d0c <__swhatbuf_r>:
 8007d0c:	b570      	push	{r4, r5, r6, lr}
 8007d0e:	460e      	mov	r6, r1
 8007d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d14:	2900      	cmp	r1, #0
 8007d16:	b096      	sub	sp, #88	; 0x58
 8007d18:	4614      	mov	r4, r2
 8007d1a:	461d      	mov	r5, r3
 8007d1c:	da08      	bge.n	8007d30 <__swhatbuf_r+0x24>
 8007d1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	602a      	str	r2, [r5, #0]
 8007d26:	061a      	lsls	r2, r3, #24
 8007d28:	d410      	bmi.n	8007d4c <__swhatbuf_r+0x40>
 8007d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d2e:	e00e      	b.n	8007d4e <__swhatbuf_r+0x42>
 8007d30:	466a      	mov	r2, sp
 8007d32:	f000 f8fb 	bl	8007f2c <_fstat_r>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	dbf1      	blt.n	8007d1e <__swhatbuf_r+0x12>
 8007d3a:	9a01      	ldr	r2, [sp, #4]
 8007d3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d44:	425a      	negs	r2, r3
 8007d46:	415a      	adcs	r2, r3
 8007d48:	602a      	str	r2, [r5, #0]
 8007d4a:	e7ee      	b.n	8007d2a <__swhatbuf_r+0x1e>
 8007d4c:	2340      	movs	r3, #64	; 0x40
 8007d4e:	2000      	movs	r0, #0
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	b016      	add	sp, #88	; 0x58
 8007d54:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d58 <__smakebuf_r>:
 8007d58:	898b      	ldrh	r3, [r1, #12]
 8007d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d5c:	079d      	lsls	r5, r3, #30
 8007d5e:	4606      	mov	r6, r0
 8007d60:	460c      	mov	r4, r1
 8007d62:	d507      	bpl.n	8007d74 <__smakebuf_r+0x1c>
 8007d64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	6123      	str	r3, [r4, #16]
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	6163      	str	r3, [r4, #20]
 8007d70:	b002      	add	sp, #8
 8007d72:	bd70      	pop	{r4, r5, r6, pc}
 8007d74:	ab01      	add	r3, sp, #4
 8007d76:	466a      	mov	r2, sp
 8007d78:	f7ff ffc8 	bl	8007d0c <__swhatbuf_r>
 8007d7c:	9900      	ldr	r1, [sp, #0]
 8007d7e:	4605      	mov	r5, r0
 8007d80:	4630      	mov	r0, r6
 8007d82:	f7fe faad 	bl	80062e0 <_malloc_r>
 8007d86:	b948      	cbnz	r0, 8007d9c <__smakebuf_r+0x44>
 8007d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d8c:	059a      	lsls	r2, r3, #22
 8007d8e:	d4ef      	bmi.n	8007d70 <__smakebuf_r+0x18>
 8007d90:	f023 0303 	bic.w	r3, r3, #3
 8007d94:	f043 0302 	orr.w	r3, r3, #2
 8007d98:	81a3      	strh	r3, [r4, #12]
 8007d9a:	e7e3      	b.n	8007d64 <__smakebuf_r+0xc>
 8007d9c:	4b0d      	ldr	r3, [pc, #52]	; (8007dd4 <__smakebuf_r+0x7c>)
 8007d9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	6020      	str	r0, [r4, #0]
 8007da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da8:	81a3      	strh	r3, [r4, #12]
 8007daa:	9b00      	ldr	r3, [sp, #0]
 8007dac:	6163      	str	r3, [r4, #20]
 8007dae:	9b01      	ldr	r3, [sp, #4]
 8007db0:	6120      	str	r0, [r4, #16]
 8007db2:	b15b      	cbz	r3, 8007dcc <__smakebuf_r+0x74>
 8007db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007db8:	4630      	mov	r0, r6
 8007dba:	f000 f8c9 	bl	8007f50 <_isatty_r>
 8007dbe:	b128      	cbz	r0, 8007dcc <__smakebuf_r+0x74>
 8007dc0:	89a3      	ldrh	r3, [r4, #12]
 8007dc2:	f023 0303 	bic.w	r3, r3, #3
 8007dc6:	f043 0301 	orr.w	r3, r3, #1
 8007dca:	81a3      	strh	r3, [r4, #12]
 8007dcc:	89a0      	ldrh	r0, [r4, #12]
 8007dce:	4305      	orrs	r5, r0
 8007dd0:	81a5      	strh	r5, [r4, #12]
 8007dd2:	e7cd      	b.n	8007d70 <__smakebuf_r+0x18>
 8007dd4:	08007b65 	.word	0x08007b65

08007dd8 <_raise_r>:
 8007dd8:	291f      	cmp	r1, #31
 8007dda:	b538      	push	{r3, r4, r5, lr}
 8007ddc:	4604      	mov	r4, r0
 8007dde:	460d      	mov	r5, r1
 8007de0:	d904      	bls.n	8007dec <_raise_r+0x14>
 8007de2:	2316      	movs	r3, #22
 8007de4:	6003      	str	r3, [r0, #0]
 8007de6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dea:	bd38      	pop	{r3, r4, r5, pc}
 8007dec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007dee:	b112      	cbz	r2, 8007df6 <_raise_r+0x1e>
 8007df0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007df4:	b94b      	cbnz	r3, 8007e0a <_raise_r+0x32>
 8007df6:	4620      	mov	r0, r4
 8007df8:	f000 f830 	bl	8007e5c <_getpid_r>
 8007dfc:	462a      	mov	r2, r5
 8007dfe:	4601      	mov	r1, r0
 8007e00:	4620      	mov	r0, r4
 8007e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e06:	f000 b817 	b.w	8007e38 <_kill_r>
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d00a      	beq.n	8007e24 <_raise_r+0x4c>
 8007e0e:	1c59      	adds	r1, r3, #1
 8007e10:	d103      	bne.n	8007e1a <_raise_r+0x42>
 8007e12:	2316      	movs	r3, #22
 8007e14:	6003      	str	r3, [r0, #0]
 8007e16:	2001      	movs	r0, #1
 8007e18:	e7e7      	b.n	8007dea <_raise_r+0x12>
 8007e1a:	2400      	movs	r4, #0
 8007e1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e20:	4628      	mov	r0, r5
 8007e22:	4798      	blx	r3
 8007e24:	2000      	movs	r0, #0
 8007e26:	e7e0      	b.n	8007dea <_raise_r+0x12>

08007e28 <raise>:
 8007e28:	4b02      	ldr	r3, [pc, #8]	; (8007e34 <raise+0xc>)
 8007e2a:	4601      	mov	r1, r0
 8007e2c:	6818      	ldr	r0, [r3, #0]
 8007e2e:	f7ff bfd3 	b.w	8007dd8 <_raise_r>
 8007e32:	bf00      	nop
 8007e34:	2000001c 	.word	0x2000001c

08007e38 <_kill_r>:
 8007e38:	b538      	push	{r3, r4, r5, lr}
 8007e3a:	4d07      	ldr	r5, [pc, #28]	; (8007e58 <_kill_r+0x20>)
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	4604      	mov	r4, r0
 8007e40:	4608      	mov	r0, r1
 8007e42:	4611      	mov	r1, r2
 8007e44:	602b      	str	r3, [r5, #0]
 8007e46:	f7fa fb99 	bl	800257c <_kill>
 8007e4a:	1c43      	adds	r3, r0, #1
 8007e4c:	d102      	bne.n	8007e54 <_kill_r+0x1c>
 8007e4e:	682b      	ldr	r3, [r5, #0]
 8007e50:	b103      	cbz	r3, 8007e54 <_kill_r+0x1c>
 8007e52:	6023      	str	r3, [r4, #0]
 8007e54:	bd38      	pop	{r3, r4, r5, pc}
 8007e56:	bf00      	nop
 8007e58:	20000290 	.word	0x20000290

08007e5c <_getpid_r>:
 8007e5c:	f7fa bb86 	b.w	800256c <_getpid>

08007e60 <__sread>:
 8007e60:	b510      	push	{r4, lr}
 8007e62:	460c      	mov	r4, r1
 8007e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e68:	f000 f894 	bl	8007f94 <_read_r>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	bfab      	itete	ge
 8007e70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e72:	89a3      	ldrhlt	r3, [r4, #12]
 8007e74:	181b      	addge	r3, r3, r0
 8007e76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e7a:	bfac      	ite	ge
 8007e7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e7e:	81a3      	strhlt	r3, [r4, #12]
 8007e80:	bd10      	pop	{r4, pc}

08007e82 <__swrite>:
 8007e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e86:	461f      	mov	r7, r3
 8007e88:	898b      	ldrh	r3, [r1, #12]
 8007e8a:	05db      	lsls	r3, r3, #23
 8007e8c:	4605      	mov	r5, r0
 8007e8e:	460c      	mov	r4, r1
 8007e90:	4616      	mov	r6, r2
 8007e92:	d505      	bpl.n	8007ea0 <__swrite+0x1e>
 8007e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e98:	2302      	movs	r3, #2
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f000 f868 	bl	8007f70 <_lseek_r>
 8007ea0:	89a3      	ldrh	r3, [r4, #12]
 8007ea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ea6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007eaa:	81a3      	strh	r3, [r4, #12]
 8007eac:	4632      	mov	r2, r6
 8007eae:	463b      	mov	r3, r7
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb6:	f000 b817 	b.w	8007ee8 <_write_r>

08007eba <__sseek>:
 8007eba:	b510      	push	{r4, lr}
 8007ebc:	460c      	mov	r4, r1
 8007ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ec2:	f000 f855 	bl	8007f70 <_lseek_r>
 8007ec6:	1c43      	adds	r3, r0, #1
 8007ec8:	89a3      	ldrh	r3, [r4, #12]
 8007eca:	bf15      	itete	ne
 8007ecc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ece:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ed2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ed6:	81a3      	strheq	r3, [r4, #12]
 8007ed8:	bf18      	it	ne
 8007eda:	81a3      	strhne	r3, [r4, #12]
 8007edc:	bd10      	pop	{r4, pc}

08007ede <__sclose>:
 8007ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee2:	f000 b813 	b.w	8007f0c <_close_r>
	...

08007ee8 <_write_r>:
 8007ee8:	b538      	push	{r3, r4, r5, lr}
 8007eea:	4d07      	ldr	r5, [pc, #28]	; (8007f08 <_write_r+0x20>)
 8007eec:	4604      	mov	r4, r0
 8007eee:	4608      	mov	r0, r1
 8007ef0:	4611      	mov	r1, r2
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	602a      	str	r2, [r5, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	f7fa fb77 	bl	80025ea <_write>
 8007efc:	1c43      	adds	r3, r0, #1
 8007efe:	d102      	bne.n	8007f06 <_write_r+0x1e>
 8007f00:	682b      	ldr	r3, [r5, #0]
 8007f02:	b103      	cbz	r3, 8007f06 <_write_r+0x1e>
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	bd38      	pop	{r3, r4, r5, pc}
 8007f08:	20000290 	.word	0x20000290

08007f0c <_close_r>:
 8007f0c:	b538      	push	{r3, r4, r5, lr}
 8007f0e:	4d06      	ldr	r5, [pc, #24]	; (8007f28 <_close_r+0x1c>)
 8007f10:	2300      	movs	r3, #0
 8007f12:	4604      	mov	r4, r0
 8007f14:	4608      	mov	r0, r1
 8007f16:	602b      	str	r3, [r5, #0]
 8007f18:	f7fa fb83 	bl	8002622 <_close>
 8007f1c:	1c43      	adds	r3, r0, #1
 8007f1e:	d102      	bne.n	8007f26 <_close_r+0x1a>
 8007f20:	682b      	ldr	r3, [r5, #0]
 8007f22:	b103      	cbz	r3, 8007f26 <_close_r+0x1a>
 8007f24:	6023      	str	r3, [r4, #0]
 8007f26:	bd38      	pop	{r3, r4, r5, pc}
 8007f28:	20000290 	.word	0x20000290

08007f2c <_fstat_r>:
 8007f2c:	b538      	push	{r3, r4, r5, lr}
 8007f2e:	4d07      	ldr	r5, [pc, #28]	; (8007f4c <_fstat_r+0x20>)
 8007f30:	2300      	movs	r3, #0
 8007f32:	4604      	mov	r4, r0
 8007f34:	4608      	mov	r0, r1
 8007f36:	4611      	mov	r1, r2
 8007f38:	602b      	str	r3, [r5, #0]
 8007f3a:	f7fa fb7e 	bl	800263a <_fstat>
 8007f3e:	1c43      	adds	r3, r0, #1
 8007f40:	d102      	bne.n	8007f48 <_fstat_r+0x1c>
 8007f42:	682b      	ldr	r3, [r5, #0]
 8007f44:	b103      	cbz	r3, 8007f48 <_fstat_r+0x1c>
 8007f46:	6023      	str	r3, [r4, #0]
 8007f48:	bd38      	pop	{r3, r4, r5, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20000290 	.word	0x20000290

08007f50 <_isatty_r>:
 8007f50:	b538      	push	{r3, r4, r5, lr}
 8007f52:	4d06      	ldr	r5, [pc, #24]	; (8007f6c <_isatty_r+0x1c>)
 8007f54:	2300      	movs	r3, #0
 8007f56:	4604      	mov	r4, r0
 8007f58:	4608      	mov	r0, r1
 8007f5a:	602b      	str	r3, [r5, #0]
 8007f5c:	f7fa fb7d 	bl	800265a <_isatty>
 8007f60:	1c43      	adds	r3, r0, #1
 8007f62:	d102      	bne.n	8007f6a <_isatty_r+0x1a>
 8007f64:	682b      	ldr	r3, [r5, #0]
 8007f66:	b103      	cbz	r3, 8007f6a <_isatty_r+0x1a>
 8007f68:	6023      	str	r3, [r4, #0]
 8007f6a:	bd38      	pop	{r3, r4, r5, pc}
 8007f6c:	20000290 	.word	0x20000290

08007f70 <_lseek_r>:
 8007f70:	b538      	push	{r3, r4, r5, lr}
 8007f72:	4d07      	ldr	r5, [pc, #28]	; (8007f90 <_lseek_r+0x20>)
 8007f74:	4604      	mov	r4, r0
 8007f76:	4608      	mov	r0, r1
 8007f78:	4611      	mov	r1, r2
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	602a      	str	r2, [r5, #0]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	f7fa fb76 	bl	8002670 <_lseek>
 8007f84:	1c43      	adds	r3, r0, #1
 8007f86:	d102      	bne.n	8007f8e <_lseek_r+0x1e>
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	b103      	cbz	r3, 8007f8e <_lseek_r+0x1e>
 8007f8c:	6023      	str	r3, [r4, #0]
 8007f8e:	bd38      	pop	{r3, r4, r5, pc}
 8007f90:	20000290 	.word	0x20000290

08007f94 <_read_r>:
 8007f94:	b538      	push	{r3, r4, r5, lr}
 8007f96:	4d07      	ldr	r5, [pc, #28]	; (8007fb4 <_read_r+0x20>)
 8007f98:	4604      	mov	r4, r0
 8007f9a:	4608      	mov	r0, r1
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	602a      	str	r2, [r5, #0]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	f7fa fb04 	bl	80025b0 <_read>
 8007fa8:	1c43      	adds	r3, r0, #1
 8007faa:	d102      	bne.n	8007fb2 <_read_r+0x1e>
 8007fac:	682b      	ldr	r3, [r5, #0]
 8007fae:	b103      	cbz	r3, 8007fb2 <_read_r+0x1e>
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	bd38      	pop	{r3, r4, r5, pc}
 8007fb4:	20000290 	.word	0x20000290

08007fb8 <_init>:
 8007fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fba:	bf00      	nop
 8007fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fbe:	bc08      	pop	{r3}
 8007fc0:	469e      	mov	lr, r3
 8007fc2:	4770      	bx	lr

08007fc4 <_fini>:
 8007fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc6:	bf00      	nop
 8007fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fca:	bc08      	pop	{r3}
 8007fcc:	469e      	mov	lr, r3
 8007fce:	4770      	bx	lr
